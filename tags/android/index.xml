<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Android on BLOG</title><link>https://example.org/tags/android/</link><description>Recent content in Android on BLOG</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 17 Oct 2021 17:54:55 +0000</lastBuildDate><atom:link href="https://example.org/tags/android/index.xml" rel="self" type="application/rss+xml"/><item><title>开发环境配置</title><link>https://example.org/posts/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 17 Oct 2021 17:54:55 +0000</pubDate><guid>https://example.org/posts/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid><description>为了防止每次配置环境都要去搜索，每次配置完成之后都要重新做一些个性化设置，记录一下环境配置，一次搞定。后续会将这些配置写成一个macOS/Linux的脚本，一键配置，Windows下还是得自己手动配置。
配置Java 下载JAVA_8、JAVA_11
配置环境
JAVA_HOME: C:\Java\jdk11
Path: %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;
CLASSPATH: .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;
配置Android 下载Toolbox 配置环境 ANDROID_HOME: C:\AndroidSDK Path: %ANDROID_HOME%\tools;%ANDROID_HOME%\platform-tools; 配置Flutter 下载Flutter 配置环境 FLUTTER_HOME: C:\androidsdk\flutter\bin Path: %FLUTTER_HOME% 配置Node 下载nvm-windows-upgrader 安装Node nvm install lts 配置环境 NODE_HOME: C:\Users\xxx\AppData\Roaming\nvm NVM_SYMLINK: C:\Program Files\nodejs Path: %NVM_HOME%;%NVM_SYMLINK% 配置python 下载python 配置环境 PYTHON_HOME: C:\Users\xxx\AppData\Local\Programs\Python\Python310\ Path: %PYTHON_HOME%;%PYTHON_HOME%\Scripts\</description><content:encoded><![CDATA[<p>为了防止每次配置环境都要去搜索，每次配置完成之后都要重新做一些个性化设置，记录一下环境配置，一次搞定。后续会将这些配置写成一个macOS/Linux的脚本，一键配置，Windows下还是得自己手动配置。</p>
<h4 id="配置java">配置Java</h4>
<ol>
<li>
<p>下载<a href="https://www.azul.com/downloads/?version=java-8-lts&amp;package=jdk">JAVA_8</a>、<a href="https://www.azul.com/downloads/?version=java-11-lts&amp;package=jdk">JAVA_11</a></p>
</li>
<li>
<p>配置环境</p>
<p>JAVA_HOME: <code>C:\Java\jdk11</code></p>
<p>Path: <code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</code></p>
<p>CLASSPATH: <code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</code></p>
</li>
</ol>
<h4 id="配置android">配置Android</h4>
<ol>
<li><a href="https://www.jetbrains.com/toolbox-app/">下载Toolbox</a></li>
<li>配置环境
ANDROID_HOME: <code>C:\AndroidSDK</code>
Path: <code>%ANDROID_HOME%\tools;%ANDROID_HOME%\platform-tools;</code></li>
</ol>
<h4 id="配置flutter">配置Flutter</h4>
<ol>
<li><a href="https://flutter.cn/docs/get-started/install">下载Flutter</a></li>
<li>配置环境
FLUTTER_HOME: <code>C:\androidsdk\flutter\bin</code>
Path: <code>%FLUTTER_HOME%</code></li>
</ol>
<h4 id="配置node">配置Node</h4>
<ol>
<li><a href="https://github.com/coreybutler/nvm-windows/releases">下载nvm-windows-upgrader</a></li>
<li>安装Node <code>nvm install lts</code></li>
<li>配置环境
NODE_HOME: <code>C:\Users\xxx\AppData\Roaming\nvm</code>
NVM_SYMLINK: <code>C:\Program Files\nodejs</code>
Path: <code>%NVM_HOME%;%NVM_SYMLINK%</code></li>
</ol>
<h4 id="配置python">配置python</h4>
<ol>
<li><a href="https://www.python.org/downloads/">下载python</a></li>
<li>配置环境
PYTHON_HOME: <code>C:\Users\xxx\AppData\Local\Programs\Python\Python310\</code>
Path: <code>%PYTHON_HOME%;%PYTHON_HOME%\Scripts\</code></li>
</ol>
]]></content:encoded></item><item><title>build.gradle.kts + buildSrc管理Gradle依赖</title><link>https://example.org/posts/build-gradle-kts-buildsrc/</link><pubDate>Sun, 09 Aug 2020 11:31:28 +0000</pubDate><guid>https://example.org/posts/build-gradle-kts-buildsrc/</guid><description>在Android开发过程中，经常需要管理Gradle的依赖，但是传统的Gradle管理方式有几个不好的地方
对于多个module支持不太好，无法共用 build.gradle文件中无法使用自动补全 如果某个库在多module中引用，需要改动多个地方 …… 虽然Google官方推荐使用ext的形式统一管理，但是对于现在大家使用Kotlin越来越多的情况下，是否能够使用Kotlin一门语言统一Android开发。
今天就给大家介绍build.gradle.kts + buildSrc的方式来管理Gradle依赖，这种方式管理Gradle依赖，能够利用Kotlin语言的自动补全，让我们更方便地书写代码。接下来我们就一步步的将build.gradle转化为build.gradle.kts
build.gradle -&amp;gt; build.gradle.kts 修改文件名为build.gradle.kts
替换单引号为双引号
在gradle语法中，可以用单引号'和双引号&amp;quot;来表示字符串，但是在build.gradle.kts中只能使用双引号表示字符串，所以我们要做的第一步就是将build.gradle文件中所有的单引号转换为双引号，这一步使用Android Studio自带的替换功能即可。
在文件中按下快捷键Ctrl+R，然后输入要查找的单引号，再输入要替换的双引号，点击Replace all，替换完成。
修改gradle语法为kts语法
setting.gradle
//修改前 include &amp;#39;:app&amp;#39; rootProject.name = &amp;#34;BlogTmp&amp;#34; //修改后 include(&amp;#34;:app&amp;#34;) rootProject.name = &amp;#34;BlogTmp&amp;#34; build.gradle(project)
//修改前 // Top-level build file where you can add configuration options common to all sub-projects/modules. buildscript { ext.kotlin_version = &amp;#34;1.3.72&amp;#34; repositories { google() jcenter() } dependencies { classpath &amp;#34;com.android.tools.build:gradle:4.0.1&amp;#34; classpath &amp;#34;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&amp;#34; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.</description><content:encoded><![CDATA[<p>在Android开发过程中，经常需要管理Gradle的依赖，但是传统的Gradle管理方式有几个不好的地方</p>
<ul>
<li>对于多个module支持不太好，无法共用</li>
<li>build.gradle文件中无法使用自动补全</li>
<li>如果某个库在多module中引用，需要改动多个地方</li>
<li>……</li>
</ul>
<p>虽然Google官方推荐使用ext的形式统一管理，但是对于现在大家使用Kotlin越来越多的情况下，是否能够使用Kotlin一门语言统一Android开发。</p>
<!-- raw HTML omitted -->
<p>今天就给大家介绍build.gradle.kts + buildSrc的方式来管理Gradle依赖，这种方式管理Gradle依赖，能够利用Kotlin语言的自动补全，让我们更方便地书写代码。接下来我们就一步步的将<code>build.gradle</code>转化为<code>build.gradle.kts</code></p>
<h3 id="buildgradle---buildgradlekts">build.gradle -&gt; build.gradle.kts</h3>
<p>修改文件名为<code>build.gradle.kts</code></p>
<p><strong>替换单引号为双引号</strong></p>
<p>在gradle语法中，可以用单引号<code>'</code>和双引号<code>&quot;</code>来表示字符串，但是在<code>build.gradle.kts</code>中只能使用双引号表示字符串，所以我们要做的第一步就是将<code>build.gradle</code>文件中所有的单引号转换为双引号，这一步使用Android Studio自带的替换功能即可。</p>
<p>在文件中按下快捷键<code>Ctrl+R</code>，然后输入要查找的单引号，再输入要替换的双引号，点击<code>Replace all</code>，替换完成。</p>
<p><strong>修改gradle语法为kts语法</strong></p>
<ul>
<li>
<p>setting.gradle</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#75715e">//修改前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>include <span style="color:#960050;background-color:#1e0010">&#39;</span>:app<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>rootProject.name = <span style="color:#e6db74">&#34;BlogTmp&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//修改后
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>include(<span style="color:#e6db74">&#34;:app&#34;</span>)
</span></span><span style="display:flex;"><span>rootProject.name = <span style="color:#e6db74">&#34;BlogTmp&#34;</span>
</span></span></code></pre></div></li>
<li>
<p>build.gradle(project)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#75715e">//修改前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// Top-level build file where you can add configuration options common to all sub-projects/modules.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>buildscript {
</span></span><span style="display:flex;"><span>    ext.kotlin_version = <span style="color:#e6db74">&#34;1.3.72&#34;</span>
</span></span><span style="display:flex;"><span>    repositories {
</span></span><span style="display:flex;"><span>        google()
</span></span><span style="display:flex;"><span>        jcenter()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    dependencies {
</span></span><span style="display:flex;"><span>        classpath <span style="color:#e6db74">&#34;com.android.tools.build:gradle:4.0.1&#34;</span>
</span></span><span style="display:flex;"><span>        classpath <span style="color:#e6db74">&#34;org.jetbrains.kotlin:kotlin-gradle-plugin:</span><span style="color:#e6db74">$kotlin</span><span style="color:#e6db74">_version&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// NOTE: Do not place your application dependencies here; they belong
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// in the individual module build.gradle files
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>allprojects {
</span></span><span style="display:flex;"><span>    repositories {
</span></span><span style="display:flex;"><span>        google()
</span></span><span style="display:flex;"><span>        jcenter()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>task clean(type: Delete) {
</span></span><span style="display:flex;"><span>    delete rootProject.buildDir
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//修改后
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// Top-level build file where you can add configuration options common to all sub-projects/modules.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>buildscript {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">val</span> kotlin_version = <span style="color:#e6db74">&#34;1.3.72&#34;</span>
</span></span><span style="display:flex;"><span>    repositories {
</span></span><span style="display:flex;"><span>        google()
</span></span><span style="display:flex;"><span>        jcenter()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    dependencies {
</span></span><span style="display:flex;"><span>        classpath (<span style="color:#e6db74">&#34;com.android.tools.build:gradle:4.0.1&#34;</span>)
</span></span><span style="display:flex;"><span>        classpath (<span style="color:#e6db74">&#34;org.jetbrains.kotlin:kotlin-gradle-plugin:</span><span style="color:#e6db74">$kotlin</span><span style="color:#e6db74">_version&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// NOTE: Do not place your application dependencies here; they belong
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// in the individual module build.gradle files
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>allprojects {
</span></span><span style="display:flex;"><span>    repositories {
</span></span><span style="display:flex;"><span>        google()
</span></span><span style="display:flex;"><span>        jcenter()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>tasks.register(<span style="color:#e6db74">&#34;clean&#34;</span>, Delete<span style="color:#f92672">::</span><span style="color:#66d9ef">class</span>) {
</span></span><span style="display:flex;"><span>    delete(rootProject.buildDir)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
<li>
<p>build.gradle(app)</p>
<p>修改前</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span>apply plugin: <span style="color:#960050;background-color:#1e0010">&#39;</span>com.android.application<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>apply plugin: <span style="color:#960050;background-color:#1e0010">&#39;</span>kotlin-android<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>apply plugin: <span style="color:#960050;background-color:#1e0010">&#39;</span>kotlin-android-extensions<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>android {
</span></span><span style="display:flex;"><span>    compileSdkVersion <span style="color:#ae81ff">29</span>
</span></span><span style="display:flex;"><span>    buildToolsVersion <span style="color:#e6db74">&#34;29.0.3&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    defaultConfig {
</span></span><span style="display:flex;"><span>        applicationId <span style="color:#e6db74">&#34;com.agiao.blogtmp&#34;</span>
</span></span><span style="display:flex;"><span>        minSdkVersion <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>        targetSdkVersion <span style="color:#ae81ff">29</span>
</span></span><span style="display:flex;"><span>        versionCode <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        versionName <span style="color:#e6db74">&#34;1.0&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        testInstrumentationRunner <span style="color:#e6db74">&#34;androidx.test.runner.AndroidJUnitRunner&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    buildTypes {
</span></span><span style="display:flex;"><span>        release {
</span></span><span style="display:flex;"><span>            minifyEnabled <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>            proguardFiles getDefaultProguardFile(<span style="color:#960050;background-color:#1e0010">&#39;</span>proguard-android-optimize.txt<span style="color:#960050;background-color:#1e0010">&#39;</span>), <span style="color:#960050;background-color:#1e0010">&#39;</span>proguard-rules.pro<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>dependencies {
</span></span><span style="display:flex;"><span>    implementation fileTree(dir: <span style="color:#e6db74">&#34;libs&#34;</span>, include: [<span style="color:#e6db74">&#34;*.jar&#34;</span>])
</span></span><span style="display:flex;"><span>    implementation <span style="color:#e6db74">&#34;org.jetbrains.kotlin:kotlin-stdlib:</span><span style="color:#e6db74">$kotlin</span><span style="color:#e6db74">_version&#34;</span>
</span></span><span style="display:flex;"><span>    implementation <span style="color:#960050;background-color:#1e0010">&#39;</span>androidx.core:core-ktx:<span style="color:#ae81ff">1.3</span>.<span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>    implementation <span style="color:#960050;background-color:#1e0010">&#39;</span>androidx.appcompat:appcompat:<span style="color:#ae81ff">1.1</span>.<span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>    implementation <span style="color:#960050;background-color:#1e0010">&#39;</span>androidx.constraintlayout:constraintlayout:<span style="color:#ae81ff">1.1</span>.<span style="color:#ae81ff">3</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>    testImplementation <span style="color:#960050;background-color:#1e0010">&#39;</span>junit:junit:<span style="color:#ae81ff">4.12</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>    androidTestImplementation <span style="color:#960050;background-color:#1e0010">&#39;</span>androidx.test.ext:junit:<span style="color:#ae81ff">1.1</span>.<span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>    androidTestImplementation <span style="color:#960050;background-color:#1e0010">&#39;</span>androidx.test.espresso:espresso-core:<span style="color:#ae81ff">3.2</span>.<span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>修改后</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span>plugins {
</span></span><span style="display:flex;"><span>    id(<span style="color:#e6db74">&#34;com.android.application&#34;</span>)
</span></span><span style="display:flex;"><span>    id(<span style="color:#e6db74">&#34;kotlin-android&#34;</span>)
</span></span><span style="display:flex;"><span>    id(<span style="color:#e6db74">&#34;kotlin-android-extensions&#34;</span>)
</span></span><span style="display:flex;"><span>    id(<span style="color:#e6db74">&#34;kotlin-kapt&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>android {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    compileSdkVersion(<span style="color:#a6e22e">Versions</span>.compileSdkVersion)
</span></span><span style="display:flex;"><span>    buildToolsVersion(<span style="color:#a6e22e">Versions</span>.buildToolsVersion)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    defaultConfig {
</span></span><span style="display:flex;"><span>        applicationId = <span style="color:#a6e22e">Versions</span>.applicationId
</span></span><span style="display:flex;"><span>        minSdkVersion(<span style="color:#a6e22e">Versions</span>.minSdkVersion)
</span></span><span style="display:flex;"><span>        targetSdkVersion(<span style="color:#a6e22e">Versions</span>.targetSdkVersion)
</span></span><span style="display:flex;"><span>        versionCode = <span style="color:#a6e22e">Versions</span>.versionCode
</span></span><span style="display:flex;"><span>        versionName = <span style="color:#a6e22e">Versions</span>.versionName
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        testInstrumentationRunner = <span style="color:#e6db74">&#34;androidx.test.runner.AndroidJUnitRunner&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    buildTypes {
</span></span><span style="display:flex;"><span>        getByName(<span style="color:#a6e22e">BuildType</span>.release) {
</span></span><span style="display:flex;"><span>            isMinifyEnabled = <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            proguardFiles(getDefaultProguardFile(<span style="color:#e6db74">&#34;proguard-android.txt&#34;</span>), <span style="color:#e6db74">&#34;proguard-rules.pro&#34;</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    compileOptions {
</span></span><span style="display:flex;"><span>        sourceCompatibility = <span style="color:#a6e22e">JavaVersion</span>.VERSION_1_8
</span></span><span style="display:flex;"><span>        targetCompatibility = <span style="color:#a6e22e">JavaVersion</span>.VERSION_1_8
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>dependencies {
</span></span><span style="display:flex;"><span>    implementation(fileTree(mapOf(<span style="color:#e6db74">&#34;dir&#34;</span> to <span style="color:#e6db74">&#34;libs&#34;</span>, <span style="color:#e6db74">&#34;include&#34;</span> to listOf(<span style="color:#e6db74">&#34;*.jar&#34;</span>))))
</span></span><span style="display:flex;"><span>    implementation(<span style="color:#a6e22e">Dependencies</span>.kotlinStd)
</span></span><span style="display:flex;"><span>    implementation(<span style="color:#a6e22e">Dependencies</span>.coreKTX)
</span></span><span style="display:flex;"><span>    implementation(<span style="color:#a6e22e">Dependencies</span>.constraintLayout)
</span></span><span style="display:flex;"><span>    implementation(<span style="color:#a6e22e">Dependencies</span>.appCompat)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    testImplementation(<span style="color:#a6e22e">Test</span>.junit)
</span></span><span style="display:flex;"><span>    androidTestImplementation(<span style="color:#a6e22e">Test</span>.junitTest)
</span></span><span style="display:flex;"><span>    androidTestImplementation(<span style="color:#a6e22e">Test</span>.espresso)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
</ul>
<p>修改的几个注意点：</p>
<ul>
<li><code>kts</code>文件中大多都是函数调用，所以需要加上括号，字符串是作为参数传进去的</li>
<li><code>project-build.gradle</code>中的<code>task</code>需要修改为新的写法</li>
<li><code>app-build.gradle</code>中的<code>fileTree</code>需要修改为新的写法</li>
</ul>
<p>在上述的修改中，使用到了<code>Dependencies.appCompat</code>这种调用方式，<code>Dependencies</code>就是我们在buildSrc中定义的统一管理文件。</p>
<h3 id="新建buildsrc模块">新建buildSrc模块</h3>
<p>在Android Studio中，将目录切换为<code>Project</code>，然后新建<code>buildSrc</code>文件夹，在<code>buildSrc</code>文件夹下新建<code>build.gradle.kts</code>文件，然后填入下面的代码，点击<code>sync now</code>进行同步。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span>plugins {
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">`</span>kotlin-dsl<span style="color:#960050;background-color:#1e0010">`</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>repositories{
</span></span><span style="display:flex;"><span>    jcenter()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>同步完成之后，<code>buildSrc</code>就变成了和<code>app</code>一样的一个<code>module</code>。然后在<code>buildSrc</code>文件夹上右键-新建文件夹-选择<code>src/main/java</code>，接下来就可以将我们的依赖写在该文件下的文件中了。</p>
<h3 id="新建统一依赖管理文件">新建统一依赖管理文件</h3>
<p>在上述的<code>src/main/java</code>文件夹中新建Dependencies.kt文件（文件名可以任意取）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Dependencies</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> kotlinStd = <span style="color:#e6db74">&#34;org.jetbrains.kotlin:kotlin-stdlib:</span><span style="color:#e6db74">${Versions.kotlinVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> coreKTX = <span style="color:#e6db74">&#34;androidx.core:core-ktx:</span><span style="color:#e6db74">${Versions.coreKTX}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> appCompat = <span style="color:#e6db74">&#34;androidx.appcompat:appcompat:</span><span style="color:#e6db74">${Versions.appCompact}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> constraintLayout =
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;androidx.constraintlayout:constraintlayout:</span><span style="color:#e6db74">${Versions.constraintLayout}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> roomRuntime = <span style="color:#e6db74">&#34;androidx.room:room-runtime:</span><span style="color:#e6db74">${Versions.roomVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> roomCompiler = <span style="color:#e6db74">&#34;androidx.room:room-compiler:</span><span style="color:#e6db74">${Versions.roomVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> roomCoroutines = <span style="color:#e6db74">&#34;androidx.room:room-ktx:</span><span style="color:#e6db74">${Versions.roomVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> liveData = <span style="color:#e6db74">&#34;androidx.lifecycle:lifecycle-viewmodel-ktx:</span><span style="color:#e6db74">${Versions.lifeCycleVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> viewModel = <span style="color:#e6db74">&#34;androidx.lifecycle:lifecycle-livedata-ktx:</span><span style="color:#e6db74">${Versions.lifeCycleVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> lifeCycleCompiler =
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;androidx.lifecycle:lifecycle-compiler:</span><span style="color:#e6db74">${Versions.lifeCycleVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> material = <span style="color:#e6db74">&#34;com.google.android.material:material:</span><span style="color:#e6db74">${Versions.materialVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Versions</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> compileSdkVersion = <span style="color:#ae81ff">29</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> buildToolsVersion = <span style="color:#e6db74">&#34;29.0.3&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> applicationId = <span style="color:#e6db74">&#34;com.agiao.blogtmp&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> minSdkVersion = <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> targetSdkVersion = <span style="color:#ae81ff">29</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> versionCode = <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> versionName = <span style="color:#e6db74">&#34;1.0&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> kotlinVersion = <span style="color:#e6db74">&#34;1.3.72&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> coreKTX = <span style="color:#e6db74">&#34;1.3.0&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> appCompact = <span style="color:#e6db74">&#34;1.1.0&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> constraintLayout = <span style="color:#e6db74">&#34;2.0.0-rc1&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> roomVersion = <span style="color:#e6db74">&#34;2.2.5&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> lifeCycleVersion = <span style="color:#e6db74">&#34;2.2.0&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> materialVersion = <span style="color:#e6db74">&#34;1.1.0&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> junit = <span style="color:#e6db74">&#34;4.12&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> junitTest = <span style="color:#e6db74">&#34;1.1.1&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> espresso = <span style="color:#e6db74">&#34;3.2.0&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Test</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> testRoom = <span style="color:#e6db74">&#34;androidx.room:room-testing:</span><span style="color:#e6db74">${Versions.roomVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> junit = <span style="color:#e6db74">&#34;junit:junit:</span><span style="color:#e6db74">${Versions.junit}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> junitTest = <span style="color:#e6db74">&#34;androidx.test.ext:junit:</span><span style="color:#e6db74">${Versions.junitTest}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> espresso = <span style="color:#e6db74">&#34;androidx.test.espresso:espresso-core:</span><span style="color:#e6db74">${Versions.espresso}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">object</span> <span style="color:#a6e22e">BuildType</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> release = <span style="color:#e6db74">&#34;release&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> debug = <span style="color:#e6db74">&#34;debug&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>上述的依赖库可以根据自己的需要调整，也可以把每个<code>object</code>都提取为单独的文件，这部分就是根据个人喜好自己调整。</p>
<p>至此，我们的<code>build.gradle</code>就完全改造完成了。现在就可以在<code>build.gradle.kts</code>中使用Kotlin的语法进行依赖导入了，同时还能使用Kotlin的自动补全功能，更方便的管理和导入依赖了。</p>
]]></content:encoded></item></channel></rss>