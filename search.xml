<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo + Github Pages搭建博客</title>
    <url>/2020/01/13/Hexo%E5%92%8CGithubPages/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/04/15/DNjXiwZC51ekBy8.png" alt=""></p>
<p>本文以Windows 10操作系统为例，介绍Hexo + Github Pages搭建个人博客的具体步骤。先简单介绍下Hexo和Github Pages</p>
<ul>
<li>Hexo是一个快速、简洁且高效的博客框架</li>
<li>Github Pages是Github推出的静态页面托管服务</li>
</ul>
<p>将由Hexo生成的静态页面托管到Github Pages上，即可实现简单的个人博客或是项目介绍页面，那么接下来就来看看具体的操作步骤。</p>
<a id="more"></a>



<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h3><ol>
<li><p>创建私有的源文件仓库</p>
<p>创建私有源文件仓库是因为部分源文件中会包含一些敏感的信息，为了更好地保护隐私。具体操作如图所示</p>
</li>
</ol>
<p>   <img src="https://i.loli.net/2020/04/15/3OiMJrNfTyUQCIB.png" alt=""></p>
<p>   在上图中，我们创建了一个名为<code>HexoSourceRepo</code>仓库，以后我们就会将博客的基本配置和文件存放在这个仓库。因此后续的主要操作，都是在<code>HexoSourceRepo</code>仓库进行的。</p>
<ol start="2">
<li><p>创建公开的静态页面仓库</p>
<p><img src="https://i.loli.net/2020/04/15/PEpmUk12brxzRvC.png" alt=""></p>
<p>创建静态页面仓库和源文件仓库步骤是一样的，但是有两个地方需要注意</p>
<ol>
<li>公开仓库的名称必须是你的用户名.github.io，比如你的用户名是<code>zhangsan</code>，那么仓库名称就必须是<code>zhangsan.github.io</code></li>
<li>静态页面仓库，也就是<code>zhangsan.github.io</code>是公开的，而源文件仓库是私有的。</li>
</ol>
</li>
</ol>
<p>创建好两个仓库之后，我们就可以开始安装<code>Hexo</code>了，但是在安装<code>Hexo</code>之前，需要先安装<code>Node</code>环境，因为<code>Hexo</code>是<code>Node.js</code>支持的。</p>
<h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><p>直接去<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener external nofollow noreferrer">Node官网</a>下载最新的安装包即可，推荐长期支持版，下载完成之后，打开安装包，一路下一步傻瓜式安装。安装完成之后，在命令行输入<code>node --version</code>和<code>npm -v</code>查看是否有输出，输出如下就表示没问题。</p>
<p><img src="https://i.loli.net/2020/04/15/IcFY6D8ZgyBW2hR.png" alt=""></p>
<p>在安装<code>Node</code>的时候会自动安装<code>npm</code>包管理工具，但是<code>npm</code>默认使用国外的镜像，所以在后面安装包的时候可能会非常慢，所以我们先将<code>npm</code>替换为<code>cnpm</code>，在命令行中输入如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>安装<code>cnpm</code>并将镜像替换为国内的<code>taobao</code>镜像，加速包的下载速度。如果不想安装<code>cnpm</code>也可以直接将<code>npm</code>的镜像替换为<code>taobao</code>镜像</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>安装完<code>cnpm</code>之后，就可以将所有的<code>npm</code>命令使用<code>cnpm</code>代替。</p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>在<a href="https://git-scm.com/download/win" target="_blank" rel="noopener external nofollow noreferrer">Git官方页面</a>下载Git，完成之后一路下一步傻瓜式安装。安装完成之后，即可使用<code>Git Bash</code>和<code>Git GUI</code></p>
<p>来进行<code>Git</code>操作，本文全程使用<code>Git Bash</code>操作。为了能在<code>Git Bash</code>中使用<code>Node</code>和<code>npm</code>命令，还需要配置一下<code>Node</code>的环境变量，否则会出现<code>command not found</code>错误。</p>
<p>在环境变量－系统变量中，添加一个<code>NODE_PATH</code>值为<code>C:\Program Files\nodejs</code>(注意替换为自己的<code>Node</code>安装路径)，然后在<code>Path</code>中添加<code>%NODE_PATH%</code>即可。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在喜欢的位置，新建一个文件夹，名为<code>HexoSourceRepo</code>，和上面创建的私有文件仓库同名。然后在文件夹中打开<code>Git Bash</code>依次进行如下操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init //初始化Git仓库</span><br><span class="line">git remote add origin https://github.com/yourname/HexoSourceRepo.git //添加远程仓库</span><br><span class="line">git add . </span><br><span class="line">git commit -m <span class="string">"init hexo blog"</span> //第一次提交</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line">cnpm install hexo //安装Hexo</span><br><span class="line">hexo init //初始化Hexo</span><br><span class="line">cnpm install //安装依赖包</span><br><span class="line">cnpm install hexo-deployer-git //安装部署插件</span><br></pre></td></tr></table></figure>

<p>安装完<code>Hexo</code>之后，可以在命令行执行<code>hexo -v</code>查看所有的信息，如果提示<code>command not found</code>那么就将<code>Hexo</code>添加到环境变量的<code>Path</code>中<code>C:\HexoSourceRepo\node_modules\.bin</code>(注意替换为自己的目录)。</p>
<p>经过上面的一系列操作，我们搭建好了基本的环境，接下来就是进行<code>Hexo</code>的博客配置，这部分内容主要是在<code>HexoSourceRepo</code>中进行的。后文中的根目录指的也是<code>HexoSourceRepo</code>这个目录。</p>
<p>打开根目录中的<code>_config.yml文件</code>，修改文件最后的<code>deploy</code>参数为如下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> </span><br><span class="line"><span class="attr">    github:</span> <span class="string">git@github.com:yourname/yourname.github.io.git</span> <span class="string">//注意将yourname替换为自己的用户名</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>修改完成之后，我们再进行一次提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"first deploy"</span></span><br><span class="line">git push origin master </span><br><span class="line">//然后继续执行</span><br><span class="line">hexo g -d //将生成的网站部署到Github Pages静态页面上</span><br></pre></td></tr></table></figure>

<p>至此，我们就完成了个人博客的搭建和部署。</p>
<h2>
    <center>…未完待续…</center>
</h2>



]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux折腾</title>
    <url>/2018/08/02/Linux%E6%8A%98%E8%85%BE/</url>
    <content><![CDATA[<h1 id="Linux-折腾"><a href="#Linux-折腾" class="headerlink" title="Linux 折腾"></a>Linux 折腾</h1><blockquote>
<p>用Windows时间长了，总会想着去折腾一下Linux系统。</p>
</blockquote>
<a id="more"></a>
<h2 id="Linux-选择"><a href="#Linux-选择" class="headerlink" title="Linux 选择"></a>Linux 选择</h2><h3 id="Deepin"><a href="#Deepin" class="headerlink" title="Deepin"></a>Deepin</h3><p>Deepin是一款基于Debian的国产Linux系统，界面好看，软件好用，而且对于Linux和Windows的用户习惯兼容都挺不错的。对于一个普通用户，日常使用是完全没问题的。</p>
<h1 id="manjaro"><a href="#manjaro" class="headerlink" title="manjaro"></a>manjaro</h1><p>测试</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>AlertDialog中使用WebView显示内容</title>
    <url>/2016/07/28/AlertDialog%E4%B8%AD%E4%BD%BF%E7%94%A8WebView%E6%98%BE%E7%A4%BA%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<p>在最近的开发中，需要用到在AlertDialog中通过WebView显示内容，但是在实际操作过程中，发现有一个小小的问题需要注意一下，在此也记录一下。<br>首先放出代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AlertDialog.Builder builder = <span class="keyword">new</span> Builder(<span class="keyword">this</span>)</span><br><span class="line">           .setView(R.layout.new_dialog_user_guide);</span><br><span class="line">       View view = getLayoutInflater().inflate(R.layout.new_dialog_user_guide, <span class="keyword">null</span>);</span><br><span class="line">       WebView webView = (WebView) view.findViewById(R.id.web_user_guide);</span><br><span class="line">       webView.loadUrl(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">       builder.show();</span><br></pre></td></tr></table></figure>
<p>上面这段代码，看似是没问题的，但是在实际显示过程中，WebView一直都是空白页面，啥也没有。开始排查问题：</p>
<a id="more"></a>

<h4 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h4><p>一开始以为是网络问题，于是将<code>http://www.baidu.com</code>换成本地的assets中的文件，更换后关键代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">webView.loadUrl(<span class="string">"file:///android_asset/test.html"</span>);</span><br></pre></td></tr></table></figure>
<p>更换为本地文件之后，WebView中显示的依然是空白页面，啥也没有。继续排查</p>
<h4 id="文件问题"><a href="#文件问题" class="headerlink" title="文件问题"></a>文件问题</h4><p>是否是这个HTML的文件有问题，如果直接加载HTML字符串，问题能否结局，继续修改关键代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">webView.loadData(<span class="string">"&lt;html&gt;这是一段HTML的代码&lt;/html&gt;"</span>,<span class="string">"text/html"</span>, <span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">//或者也可以这样</span></span><br><span class="line">webView.loadDataWithBaseURL(<span class="keyword">null</span>, <span class="string">"&lt;html&gt;这是一段html代码&lt;/html&gt;"</span>, <span class="string">"text/html"</span>, <span class="string">"utf-8"</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<p>更改成直接加载HTML字符串之后，WebView还是现实空白页面，啥也没有。最后想来想去，是不是因为我们将WebView放在了AlertDialog中，所以导致我们的WebView显示有问题。于是我们将WebView单独移出来，结果发现可以显示出正确的内容。那也就是说这个问题出在AlertDialog身上了，难道WebView不能放在AlertDialog中吗。显然不是的，于是参考了官方教程之后，终于发现了问题所在。</p>
<h4 id="震惊！导致WebView显示空白的罪魁祸首竟然是……"><a href="#震惊！导致WebView显示空白的罪魁祸首竟然是……" class="headerlink" title="震惊！导致WebView显示空白的罪魁祸首竟然是……"></a>震惊！导致WebView显示空白的罪魁祸首竟然是……</h4><p>先直接贴出可以运行的正确代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AlertDialog.Builder builder = <span class="keyword">new</span> Builder(<span class="keyword">this</span>);</span><br><span class="line">        View view = getLayoutInflater().inflate(R.layout.new_dialog_user_guide, <span class="keyword">null</span>);</span><br><span class="line">        WebView webView = (WebView) view.findViewById(R.id.web_user_guide);</span><br><span class="line">        webView.setWebViewClient(<span class="keyword">new</span> WebViewClient());</span><br><span class="line">        webView.loadUrl(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">        builder.setView(view);</span><br><span class="line">        builder.setPositiveButton(R.string.confirm, <span class="keyword">null</span>);</span><br><span class="line">        builder.show();</span><br></pre></td></tr></table></figure>
<p>问题就出在这个<code>setView</code>身上，我们的”错误代码”是先setView，然后再使用webview进行load，但是正确的顺序应该是先使用webview进行load，然后再setView。<br>问题到此排查结束。</p>
]]></content>
  </entry>
  <entry>
    <title>Android 5.0透明状态栏设置</title>
    <url>/2016/07/28/Android%205.0%E9%80%8F%E6%98%8E%E7%8A%B6%E6%80%81%E6%A0%8F%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>这篇文章是针对Android 5.0及以上版本的系统进行透明的状态栏设置，Android 5.0以下的系统暂不在本篇文章的讨论范围之内。</p>
<h2 id="Android-5-0透明状态栏——普通界面"><a href="#Android-5-0透明状态栏——普通界面" class="headerlink" title="Android 5.0透明状态栏——普通界面"></a>Android 5.0透明状态栏——普通界面</h2><p>先贴出MainActivity布局代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"stephen.com.material_design.NoteActivity"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag">        <span class="attr">layout</span>=<span class="string">"@layout/app_bar_note"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>上面的代码中，最主要的两行分别是：</p>
<ul>
<li>设置最外层布局背景色为Toolbar的颜色：<code>android:background=&quot;@color/colorPrimary&quot;</code></li>
<li>设置Toolbar不扩展到状态栏：<code>android:fitsSystemWindows=&quot;true&quot;</code><br>在布局文件中设置完毕后，还需要在<code>onCreate()</code>里面加上如下的代码：</li>
<li>设置状态栏颜色为透明：<code>getWindow().setStatusBarColor(Color.TRANSPARENT);</code></li>
<li>设置状态栏和APP的位置关系：<code>getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);</code><blockquote>
<p>setSystemUiVisibility(int visibility)传入的实参类型如下：</p>
<ol>
<li>View.SYSTEM_UI_FLAG_VISIBLE：显示状态栏，Activity不全屏显示(恢复到有状态的正常情况)。</li>
<li>View.INVISIBLE：隐藏状态栏，同时Activity会伸展全屏显示。</li>
<li>View.SYSTEM_UI_FLAG_FULLSCREEN：Activity全屏显示，且状态栏被隐藏覆盖掉。</li>
<li>View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN：Activity全屏显示，但状态栏不会被隐藏覆盖，状态栏依然可见，Activity顶端布局部分会被状态遮住。</li>
</ol>
</blockquote>
</li>
</ul>
<p>主要需要用到的参数就是以上的几个，其他的参数在实际的开发中用的相对较少，这里也就不列举出来了。<br>通过上面的两个地方的代码设置之后，我们的APP就可以实现透明状态栏的效果了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-c81ed81629099945.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="普通界面的透明状态栏"></p>
<p>以上就是普通的界面设置透明状态栏的方法。</p>
<h2 id="Android-5-0透明状态栏——带DrawerLayout界面"><a href="#Android-5-0透明状态栏——带DrawerLayout界面" class="headerlink" title="Android 5.0透明状态栏——带DrawerLayout界面"></a>Android 5.0透明状态栏——带DrawerLayout界面</h2><p>带有DrawerLayout的界面设置透明状态栏，最终效果是和网易云音乐一样的，方法其实和上面的差不多，但是有个小的地方需要注意，在这里我还是把代码和方法都完整的讲一遍。<br>带有DrawerLayout的布局文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:openDrawer</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">"@layout/app_bar_main"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/nav_header_main"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:menu</span>=<span class="string">"@menu/activity_main_drawer"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这里说一下要注意的几个点：</p>
<ol>
<li>这个<code>&lt;LinearLayout&gt; ... &lt;/LinearLayout&gt;</code>的作用，我之前没有用这个<code>&lt;LinearLayout&gt;</code>包裹<code>Toolbar</code>，结果怎么设置，都不能实现非常完美的透明状态栏，要么是statusbar颜色问题，要么是statusbar和NavigationView颜色不统一的问题。后来查找了很多资料，在一个小角落里面发现了，需要外层用<code>&lt;LinearLayout&gt;</code>包裹一下，这样的话就可以非常完美的显示出网易云音乐的效果了。</li>
<li><code>NavigationView</code>里面设置的<code>android:fitsSystemWindows=&quot;true&quot;</code>，这个也是为了让侧边栏即抽屉能够和状态栏颜色统一。</li>
<li><code>&lt;include  ... /&gt;</code>里面就是正常的设置<code>Toolbar</code>什么的了，但是要注意在<code>Toolbar</code>布局的最外层中也记得要添加<code>android:fitsSystemWindows=&quot;true&quot;</code></li>
</ol>
<p>在布局文件中设置完毕之后，接着就是在代码中设置了，在<code>onCreate()</code>里面加上如下的代码：</p>
<ul>
<li>设置状态栏颜色为透明：<code>getWindow().setStatusBarColor(Color.TRANSPARENT);</code></li>
<li>设置状态栏和APP的位置关系：<code>getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);</code></li>
</ul>
<p>将以上的所有代码都设置完毕之后，最终呈现的效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-d795e4d2e40a3f9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="没有打开抽屉.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-911543b2ad913c29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开抽屉"></p>
<p>至此，我们已经在Android 5.0上实现透明状态栏。但是对于这样的透明状态栏，我个人是不推荐的。因为我们进行的Android开发，而这个透明状态栏却给人一种IOS的风格，Android开发就应该从方方面面都能够体现出Android的特性。虽然在Android 5.0之前，Android的UI风格一直都惨不忍睹，但是我们一路都坚持下来了，而在Android 5.0之后，因为Material Design的推出，Android的颜值可以说是提升了非常多。所以我们开发人员更应该开发Pure Android的程序，而不是模仿和抄袭IOS的各种风格。</p>
]]></content>
  </entry>
  <entry>
    <title>Android中输出HTML格式下的文字</title>
    <url>/2016/07/28/Android%E4%B8%AD%E8%BE%93%E5%87%BAHTML%E6%A0%BC%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%96%87%E5%AD%97/</url>
    <content><![CDATA[<h1 id="Android中输出HTML格式下的文字"><a href="#Android中输出HTML格式下的文字" class="headerlink" title="Android中输出HTML格式下的文字"></a>Android中输出HTML格式下的文字</h1><p>在Android中，我们经常会用到TextView这个控件，在使用的过程中，我们用到最多的方法就是setText()，单纯的使用基本上能够满足我们日常的需求，但是有时候我们需要对文字进行一些处理，比如说加粗、斜体、下划线等等，这些也都是可以通过Android提供的原生方法完成。但是如果我们需要实现下面的效果呢：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-92f803de79292a20.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1"></p>
<a id="more"></a>

<h2 id="HTML下的文字解析-快速版"><a href="#HTML下的文字解析-快速版" class="headerlink" title="HTML下的文字解析(快速版)"></a>HTML下的文字解析(快速版)</h2><p>从图片上我们可以看到，这段文字分别有<code>两种大小，三种颜色</code>。我们当然可以定义多个TextView来实现这样的效果，但是如果我们的文字变化较多，那么定义多个TextView也非常的麻烦。那么接下来我们就来介绍一个比较简单的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"恭喜您！您的手机跑分为&lt;font color='#F50057'&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;888888分&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/font&gt;，已经超过全国&lt;font color='#00E676'&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;99%&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/font&gt;的Android手机。"</span>;</span><br><span class="line">tv.setText(Html.fromHtml(str));</span><br></pre></td></tr></table></figure>
<p>上面的代码中，我们用到了一个方法<code>Html.fromHtml()</code>，这个方法是Android中专门用来解析HTML格式的一个方法，我们可以将任意的HTML格式下的代码通过此方法解析，最后得到我们需要的结果。<br>通过上面的方法，我们就可以实现在<code>setText()</code>中使用各种带HTML效果的文字了。这样应该能够实现我们开发中98%的需求了，那么还有1-2%的需求是什么呢？</p>
<h2 id="HTML下的文字解析-多语言支持"><a href="#HTML下的文字解析-多语言支持" class="headerlink" title="HTML下的文字解析(多语言支持)"></a>HTML下的文字解析(多语言支持)</h2><p>比如说我们现在的APP需要兼容多种语言，包括中文、法语、英语、日语等等。在平时的开发过程中，我们都知道多语言的实现可以通过不同<code>values</code>文件夹下的<code>string.xml</code>文件来实现。我们这里就以中文来举例，看看我们如何在<code>string.xml</code>文件中定义HTML格式的文字。<br>首先我们来尝试将我们上面定义的<code>str</code>中的字符串直接放到<code>string.xml</code>中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"test_string"</span>&gt;</span></span><br><span class="line">      恭喜您！您的手机跑分为<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">'#F50057'</span>&gt;</span><span class="tag">&lt;<span class="name">big</span>&gt;</span><span class="tag">&lt;<span class="name">big</span>&gt;</span><span class="tag">&lt;<span class="name">big</span>&gt;</span>888888分<span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">      ，已经超过全国<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">'#00E676'</span>&gt;</span><span class="tag">&lt;<span class="name">big</span>&gt;</span><span class="tag">&lt;<span class="name">big</span>&gt;</span><span class="tag">&lt;<span class="name">big</span>&gt;</span>99%<span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span>的Android手机。</span><br><span class="line">   <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tv.setText(Html.fromHtml(getString(R.string.test_string)));</span><br></pre></td></tr></table></figure>


<p>运行程序，结果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-d8922d1d6ea9bc47.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2"></p>
<p>并没有出现我们预期的效果，HTML格式并没有被解析出来。这是什么原因呢？原因就在于我们使用的<code>getString()</code>方法，官方对于这个方法的解释如下：</p>
<blockquote>
<p>Return the string value associated with a particular resource ID. It will be stripped of any styled text information.<br>返回与特定资源ID相关联的字符串值，它将删除任何样式的文本信息。</p>
</blockquote>
<p>那么也就是说我们的HTML格式被<code>getString()</code>方法给删除了，所以我们的文字才会变成普通的字符串。要解决这个问题，我们需要将我们的<code>string.xml</code>中的字符串使用<code>&lt;![CDATA[...your html...]]&gt;</code>包裹起来，被<code>CDATA</code>包裹起来的字符都会被解析器忽略，也就是说<code>CDATA</code>中的HTML格式将会被原封不动的保留下来，最终交给我们的<code>Html.fromHtml()</code>进行解析。那么我们来尝试以下，将我们<code>string.xml</code>中的字符串改为如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"test_string"</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">            恭喜您！您的手机跑分为&lt;font color='#F50057'&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;888888分&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/font&gt;</span><br><span class="line">            ，已经超过全国&lt;font color='#00E676'&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;99%&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/font&gt;的Android手机。</span><br><span class="line">        ]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>编译运行，结果编译时报错：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Error:(17, 5) Apostrophe not preceded by \ (in  鎭枩鎮紒鎮ㄧ殑鎵嬫満璺戝垎涓?<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">'#F50057'</span>&gt;</span><span class="tag">&lt;<span class="name">big</span>&gt;</span><span class="tag">&lt;<span class="name">big</span>&gt;</span><span class="tag">&lt;<span class="name">big</span>&gt;</span>888888鍒?<span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>报错的关键词为：</p>
<blockquote>
<p>Apostrophe not preceded by <br>撇号前面没有\</p>
</blockquote>
<p>通过上面的这个报错信息我们可以知道，这是因为<code>&#39;</code>没有进行转义，那么我根据报错信息将所有的单引号进行转义。最后的结果如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"test_string"</span>&gt;</span></span><br><span class="line">       &lt;![CDATA[</span><br><span class="line">           恭喜您！您的手机跑分为&lt;font color=\'#F50057\'&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;888888分&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/font&gt;</span><br><span class="line">           ，已经超过全国&lt;font color=\'#00E676\'&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;99%&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/font&gt;的Android手机。</span><br><span class="line">       ]]&gt;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后我们再次运行，得到的就是和我们文章开头一样的结果。<br>关于Android中HTML格式下的文字解析大概就是这样了，如果大家还有其他的方法，欢迎交流。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>最后附上一个在尝试过程中遇到的错误，本来想情景重现的，结果怎么样都无法再遇到那个错误了。如果有遇到这个错误的朋友，可以尝试下面的解决办法。<br>错误：</p>
<blockquote>
<p>Multiple annotations found at this line:  </p>
</blockquote>
<ul>
<li>error: Multiple substitutions specified in non-positional format; did you mean to add<br>the formatted=”false” attribute?  </li>
<li>error: Unexpected end tag string  </li>
</ul>
<p>导致错误的可能原因及解决方法：</p>
<ol>
<li>string.xml中的字符串中有<code>%</code>，对<code>%</code>进行转义，即改为<code>\%</code>；或者使用两个百分号表示一个，即改为<code>%%</code>。</li>
<li>string.xml中的字符串被格式化了，导致解析器解析出错，解决办法为<code>&lt;string name=&quot;test_string&quot; formatted=&quot;false&quot;&gt;</code>，将formatted设置为false即可。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Android光速打包</title>
    <url>/2016/07/28/Android%E5%85%89%E9%80%9F%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<h1 id="快速打包插件-packer-ng-plugin-使用心得"><a href="#快速打包插件-packer-ng-plugin-使用心得" class="headerlink" title="快速打包插件 packer-ng-plugin 使用心得"></a>快速打包插件 packer-ng-plugin 使用心得</h1><p>首先放出这个工具的Github地址：<a href="https://github.com/mcxiaoke/packer-ng-plugin" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/mcxiaoke/packer-ng-plugin</a> 在这个工具里面，作者已经非常详细的介绍了该如何使用这个打包工具，在此我主要记录一下我使用这个打包工具的过程。</p>
<a id="more"></a>

<h2 id="导入依赖库文件"><a href="#导入依赖库文件" class="headerlink" title="导入依赖库文件"></a>导入依赖库文件</h2><p>这个工具导入依赖库文件有两个地方</p>
<ul>
<li>在项目的根目录中的<code>build.gradle</code>添加依赖</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ......</span><br><span class="line">    dependencies&#123;</span><br><span class="line">    <span class="comment">// add packer-ng</span></span><br><span class="line">        classpath <span class="string">'com.mcxiaoke.gradle:packer-ng:1.0.7'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在APP中的<code>build.gradle</code>添加依赖</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'packer'</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'com.mcxiaoke.gradle:packer-helper:1.0.7'</span></span><br><span class="line">&#125;</span><br><span class="line">android &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">      release &#123;</span><br><span class="line">        <span class="comment">// 同时满足下面两个条件才需要此配置</span></span><br><span class="line">        <span class="comment">// 1. Gradle版本 &gt;= 2.14.1</span></span><br><span class="line">        <span class="comment">// 2. Android Gradle Plugin 版本 &gt;= 2.2.0</span></span><br><span class="line">        <span class="comment">// 作用是只使用旧版签名，禁用V2版签名模式</span></span><br><span class="line">        <span class="comment">// 兼容7.0版本的Android系统才需要,否则不需要</span></span><br><span class="line">        v2SigningEnabled <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>##这里有个非常重要的信息大家要注意一下，就是<code>packer-helper:1.0.7</code>和<code>packer-ng:1.0.7</code>这两个地方的版本号一定要保持一致##</p>
<ul>
<li>在APP的<code>build.gradle</code>中配置签名信息</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">       release &#123;</span><br><span class="line">           storeFile file(<span class="string">"D:/keystore/release.keystore"</span>)</span><br><span class="line">           storePassword <span class="string">"release"</span></span><br><span class="line">           keyAlias <span class="string">"release123"</span></span><br><span class="line">           keyPassword <span class="string">"release123"</span></span><br><span class="line">       &#125;</span><br><span class="line">       debug &#123;</span><br><span class="line">          <span class="comment">//debug 的签名信息</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在APP的<code>build.gradle</code>中添加<code>buildTypes</code></li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">       release &#123;</span><br><span class="line">          ......</span><br><span class="line">           <span class="comment">//这里是配置签名的关键信息</span></span><br><span class="line">           signingConfig signingConfigs.release</span><br><span class="line">       &#125;</span><br><span class="line">       debug &#123;</span><br><span class="line">          ......</span><br><span class="line">          <span class="comment">//这里是配置签名的关键信息</span></span><br><span class="line">           signingConfig signingConfigs.debug</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>以上的工作完成之后,我们的配置基本上就完成了,但是这个工具的作者在文档的最后说了</p>
<blockquote>
<ul>
<li>注意事项<br>不支持productFlavors中定义的条件编译变量，不支持修改AndroidManifest<br>如果你的项目有多个productFlavors，默认只会用第一个flavor生成的APK文件作为打包工具的输入参数，忽略其它flavor生成的apk，代码里用的是 theVariant.outputs[0].outputFile。如果你想指定使用某个flavor来生成渠道包，可以用 apkFlavor1Release，apkFlavor2Beta这样的名字，示例（假设flavor名字是Intel）：./gradlew -Pmarket=markets.txt clean apkIntelRelease</li>
</ul>
</blockquote>
<p>注意事项中给我们说明了两件事情:</p>
<ol>
<li>不支持<code>productFlavors</code>中定义的条件编译</li>
<li>不支持修改<code>AndroidManifest</code>文件</li>
</ol>
<p>那么这个时候就会有个问题,如果我们需要多渠道打包怎么办?</p>
<h2 id="多渠道打包"><a href="#多渠道打包" class="headerlink" title="多渠道打包"></a>多渠道打包</h2><p>首先在项目的根目录中添加一个<code>markets.txt</code> 文件,文件中每一行表示一个渠道,这个工具会自动识别空行和不符合规定的行,每一行的<code>渠道</code>和<code>注释</code>之间用<strong>#</strong>隔开,但是也可以没有注释,比如我可以在<code>markets.txt</code> 中进行如下定义:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Google#google channel</span><br><span class="line">Baidu#baidu channel</span><br><span class="line">Test</span><br></pre></td></tr></table></figure>
<p>在进行了如上的定义之后,我们就可以进行多渠道打包,多渠道打包时我个人还是比较喜欢用<code>Gradle</code>来进行打包，在项目的根目录中执行<code>Gradle</code>命令行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gradlew -Pmarket=markets.txt clean apkRelease</span><br></pre></td></tr></table></figure>
<p>但是这个时候如果我们有对友盟的配置,就不能使用友盟官方SDK文档中推荐的方法,友盟官方推荐的方法是在AndroidManifest中设置各种配置信息,但是因为这个工具的限制,我们需要在代码中进行配置.</p>
<h2 id="配置友盟的多渠道信息"><a href="#配置友盟的多渠道信息" class="headerlink" title="配置友盟的多渠道信息"></a>配置友盟的多渠道信息</h2><p>首先我们在程序的入口处,一般都是<code>ApplicationMain</code>中的<code>onCreate()</code>中进行如下的配置:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String APP_KEY = <span class="string">"YOUR_APP_KEY"</span>;</span><br><span class="line"><span class="keyword">private</span> MobclickAgent.UMAnalyticsConfig mUMAnalyticsConfig;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        setChannelID();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setChannelID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">final</span> String channelID = PackerNg.getMarket(<span class="keyword">this</span>);</span><br><span class="line">          mUMAnalyticsConfig = <span class="keyword">new</span> MobclickAgent.UMAnalyticsConfig(<span class="keyword">this</span>, APP_KEY, channelID);</span><br><span class="line">          MobclickAgent.startWithConfigure(mUMAnalyticsConfig);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>当然最后别忘记在<code>AndroidManifest.xml</code>的<code>application</code>结点中加上<code>android:name=&quot;.Application.ApplicationMain&quot;</code></p>
<p>进行了以上的所有设置之后,我们就可以享受光速打包了,根据我亲测,打50个包的速度是1分钟左右,这一分钟包括检查插件和编译信息等等.其实开始打第0个包到第49个包大概是10多秒钟吧。</p>
]]></content>
  </entry>
  <entry>
    <title>Android开发之View坐标问题</title>
    <url>/2016/07/28/Android%E5%BC%80%E5%8F%91%E4%B9%8BView%E5%9D%90%E6%A0%87%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在我们日常的开发过程中，接触最多的就是View了，各种各样的View，但是我们可能对View的知识了解一些，但是还是感觉有些地方不太够，尤其是View的坐标问题。我们今天就来看看这个View的坐标到底是怎么定义的。</p>
<a id="more"></a>

<p>别的不说，先上代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"stephen.com.bugstest.MainActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:showIn</span>=<span class="string">"@layout/activity_main"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_test"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"测试文本"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"#FFFFFF"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面这个是一个简单布局文件，这个布局文件对应的<code>坐标信息</code>：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-c83b13d3a71e882f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TextView的坐标信息"></p>
<blockquote>
<p>图画的很粗糙，意思表达到了就行。<br>win10 下有什么好的画这种图的软件也可以推荐下。</p>
</blockquote>
<p>上面图中，外层红色框表示的RelativeLayout，里面的蓝色实心矩形表示的是TextView。图中的标明的坐标信息解释如下：</p>
<blockquote>
<p>getTop()表示Textview上边缘距离父布局上边的距离</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Android开发使用lambda表达式</title>
    <url>/2016/07/28/Android%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>在Java9即将发布之际，我们来讲讲如何使用Java8的新特性–&gt;lambda表达式。lambda表达式可以让我们的代码非常简洁，提高代码的可读性，那么如何在Android开发中来使用lambda表达式呢。</p>
<a id="more"></a>

<ol>
<li><p>在项目根目录的build.gradle中添加classpath</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        mavenCentral() <span class="comment">//添加</span></span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">       	……</span><br><span class="line">        classpath <span class="string">'me.tatarka:gradle-retrolambda:3.2.5'</span>  <span class="comment">//添加</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目module的build.gradle中添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'me.tatarka.retrolambda'</span><span class="comment">//引用lambda插件</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目module的build.gradle中添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">         ...</span><br><span class="line">         <span class="comment">//设置java版本</span></span><br><span class="line">        compileOptions &#123;</span><br><span class="line">            sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">            targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>以上的内容添加完毕之后，即可在Android中使用lambda表达式，这时候我们可以回到Android Studio中看看我们使用匿名内部类的一些情况，比如注册View的点击事件、RxJava的一些事件，可以发现IDE会提示我们可以使用lambda来代替。</p>
]]></content>
  </entry>
  <entry>
    <title>Android开发常用开源库整理（不定期更新）</title>
    <url>/2016/07/28/Android%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E5%BA%93%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    <content><![CDATA[<p>在此整理一下Android开发中常用的开源库，主要是为了在新建一个项目的时候能够快速的搭建好我们需要的环境，同时也能够方便的获取各个开源库的最新版本。</p>
<a id="more"></a>

<h2 id="网络操作类："><a href="#网络操作类：" class="headerlink" title="网络操作类："></a>网络操作类：</h2><ol>
<li>Retrofit <blockquote>
<p><a href="https://github.com/square/retrofit" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/square/retrofit</a></p>
</blockquote>
</li>
<li>OkHttp<blockquote>
<p><a href="https://github.com/square/okhttp" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/square/okhttp</a></p>
</blockquote>
</li>
<li>Gson<blockquote>
<p><a href="https://github.com/google/gson" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/google/gson</a></p>
</blockquote>
</li>
</ol>
<h2 id="Rx类："><a href="#Rx类：" class="headerlink" title="Rx类："></a>Rx类：</h2><ol>
<li>RxJava<blockquote>
<p><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/ReactiveX/RxJava</a></p>
</blockquote>
</li>
<li>RxAndroid<blockquote>
<p><a href="https://github.com/ReactiveX/Rxandroid" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/ReactiveX/Rxandroid</a></p>
</blockquote>
</li>
</ol>
<h2 id="事件通知类："><a href="#事件通知类：" class="headerlink" title="事件通知类："></a>事件通知类：</h2><ol>
<li>EventBus<blockquote>
<p><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/greenrobot/EventBus</a></p>
</blockquote>
</li>
</ol>
<h2 id="Android原生控件类："><a href="#Android原生控件类：" class="headerlink" title="Android原生控件类："></a>Android原生控件类：</h2><ol>
<li>RecyclerView<blockquote>
<p>compile ‘com.android.support:recyclerview-v7:24.2.0’</p>
</blockquote>
</li>
<li>CardView<blockquote>
<p>compile ‘com.android.support:cardview-v7:24.2.0’</p>
</blockquote>
</li>
<li>SupportLiabrary<blockquote>
<p>compile ‘com.android.support:support-v4:24.2.0’</p>
</blockquote>
</li>
</ol>
<h2 id="图片加载类："><a href="#图片加载类：" class="headerlink" title="图片加载类："></a>图片加载类：</h2><ol>
<li>Glide<blockquote>
<ul>
<li><a href="https://github.com/bumptech/glide" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/bumptech/glide</a></li>
<li>Glide transform： <a href="https://github.com/wasabeef/glide-transformations" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/wasabeef/glide-transformations</a></li>
<li>Glide Pattele：<a href="https://github.com/florent37/GlidePalette" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/florent37/GlidePalette</a></li>
</ul>
</blockquote>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Android游戏手柄开发记录（一）</title>
    <url>/2016/07/28/Android%E6%B8%B8%E6%88%8F%E6%89%8B%E6%9F%84%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近一直在进行Android游戏手柄的开发，在这里简单记录一下自己在这个过程中遇到的问题，同时也能够为自己以后的开发提供一些帮助。</p>
<a id="more"></a>

<h1 id="Android手柄事件"><a href="#Android手柄事件" class="headerlink" title="Android手柄事件"></a>Android手柄事件</h1><p>先来看下Android官方文档关于<strong>处理控制器输入动作</strong>的介绍：</p>
<blockquote>
</blockquote>
<ul>
<li>在 <code>Activity</code>中：<ul>
<li><code>dispatchGenericMotionEvent(android.view.MotionEvent)</code><ul>
<li>处理一般的运动事件，如摇动摇杆。</li>
</ul>
</li>
<li><code>dispatchKeyEvent(android.view.KeyEvent)</code><ul>
<li>处理按键事件，如按下或释放游戏键盘的按键或者D-pad的按钮。</li>
</ul>
</li>
</ul>
</li>
<li>在<code>View</code>中：<ul>
<li><code>onGenericMotionEvent(android.view.MotionEvent)</code><ul>
<li>处理一般的运动事件，如摇动摇杆。</li>
</ul>
</li>
<li><code>onKeyDown(int, android.view.KeyEvent)</code><ul>
<li>处理按下一个按键的事件，如按下游戏键盘的按键或者 D-pad 按钮。</li>
</ul>
</li>
<li><code>onKeyUp(int, android.view.KeyEvent)</code><ul>
<li>处理释放一个按键的事件，如释放游戏键盘的按键或者 D-pad 按钮。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>从上面的介绍中，我们可以知道处理输入动作就两个事件：</p>
<ul>
<li><code>KeyEvent</code></li>
<li><code>MotionEvent</code><br>处理输入动作的地方也就是两个：</li>
<li><code>Activity</code></li>
<li><code>View</code><br>Android官方建议开发者从与用户交互的<code>View</code>对象中去捕获输入事件。</li>
</ul>
<p>在实际的开发过程中，大家也可以根据自己的需求，决定是从<code>Activity</code>或者<code>View</code>中去捕获输入事件。<br>下面我们就以从<code>Activity</code>中捕获事件为例进行记录。</p>
<h1 id="DispatchKeyEvent"><a href="#DispatchKeyEvent" class="headerlink" title="DispatchKeyEvent"></a>DispatchKeyEvent</h1><p><code>DispatchKeyEvent</code>可以处理几乎所有的输入动作，包括普通的游戏按键以及方向按键（D-pad）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DispatchKeyEvent示例</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchKeyEvent</span><span class="params">(KeyEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.getAction() == KeyEvent.ACTION_DOWN) &#123;<span class="comment">//按键按下</span></span><br><span class="line">        <span class="keyword">switch</span> (event.getKeyCode()) &#123;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.KEYCODE_BUTTON_A:</span><br><span class="line">                <span class="comment">//do something</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//按键释放</span></span><br><span class="line">        <span class="keyword">switch</span> (event.getKeyCode()) &#123;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.KEYCODE_BUTTON_A:</span><br><span class="line">                <span class="comment">//do something</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码就是用来处理<code>KeyEvent</code>事件，但是在实际的开发过程中，我们可能遇到输入设备，如游戏手柄，具有摇杆和扳机键（Trigger）。上面的函数是无法去处理摇杆和扳机键事件的，因为摇杆和扳机键事件都有一个坐标（AXIS），那么摇杆和扳机键该如何处理呢，接下来我们就介绍另外一个函数：<code>dispatchMontionEvnet</code>。<br>#DispatchMotionEvent<br><code>dispatchMontionEvnet</code>可以处理方向按键、摇杆、扳机键等具有坐标值的特殊按键。</p>
<p><code>MotionEvent</code>的优先级是要高于<code>KeyEvent</code>的，也就是说，当操作手柄的事件发生时，会先将获取到的<strong>KeyCode</strong>传递到<code>dispatchMotionEvent</code>或者<code>on</code>中进行处理，</p>
]]></content>
  </entry>
  <entry>
    <title>Android自定义流式布局的探索</title>
    <url>/2016/07/28/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80%E7%9A%84%E6%8E%A2%E7%B4%A2/</url>
    <content><![CDATA[<p>最近在学习Android中自定义View的一些知识，为了检验成果，先来自定义一个流式布局。</p>
<h3 id="什么是流式布局？"><a href="#什么是流式布局？" class="headerlink" title="什么是流式布局？"></a>什么是流式布局？</h3><p><img src="http://upload-images.jianshu.io/upload_images/2524102-a4edfa75da430455.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流式布局示例1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-9b3989321f3e5db6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流式布局示例2.png"></p>
<a id="more"></a>

<p>上面就是流式布局的示例，简单来说就是一些不同宽度的控件显示的时候根据自己的宽度和当前行剩余的宽度来决定是显示在当前行还是换行显示。</p>
<h3 id="如何实现流式布局"><a href="#如何实现流式布局" class="headerlink" title="如何实现流式布局"></a>如何实现流式布局</h3><p>实现流式布局毫无疑问是需要自定义布局的，虽然Android官方给我们提供了Recyclerview中的瀑布流布局，但是这种效果却并不好，因为瀑布流的布局需要给定一个spanCount，也就是瀑布的列数。但是我们的流式布局是不清楚有多少列多少行的，因为这完全取决于我们的控件的宽度和整个流式布局的宽度。<br>自定义流式布局和自定义其他的一些ViewGroup的步骤基本是一致的：</p>
<ol>
<li>先onMeasure</li>
<li>后onLayout</li>
</ol>
<p>我们先从第一步开始</p>
<p>首先直接放出onMeasure的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> widthMeasureSpec, <span class="keyword">final</span> <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//获取该ViewGroup的父布局为该ViewGroup推荐的宽高以及计算模式</span></span><br><span class="line">      <span class="keyword">int</span> sizeWidth = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">      <span class="keyword">int</span> sizeHeight = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">      <span class="keyword">int</span> modeWidth = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">      <span class="keyword">int</span> modeHeight = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">      <span class="comment">//当该ViewGroup是wrap_content的时候，记录宽高</span></span><br><span class="line">      <span class="keyword">int</span> layoutWidth = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> layoutHeight = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">//每行的宽高，宽度永远都取最大值，高度则直接相加</span></span><br><span class="line">      <span class="keyword">int</span> lineWidth = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> lineHeight = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">//遍历childView计并算childView的宽高与margin值，然后通过计算结果来确定当</span></span><br><span class="line">      <span class="comment">//我们的ViewGroup设置为wrap_content时ViewGroup的宽高</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, childCount = getChildCount(); i &lt; childCount; i++) &#123;</span><br><span class="line">          View childView = getChildAt(i);</span><br><span class="line">          <span class="comment">//通过ViewGroup的measureChild方法设置childView的宽高，执行完毕之后，</span></span><br><span class="line">          <span class="comment">//所有的childView的宽高都已经确定了。</span></span><br><span class="line">          measureChild(childView, widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">          <span class="comment">//获取上一步中ViewGroup设置的childView的宽高</span></span><br><span class="line">          <span class="keyword">int</span> childWidth = childView.getMeasuredWidth();</span><br><span class="line">          <span class="keyword">int</span> childHeight = childView.getMeasuredHeight();</span><br><span class="line"></span><br><span class="line">          <span class="comment">//获取childView的LayoutParams</span></span><br><span class="line">          <span class="comment">// 每个布局都有一种特殊的LayoutParams，</span></span><br><span class="line">          <span class="comment">//比如LinearLayout.LayoutParams,RelativeLayout.LayoutParams等等</span></span><br><span class="line">          MarginLayoutParams mlp = (MarginLayoutParams) childView.getLayoutParams();</span><br><span class="line">          <span class="comment">//计算实际上childView的宽高(childView本身的宽高加上它的Margin值)</span></span><br><span class="line">          <span class="keyword">int</span> realChildWidth = childWidth + mlp.leftMargin + mlp.rightMargin;</span><br><span class="line">          <span class="keyword">int</span> realChildHeight = childHeight + mlp.topMargin + mlp.bottomMargin;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//该行当前的宽度加上childView实际的宽度大于布局宽度，则换行</span></span><br><span class="line">          <span class="keyword">if</span> (lineWidth + realChildWidth &gt; sizeWidth) &#123;</span><br><span class="line">              <span class="comment">//执行换行操作</span></span><br><span class="line">              <span class="comment">//这里layoutWidth取lineWidth和realChildWidth的最大值是因为可能会</span></span><br><span class="line">              <span class="comment">//出现如下的情况：</span></span><br><span class="line">              <span class="comment">//上一行：= = = ==(宽度为8)</span></span><br><span class="line">              <span class="comment">//该childView：==========(宽度&gt;8)</span></span><br><span class="line">              layoutWidth = Math.max(lineWidth, realChildWidth);</span><br><span class="line">              <span class="comment">//当前计算的总高度累加一个realChildHeight即可</span></span><br><span class="line">              layoutHeight = layoutHeight + realChildHeight;</span><br><span class="line">              <span class="comment">//换行之后，新行的宽度和高度需要重新计算，此处是设置为在该行的唯一一个childView的实际宽高</span></span><br><span class="line">              lineWidth = realChildWidth;</span><br><span class="line">              lineHeight = realChildHeight;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//宽度未超出，可以直接相加宽度</span></span><br><span class="line">              lineWidth = lineWidth + realChildWidth;</span><br><span class="line">              <span class="comment">//获取最终的行高，取之前的行高和当前子View的高度</span></span><br><span class="line">              lineHeight = Math.max(lineHeight, realChildHeight);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 如果是最后一个，需要做一些处理。</span></span><br><span class="line">          <span class="keyword">if</span> (i == childCount - <span class="number">1</span>) &#123;</span><br><span class="line">              <span class="comment">//将当前布局的宽度和最后一行的宽度相比，取最大值</span></span><br><span class="line">              layoutWidth = Math.max(lineWidth, layoutWidth);</span><br><span class="line">              <span class="comment">//当前布局的行高还是简单的叠加即可</span></span><br><span class="line">              layoutHeight = layoutHeight + lineHeight;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           *  Mode 一般有三种模式：</span></span><br><span class="line"><span class="comment">           *  MeasureSpec.EXACTLY: 一般是在childView设置match_parent时或者是设置了具体的宽高时使用。</span></span><br><span class="line"><span class="comment">           *  MeasureSPec.AT_MOST: 一般是在childView设置wrap_content时使用</span></span><br><span class="line"><span class="comment">           *  MeasureSpec.UNSPECIFIC: childView想要多大都行，用的比较少，可能会在ScrollView的heightMode中见到。</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 下面就是判断childView的宽高时是如何设置的，如果是设置了具体的宽高</span></span><br><span class="line">          <span class="comment">//或者是match_parent，那就直接使用父布局给出的大小</span></span><br><span class="line">          <span class="comment">// 否则就使用我们自己测量出来的宽高</span></span><br><span class="line">          setMeasuredDimension(modeWidth == MeasureSpec.EXACTLY ? sizeWidth : layoutWidth,</span><br><span class="line">                  modeHeight == MeasureSpec.EXACTLY ? sizeHeight : layoutHeight);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码注释已经非常的清楚，在onMeasure中的步骤也非常的清晰：</p>
<ol>
<li>获取父布局对流式布局的测量宽高和测量模式。</li>
<li>遍历流式布局中的childView。<ul>
<li>测量并设置childView的宽高，执行这一步之后childView的宽高就已经确定</li>
<li>获取测量的childView的宽高和Layoutparams</li>
<li>计算实际上的childView宽高（包括margin）</li>
<li>判断childView的实际宽高+当前行的宽度是否超出流式布局的宽度<ul>
<li>若超过，则换行[注1]</li>
<li>若未超过，则宽度累加，行高取当前行高与childView高度的最大值</li>
</ul>
</li>
<li>最后一行的时候进行一些处理，获取最终的流式布局的宽和高</li>
</ul>
</li>
</ol>
<p>onMeasure基本上就是这些了，接下来就是onLayout，先放代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> changed, <span class="keyword">final</span> <span class="keyword">int</span> l, <span class="keyword">final</span> <span class="keyword">int</span> t, <span class="keyword">final</span> <span class="keyword">int</span> r, <span class="keyword">final</span> <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取该布局在onMeasure函数中测量的宽度</span></span><br><span class="line">       <span class="keyword">int</span> flowWidth = getWidth();</span><br><span class="line">       <span class="comment">//通过lineWidth和lineHeight来确定childView的位置</span></span><br><span class="line">       <span class="keyword">int</span> lineWidth = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> lineHeight = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//记录childView的left和top来确定位置</span></span><br><span class="line">       <span class="keyword">int</span> childLeft = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> childTop = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//遍历子控件，记录每个子view的位置</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, childCount = getChildCount(); i &lt; childCount; i++) &#123;</span><br><span class="line">           View childView = getChildAt(i);</span><br><span class="line">           <span class="comment">//获取到测量的宽和高</span></span><br><span class="line">           <span class="keyword">int</span> childWidth = childView.getMeasuredWidth();</span><br><span class="line">           <span class="keyword">int</span> childHeight = childView.getMeasuredHeight();</span><br><span class="line">           <span class="comment">//因为childView可能设置margin，这里要加上margin的距离</span></span><br><span class="line">           MarginLayoutParams mlp = (MarginLayoutParams) childView.getLayoutParams();</span><br><span class="line">           <span class="comment">//判断整个childView所占的空间宽度+当前行的宽度是否大于父布局也就是我们ViewGroup的宽度</span></span><br><span class="line">           <span class="comment">//若大于就进行换行处理</span></span><br><span class="line">           <span class="keyword">if</span> (lineWidth + mlp.leftMargin + childWidth + mlp.rightMargin &gt; flowWidth) &#123;</span><br><span class="line">               <span class="comment">//换行之后，left为最左边的值</span></span><br><span class="line">               childLeft = <span class="number">0</span>;</span><br><span class="line">               <span class="comment">//换行之后，top为top+当前的行高</span></span><br><span class="line">               childTop = childTop + lineHeight;</span><br><span class="line">               <span class="comment">//换行之后，当前行高为换行前的行高+childView的TopMargin+childView+BottomMargin</span></span><br><span class="line">               lineHeight = (mlp.topMargin + childHeight + mlp.bottomMargin);</span><br><span class="line">               <span class="comment">//换行之后，当前行宽度为0</span></span><br><span class="line">               lineWidth = <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//设置childView的上下左右坐标，统一处理margin</span></span><br><span class="line">           <span class="keyword">int</span> left = childLeft + mlp.leftMargin;</span><br><span class="line">           <span class="keyword">int</span> top = childTop + mlp.topMargin;</span><br><span class="line">           <span class="keyword">int</span> right = left + childWidth;</span><br><span class="line">           <span class="keyword">int</span> bottom = top + childHeight;</span><br><span class="line">           childView.layout(left, top, right, bottom);</span><br><span class="line">           <span class="comment">//记录当前行的宽度</span></span><br><span class="line">           lineWidth = lineWidth + (mlp.leftMargin + childWidth + mlp.rightMargin);</span><br><span class="line">           childLeft = lineWidth;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>onLayoutd的代码也非常的清晰：</p>
<ol>
<li>遍历childView</li>
<li>获取childView的宽高，并判断是否换行<ul>
<li>若换行，则下一个childView的Left和下一行的width重置，行高为当前childView的实际高度，childTop则累加行高。</li>
<li>若不换行，宽度累加，行高不变。</li>
</ul>
</li>
</ol>
<p>通过上面的onMeasure和onLayout之后，整个流式布局就已经基本完成，接下来我们设置布局文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--  布局文件--&gt;</span></span><br><span class="line"> <span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/content_flow"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:showIn</span>=<span class="string">"@layout/activity_flow"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:context</span>=<span class="string">"stephen.com.bugstest.FlowActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">stephen.com.bugstest.customwidgets.FlowLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/flow_layout"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Welcome"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"IT工程师"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"学习ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"恋爱ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"挣钱ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"努力ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"I thick i can"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Welcome"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"IT工程师"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"学习ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"恋爱ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"挣钱ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"努力ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"I thick i can"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Welcome"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"IT工程师"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"学习ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"恋爱ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"挣钱ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"努力ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"I thick i can"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Welcome"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"学习ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"恋爱ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"挣钱ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"努力ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"I thick i can"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Welcome"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"IT工程师"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"学习ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"恋爱ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"挣钱ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"努力ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"I thick i can"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Welcome"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"IT工程师"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"学习ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"恋爱ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"挣钱ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"努力ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"I thick i can"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Welcome"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"IT工程师"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"学习ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"恋爱ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"挣钱ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"努力ing"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/text_flag_01"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"I thick i can"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">stephen.com.bugstest.customwidgets.FlowLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最终效果：<br><img src="http://upload-images.jianshu.io/upload_images/2524102-ba18794a67eec0ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最终效果图.png"></p>
<p>从上面的图中我们可以看到，每一行都是根据宽度自动换行，最终形成了流式布局。</p>
<p>在上面的说明中，我标注了一个注[1]，这里具体来说一下：<br>在实际的编码和测试过程中，我发现如果我们的childView宽度大于本身整个流式布局的宽度，那么整个流式布局就被破坏了。直接上图看看吧：<br><img src="http://upload-images.jianshu.io/upload_images/2524102-da6b6c9312731b6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情况1.png"></p>
<p>这种情况是只有这个childView的这一行的行距出现了问题。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-33b1287cfc34db14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情况2.png"></p>
<p>这种情况看起来好像是正常的，但是实际上是从这个childView之后的所有行高都变大了。</p>
<p>上面这两种情况的出现对应着代码中有一些微小的改动，在这里就不放出来了。针对上面的这两种情况，都尝试过解决办法，但是都失败了，可能是因为我们在onLayout中使用了行高来确定上下两行的间隔距离，而这个childView的行高要特殊一些，所以就导致出现这个问题。但是这个小问题也不用太在意，因为我们的流式布局基本上是不会碰到一个childView的宽度比整个布局的宽度还宽的。</p>
]]></content>
  </entry>
  <entry>
    <title>DrawerLayout：Write-Once，Run-EveryWhere</title>
    <url>/2016/07/28/DrawerLayout%EF%BC%9AWrite-Once%EF%BC%8CRun-EveryWhere/</url>
    <content><![CDATA[<p>自从Material Design出来之后，各种各样的控件也是让人眼花缭乱，但是用的时候还是需要克制，比如Google在官方的Material Design Guideline中就建议内容相同的列表不要使用Cardview，而是推荐使用普通的布局，中间加上divider即可，避免给人一种分裂感。</p>
<p>在使用DrawerLayout的时候，可能我们多个Activity中都需要用到，我们是不是每个Activity都需要新建为Navigation Drawer Activity呢，答案是：NO。所以这次我们就来看看，如何“克制地”使用DrawerLayout</p>
<blockquote>
<p>Write Once，Run Everywhere</p>
</blockquote>
<a id="more"></a>

<h2 id="新建Navigation-Drawer-Activity"><a href="#新建Navigation-Drawer-Activity" class="headerlink" title="新建Navigation Drawer Activity"></a>新建Navigation Drawer Activity</h2><p>首先我们新建一个Navigation Drawer Activity作为我们BaseActivity，布局文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:openDrawer</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;include</span></span><br><span class="line"><span class="comment">        layout="@layout/app_bar_base_drawer"</span></span><br><span class="line"><span class="comment">        android:layout_width="match_parent"</span></span><br><span class="line"><span class="comment">        android:layout_height="match_parent"/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/frame_container"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/nav_header_base_drawer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:menu</span>=<span class="string">"@menu/activity_base_drawer_drawer"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们首先将Android studio自己生成的<code>&lt;include&gt;&lt;/include&gt;</code>注释掉，换成代码中的FrameLayout，接下来修改自动生成的BaseActivity代码：</p>
<p>重写setContentView函数,重写后的函数如下：</p>
 <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setContentView</span><span class="params">(layoutResID: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">//首先获取带有DrawerLayout的布局</span></span><br><span class="line">    <span class="keyword">val</span> drawer = layoutInflater.inflate(R.layout.activity_base_drawer, <span class="literal">null</span>) <span class="keyword">as</span> DrawerLayout</span><br><span class="line">    <span class="comment">//然后获取这个布局里面的FrameLayout，也就是我们刚才在xml中添加的FrameLayout</span></span><br><span class="line">    <span class="keyword">val</span> frameContainer = drawer.findViewById(R.id.frame_container) <span class="keyword">as</span> FrameLayout</span><br><span class="line">    <span class="comment">//然后将子类的布局添加到FrameLayout中</span></span><br><span class="line">    layoutInflater.inflate(layoutResID, frameContainer, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">//最后设置布局为DrawerLayout的布局</span></span><br><span class="line">    setContentView(drawer)</span><br><span class="line">    <span class="comment">//下面就是一些设置DrawerLayout动作和点击事件的代码</span></span><br><span class="line">    <span class="keyword">val</span> toggle = ActionBarDrawerToggle(</span><br><span class="line">            <span class="keyword">this</span>, drawer, R.string.navigation_drawer_open, R.string.navigation_drawer_close)</span><br><span class="line">    drawer.setDrawerListener(toggle)</span><br><span class="line">    toggle.syncState()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> navigationView = findViewById(R.id.nav_view) <span class="keyword">as</span> NavigationView</span><br><span class="line">    navigationView.setNavigationItemSelectedListener(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    toolbar.setNavigationOnClickListener &#123; view -&gt; drawer.openDrawer(Gravity.START) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码使用Kotlin写的，顺便提一句：</p>
<blockquote>
<p>在今天凌晨的Google I/O 2017上，Android Team已经将Kotlin做为Android开发的”first-class”了。</p>
</blockquote>
<p>上面设置完之后，我们可以随便新建一个Activity，然后继承BaseActivity即可。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawerActivity</span> : <span class="type">BaseDrawerActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.app_bar_base_drawer)</span><br><span class="line">        fab.setOnClickListener &#123; view -&gt; Snackbar.make(view, <span class="string">"可以"</span>, Snackbar.LENGTH_SHORT).show() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来看看结果：<br><img src="http://upload-images.jianshu.io/upload_images/2524102-d6e24c1d16735925.gif?imageMogr2/auto-orient/strip" alt="drawer-layout.gif"><br>可以看到我们的功能已经实现了，但是有一些小瑕疵：</p>
<blockquote>
<p>Toolbar上面没有菜单键，需要通过从屏幕左边滑才能呼出Drawer</p>
</blockquote>
<p>这个问题从我们上面的代码中也体现出来了，在BaseActivity中并没有将Drawer的操作与Toolbar联系到一起，接下来我们就来添加代码，让Toolbar和Drawer联系到一起，添加到上面重写的setContentView中相应的位置</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取Toolbar</span></span><br><span class="line"><span class="keyword">val</span> toolbar = frameContainer.findViewById(R.id.toolbar) <span class="keyword">as</span> Toolbar</span><br><span class="line">      setSupportActionBar(toolbar)</span><br><span class="line"><span class="comment">// 将Toolbar与Drawer的动作联系起来</span></span><br><span class="line"><span class="keyword">val</span> toggle = ActionBarDrawerToggle(</span><br><span class="line">              <span class="keyword">this</span>, drawer,toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close)</span><br><span class="line"><span class="comment">//最后设置toolbar的点击事件</span></span><br><span class="line">toolbar.setNavigationOnClickListener &#123; view -&gt; drawer.openDrawer(Gravity.START) &#125;</span><br></pre></td></tr></table></figure>
<p>经过上面的设置之后，再来看看运行效果：<br><img src="http://upload-images.jianshu.io/upload_images/2524102-d49733181469cf69.gif?imageMogr2/auto-orient/strip" alt="drawer-layout-new.gif"></p>
<blockquote>
<p>如果点击菜单键没有反应的话，请删除掉继承自BaseActivity的activity中的setSupportActionBar这行代码即可</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Material-Design-之TabLayout与Toolbar</title>
    <url>/2016/07/28/Material-Design-%E4%B9%8BTabLayout%E4%B8%8EToolbar/</url>
    <content><![CDATA[<p>今天在学习Material Design的过程中，遇到了一个比较坑的问题，在这里记录一下，以后如果有人遇到的话，可以做个参考吧。首先来看看我们的需求，今天我们需要实现下面这个效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-d8903fa389d460a8.gif?imageMogr2/auto-orient/strip" alt="需求.gif"></p>
<a id="more"></a>

<blockquote>
<p>图片来自blog：<a href="http://blog.csdn.net/eclipsexys/article/details/46349721" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/eclipsexys/article/details/46349721</a></p>
</blockquote>
<p>大家可以看到这个需求其实是非常简单的，就是有个Toolbar和一个TabLayout，然后在TabLayout中有个列表，根据列表的上下滑动，Toolbar也相应的隐藏和显示。我们都知道这个是Material Design中的动画效果，那么我们就直接开始动手编码来实现这个效果。首先贴出布局部分的代码吧：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_base"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/appbar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/tabs"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/viewpager"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面就是我们主布局的代码，然后我们看看ViewPager对应的布局的代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/section_label"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/listview"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_below</span>=<span class="string">"@id/section_label"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个里面的代码也很简单，就是一个ListView，主要的作用就是上下滑动，然后触发Toolbar的动画。<br>剩下的就是一些简单的Fragment和一些控件初始化之类的，就不贴代码了，然后我们直接运行。运行之后截图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-82aeab75e5c07db8.gif?imageMogr2/auto-orient/strip" alt="运行结果.gif"></p>
<p>运行结果如上图，请大家忽视这个画质的问题，视频转GIF真是心累。</p>
<blockquote>
<p>如果大家有什么好的视频转GIF的工具，可以给我推荐一下。</p>
</blockquote>
<p>有细心的朋友可能已经发现问题了，当我们将列表往上滑动时，Toolbar确实隐藏了起来，但是在最后，屏幕的左上角还留有一些没有隐藏起来。这是第一个问题，还有一个比较细节的问题是我们通过对比我们的<code>需求图片</code>和<code>运行结果</code>图片，可以发现：<br>需求图片中向上滑动时，状态栏是保持不动的，Toolbar和TabLayout向上滑动，给人一种状态栏是在Toolbar和Tablayout上方的感觉。<br>运行结果向上滑动时，状态栏也会向上滑，给人的感觉就像是被Toolbar和TabLayout挤上去的样子。</p>
<p>基于以上的两个不同之处，我们大致可以推断出Toolbar没有完全隐藏可能是因为状态栏的原因，那么我们就开始着手解决这个问题。</p>
<ul>
<li>从布局开始<br>首先我们进行了将主布局的<code>android:fitsSystemWindows=&quot;true&quot;</code>放到不同的地方，看看是否是这行代码出了问题，我分别将这行代码放到了CoordinatorLayout、AppBarLayout、Toolbar、TabLayout等多个地方，最后发现并没有解决问题。但是在这个过程中，却有一个小的变化是比较奇怪的，那就是当我<code>android:fitsSystemWindows=&quot;true&quot;</code>这行代码移出CoordinatorLayout中时，我们运行程序之后会出现如下结果：<br><img src="http://upload-images.jianshu.io/upload_images/2524102-cdda1190eb30c4a7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="将上述代码移动到AppBarLayout中的结果"></li>
</ul>
<p>从上图中我们可以看到，上面的状态栏变白了。这个发现就更加印证了我们之前的推测：这件事情肯定和状态栏有关系。既然已经知道这个，那么我们就可以从第二个方面来解决。</p>
<ul>
<li><p>从代码入手<br>我们尝试着在<strong>进行了第一步尝试的基础上</strong>在代码中将状态栏的颜色修改一下<code>getWindow().setStatusBarColor(getResources().getColor(R.color.colorPrimaryDark));</code>修改完之后，发现是可以得到和需求一样的结果。问题得到了完美的解决……吗？我们都知道上面这修改状态栏颜色的代码是在api&gt;=21才可以用的，那如果api&lt;21怎么办？可能有人会说用开源库来修改啊。这个确实是一种非常好的解决办法，但是我并不想“撞大运”式的将这个问题解决。所以我们还得继续的深入查找问题，那么这个时候就想到了，和状态栏有关的属性，除了布局文件中和代码中，还有一个地方，就是<code>style.xml</code>中。</p>
</li>
<li><p>从<code>style.xml</code>入手<br>先贴出代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowDrawsSystemBarBackgrounds"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面这个是<code>style.xml</code>(v21)的代码，从这段代码中我们就可以找到这次这个bug的罪魁祸首了。就是这一行<code>&lt;item name=&quot;android:statusBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;</code><br>就是这行代码将我们的状态栏给弄成了透明了，结果就导致我们看到的状态栏和布局文件是在同一个z轴上，也就是会被挤上去，从而导致我们的Toolbar不能完全的隐藏起来。</p>
</li>
</ul>
<p>最后，为什么这个小bug费了这么大劲才找出来，我上面这一整套代码，基本上都是在android studio 中新建一个TabActivity 自动生成的。也就说原本自动生成的代码就有这个Bug，谁能想到android studio 这个浓眉大眼的家伙也”叛变革命”了呢。</p>
]]></content>
  </entry>
  <entry>
    <title>NavigationView-子菜单问题</title>
    <url>/2016/07/28/NavigationView-%E5%AD%90%E8%8F%9C%E5%8D%95%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在Android 5.0之后，Google推出了Material Design兼容库，在Material Design的兼容库中，有个用的比较多的控件就是<code>NavigationView</code>。在我们平时使用过程中，对于<code>NavigationView</code>的一些小细节可能也并没有过多的关注，所以就导致我们在遇到特殊需求的时候无从下手，那么在这里我就简单记录一下使用<code>NavigationView</code>的一些小坑，暂时可能也并没有遇到很多的坑，如果以后遇到的话会不定时更新。</p>
<a id="more"></a>

<h2 id="NavigationView基本使用"><a href="#NavigationView基本使用" class="headerlink" title="NavigationView基本使用"></a>NavigationView基本使用</h2><p>有很多人对于<code>NavigationView</code>的基本使用还是比较了解的， 那么我这里推荐一种非常偷懒的方法，就是我们在<code>Android Studio</code>中新建<code>Activity</code>时可以直接进行如下操作：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-ed42f064db473404.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="New Navigation Activity.png"></p>
<p>在选择了<code>Navigation Drawer Activity</code>之后会出现如下界面：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-ba08509342d568c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Navigation Drawer Activity.png"></p>
<p>然后点击<code>Finish</code>就可以完成一个最基础的带有<code>NavigationView</code>的<code>Activity</code>创建，创建之后就可以在原有的基础上进行修改了，这样也是非常的方便。</p>
<h2 id="NavigationView-Menu的设置"><a href="#NavigationView-Menu的设置" class="headerlink" title="NavigationView Menu的设置"></a>NavigationView Menu的设置</h2><h3 id="Menu的第一种布局设置"><a href="#Menu的第一种布局设置" class="headerlink" title="Menu的第一种布局设置"></a>Menu的第一种布局设置</h3><p>最基本的<code>Menu</code>的设置就是每行一个项目。在<code>menu</code>中的代码是这样的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_camera"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_camera"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Import"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_gallery"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_gallery"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Gallery"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_slideshow"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_slideshow"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Slideshow"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_manage"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_manage"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Tools"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_share"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_share"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Share"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_send"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_send"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Send"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>实际效果是这样的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-d4299d3d8b622021.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="normal menu.png"></p>
<p>通过上面的图片我们可以看到，这样设置之后，每个<code>item</code>都是独立的，各占一行，每一行代表着一个操作。</p>
<h3 id="Menu的第二种布局设置"><a href="#Menu的第二种布局设置" class="headerlink" title="Menu的第二种布局设置"></a>Menu的第二种布局设置</h3><p>子菜单的设置是这样的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_camera"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_camera"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Import"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_gallery"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_gallery"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Gallery"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_slideshow"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_slideshow"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Slideshow"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_manage"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_manage"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Tools"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:title</span>=<span class="string">"Communicate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">menu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/nav_share"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_share"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:title</span>=<span class="string">"Share"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/nav_send"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_send"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:title</span>=<span class="string">"Send"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"about"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">menu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/nav_about"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_history"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:title</span>=<span class="string">"about"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>设置之后的效果是这样的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-14bcb6aaaca2a190.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="group menu.png"></p>
<p>通过这种设置分组之后，我们可以发现，每个组是一起的，是通过<code>group</code>将同一个组的<code>item</code>包裹起来，组内的<code>item</code>可能会相互影响，这取决于你设置属性<code>android:checkableBehavior</code>的值。而且在上面的图片中我们也可以发现一个小的细节，就是我们组和组之间有一条小横线隔开了，有点类似于我们在<code>ListView</code>中设置的<code>divider</code>属性。</p>
<h3 id="Menu的第三种布局设置"><a href="#Menu的第三种布局设置" class="headerlink" title="Menu的第三种布局设置"></a>Menu的第三种布局设置</h3><p>那么在我们实际的开发过程中，有时候我们需要把第一种和第二种结合起来，也就是说呈现出下图中的效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-e5c2c8f0c2f049d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="group menu special.png"></p>
<p>细心的朋友可能已经看出来第三种和第二种的区别。<br>第二种的布局结果是每个<code>group</code>下有一个<code>title</code>，然后在<code>title</code>下面才是我们的子<code>item</code><br>第三种是直接每个<code>group</code>下就是子<code>item</code>并没有第二种中出现的<code>title</code><br>很显然在某些情况下，我们的开发需求需要像第三种这样简约但是不简单的<code>Navigation Menu</code>还是先来看看我们第三种布局的<code>menu</code>文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_group_normal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_camera"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_camera"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Import"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_gallery"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_gallery"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Gallery"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_slideshow"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_slideshow"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Slideshow"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_manage"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_manage"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Tools"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_commnunicate"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Communicate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_share"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_share"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Share"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_send"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_send"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Send"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_about_group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"about"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/nav_about"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_history"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:title</span>=<span class="string">"about"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个布局文件就是用<code>group</code>包裹起每个组的<code>item</code>，有点类似第二种布局，但是<strong>最关键</strong>的地方就是要为每一个<code>group</code>设置一个<code>id</code>，设置完成之后就可以得到第三种布局的效果。</p>
]]></content>
  </entry>
  <entry>
    <title>Virtualbox与Mactype共存</title>
    <url>/2016/07/28/Virtualbox%E4%B8%8EMactype%E5%85%B1%E5%AD%98/</url>
    <content><![CDATA[<h1 id="Virtualbox与Mactype共存"><a href="#Virtualbox与Mactype共存" class="headerlink" title="Virtualbox与Mactype共存"></a>Virtualbox与Mactype共存</h1><p>最近心血来潮，准备重启吃灰好久的ubuntu虚拟机玩玩，于是开开心心准备打开机器，顺利进入，准备更新下软件，发现网速好慢，虽然主机能够高速访问“外网”，但是虚拟机并没有享受到这种福利，那么能不能让虚拟机也享受呢？这么一说，就是一段折腾史……</p>
<a id="more"></a>

<p>##　虚拟机“外网”访问<br>虚拟机访问“外网”，可以通过设置虚拟机的网络为桥接模式，然后在虚拟机中设置主机的ip和端口即可。具体设置我们后面再说，先来打开桥接模式。<br>首先我们打开virtualbox的设置-&gt;网络-&gt;网卡1-&gt;连接方式-&gt;桥接网卡。到这一步的时候，被无情的提示“未指定”。原因是下图中红色箭头标记的那个东西没有<br><img src="http://upload-images.jianshu.io/upload_images/2524102-7d2b077d6ffba4d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="未指定.png"><br>根据网上的<a href="http://www.dabu.info/the-virtual-box-bridging-error-not-specified-network-interface-to-be-bridged.html" target="_blank" rel="noopener external nofollow noreferrer">提示</a>安装桥接网卡驱动，但是安装完毕之后，依然没有显示出来。经过多方查证，发现是虚拟机版本太低，于是选择将4.3.12升级到5.1.18（最新版），升级完毕之后选择桥接网卡，一切顺利。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-c9fc08a01d6f881c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="桥接网卡.png"></p>
<p>准备开机起飞……还没飞起来就被无情打脸，虚拟机不能启动，报错信息如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-4cb56fa29e06e494.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="虚拟机报错.png"><br>这个报错信息就是我们今天的关键信息，这个报错信息一般都是出现在<code>virtualbox 5.0+</code>和<code>windows 8+</code>上面，那么具体是什么原因呢，是因为virtualbox5.0之后对于系统的要求更严格了，说白了就是系统中如果安装了一些杀毒软件、主题修改的东西，那么虚拟机基本上就是会报这个错误。但是由于我的电脑一直是裸奔状态，于是我就将目标转向了mactype，这是我装的唯一一个主题修改类软件，于是经过多方查证找到了<a href="https://www.zhihu.com/question/27159349" target="_blank" rel="noopener external nofollow noreferrer">解决办法</a><br>按照上面的步骤操作之后，然后准备再次起飞……依然没飞起来被打脸，打脸的还是那个报错信息。于是再次排查，找了半天，发现virtualbox5.0之后安装完虚拟机还要安装一个驱动，具体操作<a href="https://jingyan.baidu.com/article/4d58d541186ad89dd4e9c018.html" target="_blank" rel="noopener external nofollow noreferrer">在这里</a><br>这次安装完毕之后，再次信心满满的准备起飞……最后还是被打脸，我在想这飞机是不是有问题，准备换回4.3.12了，但是内心有个声音告诉我，一定要征服这个虚拟机，我就不信了。然后又到处找资料，找来找去还是找回到之前的杀毒软件和主题修改软件方向上，于是我仔细检查了一下我的电脑，搞了一下午，结果发现电脑右下角有一个净网大师，于是怒卸载之。<br>卸载完毕，再次小心翼翼的准备起飞，这一次飞机平稳的起飞，心中的大石头也落地了，这一下午算是值了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-81efa0e0b9c7c6b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="飞机平稳起飞咯"><br>最后说一下关于ubuntu虚拟机桥接主机高速访问“外网”的方法：<br>在宿主机windows上运行shadowsocks.exe并勾选“允许局域网连接”<br>使用桥接方式运行虚拟机（这时虚拟机与宿主处于同一个局域网）<br>进入ubuntu系统，System Settings – Network – Network proxy勾选Manual（手动）,地址全部填宿主机IP（局域网网段），设置好代理端口（可在windows下的shadowsocks查看，一般为默认1080）<br>ubuntu用浏览器访问<a href="http://www.google.com，成功。" target="_blank" rel="noopener external nofollow noreferrer">www.google.com，成功。</a></p>
]]></content>
  </entry>
  <entry>
    <title>沉浸式状态栏</title>
    <url>/2016/07/28/%E2%80%9C%E6%B2%89%E6%B5%B8%E5%BC%8F%E2%80%9D%E7%8A%B6%E6%80%81%E6%A0%8F%E6%8E%A2%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="概念解析"><a href="#概念解析" class="headerlink" title="概念解析"></a>概念解析</h1><p>在Adnroid 4.4(API level 19)中引入了“沉浸式”状态栏的概念，现在许多对这个“沉浸式”状态栏的解释。但是感觉大部分的解释好像“差一点”，要么是把“沉浸式”状态栏解释为“透明状态栏”，要么是解释为Toolbar颜色和状态栏颜色不一致（前者为colorprimary，后者为colorprimary_dark）的状态栏。但是其实Android官方对于沉浸式状态栏的解释是非常清楚的。</p>
<a id="more"></a>

<h2 id="沉浸式状态栏"><a href="#沉浸式状态栏" class="headerlink" title="沉浸式状态栏"></a>沉浸式状态栏</h2><p>这个概念的提出对于手机是虚拟按键的用户来说是非常有意义的，因为“沉浸式”的体验可以增加手机的阅读空间，将上面的状态栏（statusbar）和下面的导航栏（navigationbar）隐藏起来，从而造成“沉浸式”的体验。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524102-0ecbdedddfa6ac6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="沉浸模式状态.png"></p>
<p>图中展示了不同的“沉浸式”状态<br>在上图中：</p>
<blockquote>
<ol>
<li><strong>非沉浸模式</strong> —— 展示了应用进入沉浸模式之前的状态。也展示了设置IMMERSIVE<br>标签后用户滑动展示系统栏的状态。用户滑动后，SYSTEM_UI_FLAG_HIDE_NAVIGATION<br>和SYSTEM_UI_FLAG_FULLSCREEN<br>就会被清除，系统栏就会重新显示并保持可见。 请注意，最好的实践方式就是让所有的UI控件的变化与系统栏的显示隐藏保持同步，这样可以减少屏幕显示所处的状态，同时提供了更无缝平滑的用户体验。因此所有的UI控件跟随系统栏一同显示。一旦应用进入了沉浸模式，相应的UI控件也跟随着系统栏一同隐藏。为了确保UI的可见性与系统栏保持一致，我们需要一个监听器View.OnSystemUiVisibilityChangeListener<br>来监听系统栏的变化。这在下一节中将详细讲解。</li>
<li><strong>提示气泡</strong>——第一次进入沉浸模式时，系统将会显示一个提示气泡，提示用户如何再让系统栏显示出来。</li>
</ol>
</blockquote>
<blockquote>
<blockquote>
<p><strong>Note</strong>：如果为了测试你想强制显示提示气泡，你可以先将应用设为沉浸模式，然后按下电源键进入锁屏模式，并在5秒中之后打开屏幕。<br>3. <strong>沉浸模式</strong>—— 这张图展示了隐藏了系统栏和其他UI控件的状态。你可以设置IMMERSIVE<br>和IMMERSIVE_STICKY<br>来进入这个状态。<br>4. <strong>粘性标签</strong>——这就是你设置了IMMERSIVE_STICKY<br>标签时的UI状态，用户会向内滑动以展示系统栏。半透明的系统栏会临时的进行显示，一段时间后自动隐藏。滑动的操作并不会清空任何标签，也不会触发系统UI可见性的监听器，因为暂时显示的导航栏并不被认为是一种可见性状态的变化。<br><strong>Note</strong>：immersive类的标签只有在<br>与SYSTEM_UI_FLAG_HIDE_NAVIGATION,SYSTEM_UI_FLAG_FULLSCREEN<br>中一个或两个一起使用的时候才会生效。你可以只使用其中的一个，但是一般情况下你需要同时隐藏状态栏和导航栏以达到沉浸的效果。</p>
</blockquote>
</blockquote>
<p>上面引用了Android官方培训课程中对于“沉浸式”的讲解。</p>
<p>从上面我们可以知道“沉浸式”是像我们前面所说的，将状态栏（statusbar）和导航栏（navigationbar）给隐藏起来（气泡[3]的状态），并不是像大部分的应用那样，将我们的状态栏设置为透明，或者是将状态栏颜色加深。<br>气泡[4]的状态是我们在“沉浸式”过程中点击屏幕之后产生的效果，即当我们阅读完毕时，点击屏幕，让屏幕获取焦点， 显示出状态栏和导航栏，然后进行其他的操作。<br>使用colorPrimary和colorPrimaryDark只是为了设置状态栏颜色，而且在Android 5.0之后，Material Design中引入了Toolbar，这也可以将Toolbar颜色和状态颜色区分开。</p>
<p><strong>最后希望各位通过篇文章了解什么是“沉浸式”状态栏，或者了解什么是“沉浸式”，而不是简单的将透明状态栏或是所谓的“变色龙”状态栏成为沉浸式状态栏。</strong></p>
]]></content>
      <categories>
        <category>Android</category>
        <category>Tech</category>
      </categories>
  </entry>
  <entry>
    <title>ADB 命令行无线调试</title>
    <url>/2016/07/28/ADB%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h1 id="ADB无线调试步骤（不用root）"><a href="#ADB无线调试步骤（不用root）" class="headerlink" title="ADB无线调试步骤（不用root）"></a>ADB无线调试步骤（不用root）</h1><ol start="0">
<li>将手机通过USB连接到PC</li>
<li>在命令行输入：<code>adb tcpip 5555</code>开启无线调试模式</li>
<li>PC端开启WiFi热点</li>
<li>手机连上PC的WiFi热点</li>
<li>在命令行输入：<code>adb connect [你的手机IP]</code></li>
<li>若要恢复USB有线调试模式，只需要在保持手机与PC连接状态下输入<code>adb usb</code>即可</li>
<li>若要断开连接，在命令行输入<code>adb disconnect</code>即可。</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
        <category>Tech</category>
      </categories>
  </entry>
  <entry>
    <title>Git配置彩色Log</title>
    <url>/2016/07/28/Git%20%E8%BE%93%E5%87%BA%E5%BD%A9%E8%89%B2log/</url>
    <content><![CDATA[<h1 id="Git-彩色Log配置"><a href="#Git-彩色Log配置" class="headerlink" title="Git 彩色Log配置"></a>Git 彩色Log配置</h1><p>git 在打印log的时候，默认是黑底白字，这样我们很多的关键信息都不能够非常突出的显示出来，看起来也是比较费劲。我们可以通过如下的语句让git打印出来的log出现彩色的字体，这样的话可以让我们更直接的看到我们的提交信息的关键字。</p>
<a id="more"></a>

<p><strong>关键语句如下：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --pretty=format:<span class="string">'%Cred%h - %Cgreen[%an]%Creset -%C(yellow)%d%Creset %s %C(yellow)&lt;%cr&gt;%Creset'</span> --abbrev-commit --date=relative</span><br></pre></td></tr></table></figure>
<p>大家可以看到这个关键语句比较长，我们不可能每次想要打印log的时候，都输入这么长的语句。 这样并不符合我们”能懒就懒”的原则。所以我们可以将这条语句配置到config配置文件里面</p>
<p><strong>关键配置语句如下：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为了更简单,将log的别名设置为lg,以后就可以直接git lg输出日志了</span></span><br><span class="line">git config --global alias.lg <span class="string">"log --graph --pretty=format:'%Cred%h - %Cgreen[%an]%Creset -%C(yellow)%d%Creset %s %C(yellow)&lt;%cr&gt;%Creset' --abbrev-commit --date=relative"</span></span><br></pre></td></tr></table></figure>
<p>执行了上面的配置语句之后，我们以后每次输出log就可以直接输入下面的语句：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git lg</span><br></pre></td></tr></table></figure>
<p>这样我们每次就只需要输入上面的一条语句，就可以看到我们的彩色log信息，关键字都已经变色，而且不同的信息用-分隔开，一目了然，在也不用面对黑底白字的命令行窗口了。<br>最后再给大家提供另一种log的格式，大家根据自己的喜好自行选择：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global alias.his <span class="string">"log --graph --decorate --oneline --pretty=format:'%Creset %s %C(magenta)in %Cred%h %C(magenta)commited by %Cgreen%cn %C(magenta)on %C(yellow) %cd %C(magenta)from %Creset %C(yellow)%d' --abbrev-commit --date=format:'%Y-%m-%d %H:%M:%S'"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global alias.hist <span class="string">"log --graph --decorate --oneline --pretty=format:'%Cred%h - %C(bold white) %s %Creset %C(yellow)%d  %C(cyan) &lt;%cd&gt; %Creset %Cgreen(%cn)' --abbrev-commit --date=format:'%Y-%m-%d %H:%M:%S'"</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
        <category>Tech</category>
      </categories>
  </entry>
</search>
