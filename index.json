[{"content":"为了防止每次配置环境都要去搜索，每次配置完成之后都要重新做一些个性化设置，记录一下环境配置，一次搞定。后续会将这些配置写成一个macOS/Linux的脚本，一键配置，Windows下还是得自己手动配置。\n配置Java 下载JAVA_8、JAVA_11\n配置环境\nJAVA_HOME: C:\\Java\\jdk11\nPath: %JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\nCLASSPATH: .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;\n配置Android 下载Toolbox 配置环境 ANDROID_HOME: C:\\AndroidSDK Path: %ANDROID_HOME%\\tools;%ANDROID_HOME%\\platform-tools; 配置Flutter 下载Flutter 配置环境 FLUTTER_HOME: C:\\androidsdk\\flutter\\bin Path: %FLUTTER_HOME% 配置Node 下载nvm-windows-upgrader 安装Node nvm install lts 配置环境 NODE_HOME: C:\\Users\\xxx\\AppData\\Roaming\\nvm NVM_SYMLINK: C:\\Program Files\\nodejs Path: %NVM_HOME%;%NVM_SYMLINK% 配置python 下载python 配置环境 PYTHON_HOME: C:\\Users\\xxx\\AppData\\Local\\Programs\\Python\\Python310\\ Path: %PYTHON_HOME%;%PYTHON_HOME%\\Scripts\\ ","permalink":"https://example.org/posts/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","summary":"为了防止每次配置环境都要去搜索，每次配置完成之后都要重新做一些个性化设置，记录一下环境配置，一次搞定。后续会将这些配置写成一个macOS/Linux的脚本，一键配置，Windows下还是得自己手动配置。\n配置Java 下载JAVA_8、JAVA_11\n配置环境\nJAVA_HOME: C:\\Java\\jdk11\nPath: %JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\nCLASSPATH: .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;\n配置Android 下载Toolbox 配置环境 ANDROID_HOME: C:\\AndroidSDK Path: %ANDROID_HOME%\\tools;%ANDROID_HOME%\\platform-tools; 配置Flutter 下载Flutter 配置环境 FLUTTER_HOME: C:\\androidsdk\\flutter\\bin Path: %FLUTTER_HOME% 配置Node 下载nvm-windows-upgrader 安装Node nvm install lts 配置环境 NODE_HOME: C:\\Users\\xxx\\AppData\\Roaming\\nvm NVM_SYMLINK: C:\\Program Files\\nodejs Path: %NVM_HOME%;%NVM_SYMLINK% 配置python 下载python 配置环境 PYTHON_HOME: C:\\Users\\xxx\\AppData\\Local\\Programs\\Python\\Python310\\ Path: %PYTHON_HOME%;%PYTHON_HOME%\\Scripts\\ ","title":"开发环境配置"},{"content":"在Android开发过程中，经常需要管理Gradle的依赖，但是传统的Gradle管理方式有几个不好的地方\n对于多个module支持不太好，无法共用 build.gradle文件中无法使用自动补全 如果某个库在多module中引用，需要改动多个地方 …… 虽然Google官方推荐使用ext的形式统一管理，但是对于现在大家使用Kotlin越来越多的情况下，是否能够使用Kotlin一门语言统一Android开发。\n今天就给大家介绍build.gradle.kts + buildSrc的方式来管理Gradle依赖，这种方式管理Gradle依赖，能够利用Kotlin语言的自动补全，让我们更方便地书写代码。接下来我们就一步步的将build.gradle转化为build.gradle.kts\nbuild.gradle -\u0026gt; build.gradle.kts 修改文件名为build.gradle.kts\n替换单引号为双引号\n在gradle语法中，可以用单引号'和双引号\u0026quot;来表示字符串，但是在build.gradle.kts中只能使用双引号表示字符串，所以我们要做的第一步就是将build.gradle文件中所有的单引号转换为双引号，这一步使用Android Studio自带的替换功能即可。\n在文件中按下快捷键Ctrl+R，然后输入要查找的单引号，再输入要替换的双引号，点击Replace all，替换完成。\n修改gradle语法为kts语法\nsetting.gradle\n//修改前 include \u0026#39;:app\u0026#39; rootProject.name = \u0026#34;BlogTmp\u0026#34; //修改后 include(\u0026#34;:app\u0026#34;) rootProject.name = \u0026#34;BlogTmp\u0026#34; build.gradle(project)\n//修改前 // Top-level build file where you can add configuration options common to all sub-projects/modules. buildscript { ext.kotlin_version = \u0026#34;1.3.72\u0026#34; repositories { google() jcenter() } dependencies { classpath \u0026#34;com.android.tools.build:gradle:4.0.1\u0026#34; classpath \u0026#34;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\u0026#34; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files } } allprojects { repositories { google() jcenter() } } task clean(type: Delete) { delete rootProject.buildDir } //修改后 // Top-level build file where you can add configuration options common to all sub-projects/modules. buildscript { val kotlin_version = \u0026#34;1.3.72\u0026#34; repositories { google() jcenter() } dependencies { classpath (\u0026#34;com.android.tools.build:gradle:4.0.1\u0026#34;) classpath (\u0026#34;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\u0026#34;) // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files } } allprojects { repositories { google() jcenter() } } tasks.register(\u0026#34;clean\u0026#34;, Delete::class) { delete(rootProject.buildDir) } build.gradle(app)\n修改前\napply plugin: \u0026#39;com.android.application\u0026#39; apply plugin: \u0026#39;kotlin-android\u0026#39; apply plugin: \u0026#39;kotlin-android-extensions\u0026#39; android { compileSdkVersion 29 buildToolsVersion \u0026#34;29.0.3\u0026#34; defaultConfig { applicationId \u0026#34;com.agiao.blogtmp\u0026#34; minSdkVersion 16 targetSdkVersion 29 versionCode 1 versionName \u0026#34;1.0\u0026#34; testInstrumentationRunner \u0026#34;androidx.test.runner.AndroidJUnitRunner\u0026#34; } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile(\u0026#39;proguard-android-optimize.txt\u0026#39;), \u0026#39;proguard-rules.pro\u0026#39; } } } dependencies { implementation fileTree(dir: \u0026#34;libs\u0026#34;, include: [\u0026#34;*.jar\u0026#34;]) implementation \u0026#34;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\u0026#34; implementation \u0026#39;androidx.core:core-ktx:1.3.1\u0026#39; implementation \u0026#39;androidx.appcompat:appcompat:1.1.0\u0026#39; implementation \u0026#39;androidx.constraintlayout:constraintlayout:1.1.3\u0026#39; testImplementation \u0026#39;junit:junit:4.12\u0026#39; androidTestImplementation \u0026#39;androidx.test.ext:junit:1.1.1\u0026#39; androidTestImplementation \u0026#39;androidx.test.espresso:espresso-core:3.2.0\u0026#39; } 修改后\nplugins { id(\u0026#34;com.android.application\u0026#34;) id(\u0026#34;kotlin-android\u0026#34;) id(\u0026#34;kotlin-android-extensions\u0026#34;) id(\u0026#34;kotlin-kapt\u0026#34;) } android { compileSdkVersion(Versions.compileSdkVersion) buildToolsVersion(Versions.buildToolsVersion) defaultConfig { applicationId = Versions.applicationId minSdkVersion(Versions.minSdkVersion) targetSdkVersion(Versions.targetSdkVersion) versionCode = Versions.versionCode versionName = Versions.versionName testInstrumentationRunner = \u0026#34;androidx.test.runner.AndroidJUnitRunner\u0026#34; } buildTypes { getByName(BuildType.release) { isMinifyEnabled = true proguardFiles(getDefaultProguardFile(\u0026#34;proguard-android.txt\u0026#34;), \u0026#34;proguard-rules.pro\u0026#34;) } } compileOptions { sourceCompatibility = JavaVersion.VERSION_1_8 targetCompatibility = JavaVersion.VERSION_1_8 } } dependencies { implementation(fileTree(mapOf(\u0026#34;dir\u0026#34; to \u0026#34;libs\u0026#34;, \u0026#34;include\u0026#34; to listOf(\u0026#34;*.jar\u0026#34;)))) implementation(Dependencies.kotlinStd) implementation(Dependencies.coreKTX) implementation(Dependencies.constraintLayout) implementation(Dependencies.appCompat) testImplementation(Test.junit) androidTestImplementation(Test.junitTest) androidTestImplementation(Test.espresso) } 修改的几个注意点：\nkts文件中大多都是函数调用，所以需要加上括号，字符串是作为参数传进去的 project-build.gradle中的task需要修改为新的写法 app-build.gradle中的fileTree需要修改为新的写法 在上述的修改中，使用到了Dependencies.appCompat这种调用方式，Dependencies就是我们在buildSrc中定义的统一管理文件。\n新建buildSrc模块 在Android Studio中，将目录切换为Project，然后新建buildSrc文件夹，在buildSrc文件夹下新建build.gradle.kts文件，然后填入下面的代码，点击sync now进行同步。\nplugins { `kotlin-dsl` } repositories{ jcenter() } 同步完成之后，buildSrc就变成了和app一样的一个module。然后在buildSrc文件夹上右键-新建文件夹-选择src/main/java，接下来就可以将我们的依赖写在该文件下的文件中了。\n新建统一依赖管理文件 在上述的src/main/java文件夹中新建Dependencies.kt文件（文件名可以任意取）\nobject Dependencies { const val kotlinStd = \u0026#34;org.jetbrains.kotlin:kotlin-stdlib:${Versions.kotlinVersion}\u0026#34; const val coreKTX = \u0026#34;androidx.core:core-ktx:${Versions.coreKTX}\u0026#34; const val appCompat = \u0026#34;androidx.appcompat:appcompat:${Versions.appCompact}\u0026#34; const val constraintLayout = \u0026#34;androidx.constraintlayout:constraintlayout:${Versions.constraintLayout}\u0026#34; const val roomRuntime = \u0026#34;androidx.room:room-runtime:${Versions.roomVersion}\u0026#34; const val roomCompiler = \u0026#34;androidx.room:room-compiler:${Versions.roomVersion}\u0026#34; const val roomCoroutines = \u0026#34;androidx.room:room-ktx:${Versions.roomVersion}\u0026#34; const val liveData = \u0026#34;androidx.lifecycle:lifecycle-viewmodel-ktx:${Versions.lifeCycleVersion}\u0026#34; const val viewModel = \u0026#34;androidx.lifecycle:lifecycle-livedata-ktx:${Versions.lifeCycleVersion}\u0026#34; const val lifeCycleCompiler = \u0026#34;androidx.lifecycle:lifecycle-compiler:${Versions.lifeCycleVersion}\u0026#34; const val material = \u0026#34;com.google.android.material:material:${Versions.materialVersion}\u0026#34; } object Versions { const val compileSdkVersion = 29 const val buildToolsVersion = \u0026#34;29.0.3\u0026#34; const val applicationId = \u0026#34;com.agiao.blogtmp\u0026#34; const val minSdkVersion = 16 const val targetSdkVersion = 29 const val versionCode = 1 const val versionName = \u0026#34;1.0\u0026#34; const val kotlinVersion = \u0026#34;1.3.72\u0026#34; const val coreKTX = \u0026#34;1.3.0\u0026#34; const val appCompact = \u0026#34;1.1.0\u0026#34; const val constraintLayout = \u0026#34;2.0.0-rc1\u0026#34; const val roomVersion = \u0026#34;2.2.5\u0026#34; const val lifeCycleVersion = \u0026#34;2.2.0\u0026#34; const val materialVersion = \u0026#34;1.1.0\u0026#34; const val junit = \u0026#34;4.12\u0026#34; const val junitTest = \u0026#34;1.1.1\u0026#34; const val espresso = \u0026#34;3.2.0\u0026#34; } object Test { const val testRoom = \u0026#34;androidx.room:room-testing:${Versions.roomVersion}\u0026#34; const val junit = \u0026#34;junit:junit:${Versions.junit}\u0026#34; const val junitTest = \u0026#34;androidx.test.ext:junit:${Versions.junitTest}\u0026#34; const val espresso = \u0026#34;androidx.test.espresso:espresso-core:${Versions.espresso}\u0026#34; } object BuildType { const val release = \u0026#34;release\u0026#34; const val debug = \u0026#34;debug\u0026#34; } 上述的依赖库可以根据自己的需要调整，也可以把每个object都提取为单独的文件，这部分就是根据个人喜好自己调整。\n至此，我们的build.gradle就完全改造完成了。现在就可以在build.gradle.kts中使用Kotlin的语法进行依赖导入了，同时还能使用Kotlin的自动补全功能，更方便的管理和导入依赖了。\n","permalink":"https://example.org/posts/build-gradle-kts-buildsrc/","summary":"在Android开发过程中，经常需要管理Gradle的依赖，但是传统的Gradle管理方式有几个不好的地方\n对于多个module支持不太好，无法共用 build.gradle文件中无法使用自动补全 如果某个库在多module中引用，需要改动多个地方 …… 虽然Google官方推荐使用ext的形式统一管理，但是对于现在大家使用Kotlin越来越多的情况下，是否能够使用Kotlin一门语言统一Android开发。\n今天就给大家介绍build.gradle.kts + buildSrc的方式来管理Gradle依赖，这种方式管理Gradle依赖，能够利用Kotlin语言的自动补全，让我们更方便地书写代码。接下来我们就一步步的将build.gradle转化为build.gradle.kts\nbuild.gradle -\u0026gt; build.gradle.kts 修改文件名为build.gradle.kts\n替换单引号为双引号\n在gradle语法中，可以用单引号'和双引号\u0026quot;来表示字符串，但是在build.gradle.kts中只能使用双引号表示字符串，所以我们要做的第一步就是将build.gradle文件中所有的单引号转换为双引号，这一步使用Android Studio自带的替换功能即可。\n在文件中按下快捷键Ctrl+R，然后输入要查找的单引号，再输入要替换的双引号，点击Replace all，替换完成。\n修改gradle语法为kts语法\nsetting.gradle\n//修改前 include \u0026#39;:app\u0026#39; rootProject.name = \u0026#34;BlogTmp\u0026#34; //修改后 include(\u0026#34;:app\u0026#34;) rootProject.name = \u0026#34;BlogTmp\u0026#34; build.gradle(project)\n//修改前 // Top-level build file where you can add configuration options common to all sub-projects/modules. buildscript { ext.kotlin_version = \u0026#34;1.3.72\u0026#34; repositories { google() jcenter() } dependencies { classpath \u0026#34;com.android.tools.build:gradle:4.0.1\u0026#34; classpath \u0026#34;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\u0026#34; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.","title":"build.gradle.kts + buildSrc管理Gradle依赖"},{"content":"在最近的开发中，需要用到在AlertDialog中通过WebView显示内容，但是在实际操作过程中，发现有一个小小的问题需要注意一下，在此也记录一下。 首先放出代码：\nAlertDialog.Builder builder = new Builder(this) .setView(R.layout.new_dialog_user_guide); View view = getLayoutInflater().inflate(R.layout.new_dialog_user_guide, null); WebView webView = (WebView) view.findViewById(R.id.web_user_guide); webView.loadUrl(\u0026#34;http://www.baidu.com\u0026#34;); builder.show(); 上面这段代码，看似是没问题的，但是在实际显示过程中，WebView一直都是空白页面，啥也没有。开始排查问题：\n网络问题 一开始以为是网络问题，于是将http://www.baidu.com换成本地的assets中的文件，更换后关键代码如下：\nwebView.loadUrl(\u0026#34;file:///android_asset/test.html\u0026#34;); 更换为本地文件之后，WebView中显示的依然是空白页面，啥也没有。继续排查\n文件问题 是否是这个HTML的文件有问题，如果直接加载HTML字符串，问题能否结局，继续修改关键代码如下：\nwebView.loadData(\u0026#34;\u0026lt;html\u0026gt;这是一段HTML的代码\u0026lt;/html\u0026gt;\u0026#34;,\u0026#34;text/html\u0026#34;, \u0026#34;utf-8\u0026#34;); //或者也可以这样 webView.loadDataWithBaseURL(null, \u0026#34;\u0026lt;html\u0026gt;这是一段html代码\u0026lt;/html\u0026gt;\u0026#34;, \u0026#34;text/html\u0026#34;, \u0026#34;utf-8\u0026#34;, null); 更改成直接加载HTML字符串之后，WebView还是现实空白页面，啥也没有。最后想来想去，是不是因为我们将WebView放在了AlertDialog中，所以导致我们的WebView显示有问题。于是我们将WebView单独移出来，结果发现可以显示出正确的内容。那也就是说这个问题出在AlertDialog身上了，难道WebView不能放在AlertDialog中吗。显然不是的，于是参考了官方教程之后，终于发现了问题所在。\n震惊！导致WebView显示空白的罪魁祸首竟然是…… 先直接贴出可以运行的正确代码：\nAlertDialog.Builder builder = new Builder(this); View view = getLayoutInflater().inflate(R.layout.new_dialog_user_guide, null); WebView webView = (WebView) view.findViewById(R.id.web_user_guide); webView.setWebViewClient(new WebViewClient()); webView.loadUrl(\u0026#34;http://www.baidu.com\u0026#34;); builder.setView(view); builder.setPositiveButton(R.string.confirm, null); builder.show(); 问题就出在这个setView身上，我们的\u0026quot;错误代码\u0026quot;是先setView，然后再使用webview进行load，但是正确的顺序应该是先使用webview进行load，然后再setView。 问题到此排查结束。\n","permalink":"https://example.org/posts/alertdialog%E4%B8%AD%E4%BD%BF%E7%94%A8webview%E6%98%BE%E7%A4%BA%E5%86%85%E5%AE%B9/","summary":"\u003cp\u003e在最近的开发中，需要用到在AlertDialog中通过WebView显示内容，但是在实际操作过程中，发现有一个小小的问题需要注意一下，在此也记录一下。\n首先放出代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e AlertDialog\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eBuilder\u003c/span\u003e builder \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Builder\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003esetView\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eR\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003elayout\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003enew_dialog_user_guide\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        View view \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e getLayoutInflater\u003cspan style=\"color:#f92672\"\u003e().\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003einflate\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eR\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003elayout\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003enew_dialog_user_guide\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        WebView webView \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eWebView\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e view\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003efindViewById\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eR\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eweb_user_guide\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        webView\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eloadUrl\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://www.baidu.com\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        builder\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eshow\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面这段代码，看似是没问题的，但是在实际显示过程中，WebView一直都是空白页面，啥也没有。开始排查问题：\u003c/p\u003e","title":"AlertDialog中使用WebView显示内容"},{"content":"这篇文章是针对Android 5.0及以上版本的系统进行透明的状态栏设置，Android 5.0以下的系统暂不在本篇文章的讨论范围之内。\nAndroid 5.0透明状态栏——普通界面 先贴出MainActivity布局代码：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;RelativeLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:background=\u0026#34;@color/colorPrimary\u0026#34; android:fitsSystemWindows=\u0026#34;true\u0026#34; tools:context=\u0026#34;stephen.com.material_design.NoteActivity\u0026#34;\u0026gt; \u0026lt;include layout=\u0026#34;@layout/app_bar_note\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;/\u0026gt; \u0026lt;/RelativeLayout\u0026gt; 上面的代码中，最主要的两行分别是：\n设置最外层布局背景色为Toolbar的颜色：android:background=\u0026quot;@color/colorPrimary\u0026quot; 设置Toolbar不扩展到状态栏：android:fitsSystemWindows=\u0026quot;true\u0026quot; 在布局文件中设置完毕后，还需要在onCreate()里面加上如下的代码： 设置状态栏颜色为透明：getWindow().setStatusBarColor(Color.TRANSPARENT); 设置状态栏和APP的位置关系：getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE); setSystemUiVisibility(int visibility)传入的实参类型如下：\nView.SYSTEM_UI_FLAG_VISIBLE：显示状态栏，Activity不全屏显示(恢复到有状态的正常情况)。 View.INVISIBLE：隐藏状态栏，同时Activity会伸展全屏显示。 View.SYSTEM_UI_FLAG_FULLSCREEN：Activity全屏显示，且状态栏被隐藏覆盖掉。 View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN：Activity全屏显示，但状态栏不会被隐藏覆盖，状态栏依然可见，Activity顶端布局部分会被状态遮住。 主要需要用到的参数就是以上的几个，其他的参数在实际的开发中用的相对较少，这里也就不列举出来了。 通过上面的两个地方的代码设置之后，我们的APP就可以实现透明状态栏的效果了。\n以上就是普通的界面设置透明状态栏的方法。\nAndroid 5.0透明状态栏——带DrawerLayout界面 带有DrawerLayout的界面设置透明状态栏，最终效果是和网易云音乐一样的，方法其实和上面的差不多，但是有个小的地方需要注意，在这里我还是把代码和方法都完整的讲一遍。 带有DrawerLayout的布局文件：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;android.support.v4.widget.DrawerLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34; xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34; android:id=\u0026#34;@+id/drawer_layout\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:background=\u0026#34;@color/colorPrimary\u0026#34; tools:openDrawer=\u0026#34;start\u0026#34;\u0026gt; \u0026lt;LinearLayout android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:fitsSystemWindows=\u0026#34;true\u0026#34; android:orientation=\u0026#34;vertical\u0026#34;\u0026gt; \u0026lt;include layout=\u0026#34;@layout/app_bar_main\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; \u0026lt;android.support.design.widget.NavigationView android:id=\u0026#34;@+id/nav_view\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:layout_gravity=\u0026#34;start\u0026#34; android:fitsSystemWindows=\u0026#34;true\u0026#34; app:headerLayout=\u0026#34;@layout/nav_header_main\u0026#34; app:menu=\u0026#34;@menu/activity_main_drawer\u0026#34;/\u0026gt; \u0026lt;/android.support.v4.widget.DrawerLayout\u0026gt; 在这里说一下要注意的几个点：\n这个\u0026lt;LinearLayout\u0026gt; ... \u0026lt;/LinearLayout\u0026gt;的作用，我之前没有用这个\u0026lt;LinearLayout\u0026gt;包裹Toolbar，结果怎么设置，都不能实现非常完美的透明状态栏，要么是statusbar颜色问题，要么是statusbar和NavigationView颜色不统一的问题。后来查找了很多资料，在一个小角落里面发现了，需要外层用\u0026lt;LinearLayout\u0026gt;包裹一下，这样的话就可以非常完美的显示出网易云音乐的效果了。 NavigationView里面设置的 android:fitsSystemWindows=\u0026quot;true\u0026quot;，这个也是为了让侧边栏即抽屉能够和状态栏颜色统一。 \u0026lt;include ... /\u0026gt;里面就是正常的设置Toolbar什么的了，但是要注意在Toolbar布局的最外层中也记得要添加 android:fitsSystemWindows=\u0026quot;true\u0026quot; 在布局文件中设置完毕之后，接着就是在代码中设置了，在onCreate()里面加上如下的代码：\n设置状态栏颜色为透明：getWindow().setStatusBarColor(Color.TRANSPARENT); 设置状态栏和APP的位置关系：getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE); 将以上的所有代码都设置完毕之后，最终呈现的效果如下：\n至此，我们已经在Android 5.0上实现透明状态栏。但是对于这样的透明状态栏，我个人是不推荐的。因为我们进行的Android开发，而这个透明状态栏却给人一种IOS的风格，Android开发就应该从方方面面都能够体现出Android的特性。虽然在Android 5.0之前，Android的UI风格一直都惨不忍睹，但是我们一路都坚持下来了，而在Android 5.0之后，因为Material Design的推出，Android的颜值可以说是提升了非常多。所以我们开发人员更应该开发Pure Android的程序，而不是模仿和抄袭IOS的各种风格。\n","permalink":"https://example.org/posts/android-5.0%E9%80%8F%E6%98%8E%E7%8A%B6%E6%80%81%E6%A0%8F%E8%AE%BE%E7%BD%AE/","summary":"\u003cp\u003e这篇文章是针对Android 5.0及以上版本的系统进行透明的状态栏设置，Android 5.0以下的系统暂不在本篇文章的讨论范围之内。\u003c/p\u003e\n\u003ch2 id=\"android-50透明状态栏普通界面\"\u003eAndroid 5.0透明状态栏——普通界面\u003c/h2\u003e\n\u003cp\u003e先贴出MainActivity布局代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;RelativeLayout\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003exmlns:android=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003exmlns:tools=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://schemas.android.com/tools\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:layout_width=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;match_parent\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:layout_height=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;match_parent\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:background=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;@color/colorPrimary\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:fitsSystemWindows=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etools:context=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;stephen.com.material_design.NoteActivity\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;include\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003elayout=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;@layout/app_bar_note\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eandroid:layout_width=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;match_parent\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eandroid:layout_height=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;match_parent\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/RelativeLayout\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Android 5.0透明状态栏设置"},{"content":"Android中输出HTML格式下的文字 在Android中，我们经常会用到TextView这个控件，在使用的过程中，我们用到最多的方法就是setText()，单纯的使用基本上能够满足我们日常的需求，但是有时候我们需要对文字进行一些处理，比如说加粗、斜体、下划线等等，这些也都是可以通过Android提供的原生方法完成。但是如果我们需要实现下面的效果呢：\nHTML下的文字解析(快速版) 从图片上我们可以看到，这段文字分别有两种大小，三种颜色。我们当然可以定义多个TextView来实现这样的效果，但是如果我们的文字变化较多，那么定义多个TextView也非常的麻烦。那么接下来我们就来介绍一个比较简单的方法：\nString str = \u0026#34;恭喜您！您的手机跑分为\u0026lt;font color=\u0026#39;#F50057\u0026#39;\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;888888分\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/font\u0026gt;，已经超过全国\u0026lt;font color=\u0026#39;#00E676\u0026#39;\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;99%\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/font\u0026gt;的Android手机。\u0026#34;; tv.setText(Html.fromHtml(str)); 上面的代码中，我们用到了一个方法Html.fromHtml()，这个方法是Android中专门用来解析HTML格式的一个方法，我们可以将任意的HTML格式下的代码通过此方法解析，最后得到我们需要的结果。 通过上面的方法，我们就可以实现在setText()中使用各种带HTML效果的文字了。这样应该能够实现我们开发中98%的需求了，那么还有1-2%的需求是什么呢？\nHTML下的文字解析(多语言支持) 比如说我们现在的APP需要兼容多种语言，包括中文、法语、英语、日语等等。在平时的开发过程中，我们都知道多语言的实现可以通过不同values文件夹下的string.xml文件来实现。我们这里就以中文来举例，看看我们如何在string.xml文件中定义HTML格式的文字。 首先我们来尝试将我们上面定义的str中的字符串直接放到string.xml中。\n\u0026lt;string name=\u0026#34;test_string\u0026#34;\u0026gt; 恭喜您！您的手机跑分为\u0026lt;font color=\u0026#39;#F50057\u0026#39;\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;888888分\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/font\u0026gt; ，已经超过全国\u0026lt;font color=\u0026#39;#00E676\u0026#39;\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;99%\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/font\u0026gt;的Android手机。 \u0026lt;/string\u0026gt; tv.setText(Html.fromHtml(getString(R.string.test_string))); 运行程序，结果如下：\n并没有出现我们预期的效果，HTML格式并没有被解析出来。这是什么原因呢？原因就在于我们使用的getString()方法，官方对于这个方法的解释如下：\nReturn the string value associated with a particular resource ID. It will be stripped of any styled text information. 返回与特定资源ID相关联的字符串值，它将删除任何样式的文本信息。\n那么也就是说我们的HTML格式被getString()方法给删除了，所以我们的文字才会变成普通的字符串。要解决这个问题，我们需要将我们的string.xml中的字符串使用\u0026lt;![CDATA[...your html...]]\u0026gt;包裹起来，被CDATA包裹起来的字符都会被解析器忽略，也就是说CDATA中的HTML格式将会被原封不动的保留下来，最终交给我们的Html.fromHtml()进行解析。那么我们来尝试以下，将我们string.xml中的字符串改为如下：\n\u0026lt;string name=\u0026#34;test_string\u0026#34;\u0026gt; \u0026lt;![CDATA[ 恭喜您！您的手机跑分为\u0026lt;font color=\u0026#39;#F50057\u0026#39;\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;888888分\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/font\u0026gt; ，已经超过全国\u0026lt;font color=\u0026#39;#00E676\u0026#39;\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;99%\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/font\u0026gt;的Android手机。 ]]\u0026gt; \u0026lt;/string\u0026gt; 编译运行，结果编译时报错：\nError:(17, 5) Apostrophe not preceded by \\ (in 鎭枩鎮紒鎮ㄧ殑鎵嬫満璺戝垎涓?\u0026lt;font color=\u0026#39;#F50057\u0026#39;\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;888888鍒?\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/font\u0026gt; 报错的关键词为：\nApostrophe not preceded by 撇号前面没有\\\n通过上面的这个报错信息我们可以知道，这是因为'没有进行转义，那么我根据报错信息将所有的单引号进行转义。最后的结果如下：\n\u0026lt;string name=\u0026#34;test_string\u0026#34;\u0026gt; \u0026lt;![CDATA[ 恭喜您！您的手机跑分为\u0026lt;font color=\\\u0026#39;#F50057\\\u0026#39;\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;888888分\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/font\u0026gt; ，已经超过全国\u0026lt;font color=\\\u0026#39;#00E676\\\u0026#39;\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;\u0026lt;big\u0026gt;99%\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/big\u0026gt;\u0026lt;/font\u0026gt;的Android手机。 ]]\u0026gt; \u0026lt;/string\u0026gt; 最后我们再次运行，得到的就是和我们文章开头一样的结果。 关于Android中HTML格式下的文字解析大概就是这样了，如果大家还有其他的方法，欢迎交流。\n后记 最后附上一个在尝试过程中遇到的错误，本来想情景重现的，结果怎么样都无法再遇到那个错误了。如果有遇到这个错误的朋友，可以尝试下面的解决办法。 错误：\nMultiple annotations found at this line:\nerror: Multiple substitutions specified in non-positional format; did you mean to add\nthe formatted=\u0026ldquo;false\u0026rdquo; attribute? error: Unexpected end tag string 导致错误的可能原因及解决方法：\nstring.xml中的字符串中有%，对%进行转义，即改为\\%；或者使用两个百分号表示一个，即改为%%。 string.xml中的字符串被格式化了，导致解析器解析出错，解决办法为\u0026lt;string name=\u0026quot;test_string\u0026quot; formatted=\u0026quot;false\u0026quot;\u0026gt;，将formatted设置为false即可。 ","permalink":"https://example.org/posts/android%E4%B8%AD%E8%BE%93%E5%87%BAhtml%E6%A0%BC%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%96%87%E5%AD%97/","summary":"\u003ch1 id=\"android中输出html格式下的文字\"\u003eAndroid中输出HTML格式下的文字\u003c/h1\u003e\n\u003cp\u003e在Android中，我们经常会用到TextView这个控件，在使用的过程中，我们用到最多的方法就是setText()，单纯的使用基本上能够满足我们日常的需求，但是有时候我们需要对文字进行一些处理，比如说加粗、斜体、下划线等等，这些也都是可以通过Android提供的原生方法完成。但是如果我们需要实现下面的效果呢：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"http://upload-images.jianshu.io/upload_images/2524102-92f803de79292a20.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图1\"  /\u003e\n\u003c/p\u003e","title":"Android中输出HTML格式下的文字"},{"content":"快速打包插件 packer-ng-plugin 使用心得 首先放出这个工具的Github地址：https://github.com/mcxiaoke/packer-ng-plugin 在这个工具里面，作者已经非常详细的介绍了该如何使用这个打包工具，在此我主要记录一下我使用这个打包工具的过程。\n导入依赖库文件 这个工具导入依赖库文件有两个地方\n在项目的根目录中的build.gradle添加依赖 buildscript { ...... dependencies{ // add packer-ng classpath \u0026#39;com.mcxiaoke.gradle:packer-ng:1.0.7\u0026#39; } } 在APP中的build.gradle添加依赖 apply plugin: \u0026#39;packer\u0026#39; dependencies { compile \u0026#39;com.mcxiaoke.gradle:packer-helper:1.0.7\u0026#39; } android { //... signingConfigs { release { // 同时满足下面两个条件才需要此配置 // 1. Gradle版本 \u0026gt;= 2.14.1 // 2. Android Gradle Plugin 版本 \u0026gt;= 2.2.0 // 作用是只使用旧版签名，禁用V2版签名模式 // 兼容7.0版本的Android系统才需要,否则不需要 v2SigningEnabled false } } } ##这里有个非常重要的信息大家要注意一下，就是packer-helper:1.0.7和packer-ng:1.0.7这两个地方的版本号一定要保持一致##\n在APP的build.gradle中配置签名信息 signingConfigs { release { storeFile file(\u0026#34;D:/keystore/release.keystore\u0026#34;) storePassword \u0026#34;release\u0026#34; keyAlias \u0026#34;release123\u0026#34; keyPassword \u0026#34;release123\u0026#34; } debug { //debug 的签名信息 } } 在APP的build.gradle中添加buildTypes buildTypes { release { ...... //这里是配置签名的关键信息 signingConfig signingConfigs.release } debug { ...... //这里是配置签名的关键信息 signingConfig signingConfigs.debug } } 以上的工作完成之后,我们的配置基本上就完成了,但是这个工具的作者在文档的最后说了\n注意事项 不支持productFlavors中定义的条件编译变量，不支持修改AndroidManifest 如果你的项目有多个productFlavors，默认只会用第一个flavor生成的APK文件作为打包工具的输入参数，忽略其它flavor生成的apk，代码里用的是 theVariant.outputs[0].outputFile。如果你想指定使用某个flavor来生成渠道包，可以用 apkFlavor1Release，apkFlavor2Beta这样的名字，示例（假设flavor名字是Intel）：./gradlew -Pmarket=markets.txt clean apkIntelRelease 注意事项中给我们说明了两件事情:\n不支持productFlavors中定义的条件编译 不支持修改AndroidManifest文件 那么这个时候就会有个问题,如果我们需要多渠道打包怎么办?\n多渠道打包 首先在项目的根目录中添加一个markets.txt 文件,文件中每一行表示一个渠道,这个工具会自动识别空行和不符合规定的行,每一行的渠道和注释之间用**#**隔开,但是也可以没有注释,比如我可以在markets.txt 中进行如下定义:\nGoogle#google channel Baidu#baidu channel Test 在进行了如上的定义之后,我们就可以进行多渠道打包,多渠道打包时我个人还是比较喜欢用Gradle来进行打包，在项目的根目录中执行Gradle命令行：\ngradlew -Pmarket=markets.txt clean apkRelease 但是这个时候如果我们有对友盟的配置,就不能使用友盟官方SDK文档中推荐的方法,友盟官方推荐的方法是在AndroidManifest中设置各种配置信息,但是因为这个工具的限制,我们需要在代码中进行配置.\n配置友盟的多渠道信息 首先我们在程序的入口处,一般都是ApplicationMain中的onCreate()中进行如下的配置:\nprivate static final String APP_KEY = \u0026#34;YOUR_APP_KEY\u0026#34;; private MobclickAgent.UMAnalyticsConfig mUMAnalyticsConfig; @Override public void onCreate() { super.onCreate(); setChannelID(); } private void setChannelID() { final String channelID = PackerNg.getMarket(this); mUMAnalyticsConfig = new MobclickAgent.UMAnalyticsConfig(this, APP_KEY, channelID); MobclickAgent.startWithConfigure(mUMAnalyticsConfig); } 当然最后别忘记在AndroidManifest.xml的application结点中加上android:name=\u0026quot;.Application.ApplicationMain\u0026quot;\n进行了以上的所有设置之后,我们就可以享受光速打包了,根据我亲测,打50个包的速度是1分钟左右,这一分钟包括检查插件和编译信息等等.其实开始打第0个包到第49个包大概是10多秒钟吧。\n","permalink":"https://example.org/posts/android%E5%85%89%E9%80%9F%E6%89%93%E5%8C%85/","summary":"\u003ch1 id=\"快速打包插件-packer-ng-plugin-使用心得\"\u003e快速打包插件 packer-ng-plugin 使用心得\u003c/h1\u003e\n\u003cp\u003e首先放出这个工具的Github地址：https://github.com/mcxiaoke/packer-ng-plugin 在这个工具里面，作者已经非常详细的介绍了该如何使用这个打包工具，在此我主要记录一下我使用这个打包工具的过程。\u003c/p\u003e","title":"Android光速打包"},{"content":"在我们日常的开发过程中，接触最多的就是View了，各种各样的View，但是我们可能对View的知识了解一些，但是还是感觉有些地方不太够，尤其是View的坐标问题。我们今天就来看看这个View的坐标到底是怎么定义的。\n别的不说，先上代码：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;RelativeLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34; xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; app:layout_behavior=\u0026#34;@string/appbar_scrolling_view_behavior\u0026#34; tools:context=\u0026#34;stephen.com.bugstest.MainActivity\u0026#34; tools:showIn=\u0026#34;@layout/activity_main\u0026#34;\u0026gt; \u0026lt;TextView android:id=\u0026#34;@+id/tv_test\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_centerInParent=\u0026#34;true\u0026#34; android:background=\u0026#34;@color/colorPrimary\u0026#34; android:padding=\u0026#34;10dp\u0026#34; android:text=\u0026#34;测试文本\u0026#34; android:textColor=\u0026#34;#FFFFFF\u0026#34;/\u0026gt; \u0026lt;/RelativeLayout\u0026gt; 上面这个是一个简单布局文件，这个布局文件对应的坐标信息：\n图画的很粗糙，意思表达到了就行。 win10 下有什么好的画这种图的软件也可以推荐下。\n上面图中，外层红色框表示的RelativeLayout，里面的蓝色实心矩形表示的是TextView。图中的标明的坐标信息解释如下：\ngetTop()表示Textview上边缘距离父布局上边的距离\n","permalink":"https://example.org/posts/android%E5%BC%80%E5%8F%91%E4%B9%8Bview%E5%9D%90%E6%A0%87%E9%97%AE%E9%A2%98/","summary":"\u003cp\u003e在我们日常的开发过程中，接触最多的就是View了，各种各样的View，但是我们可能对View的知识了解一些，但是还是感觉有些地方不太够，尤其是View的坐标问题。我们今天就来看看这个View的坐标到底是怎么定义的。\u003c/p\u003e","title":"Android开发之View坐标问题"},{"content":"在Java9即将发布之际，我们来讲讲如何使用Java8的新特性\u0026ndash;\u0026gt;lambda表达式。lambda表达式可以让我们的代码非常简洁，提高代码的可读性，那么如何在Android开发中来使用lambda表达式呢。\n在项目根目录的build.gradle中添加classpath\nbuildscript { repositories { jcenter() mavenCentral() //添加 } dependencies { …… classpath \u0026#39;me.tatarka:gradle-retrolambda:3.2.5\u0026#39; //添加 } } 在项目module的build.gradle中添加\napply plugin: \u0026#39;me.tatarka.retrolambda\u0026#39;//引用lambda插件 在项目module的build.gradle中添加\nandroid { ... //设置java版本 compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } } 以上的内容添加完毕之后，即可在Android中使用lambda表达式，这时候我们可以回到Android Studio中看看我们使用匿名内部类的一些情况，比如注册View的点击事件、RxJava的一些事件，可以发现IDE会提示我们可以使用lambda来代替。\n","permalink":"https://example.org/posts/android%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/","summary":"\u003cp\u003e在Java9即将发布之际，我们来讲讲如何使用Java8的新特性\u0026ndash;\u0026gt;lambda表达式。lambda表达式可以让我们的代码非常简洁，提高代码的可读性，那么如何在Android开发中来使用lambda表达式呢。\u003c/p\u003e","title":"Android开发使用lambda表达式"},{"content":"在此整理一下Android开发中常用的开源库，主要是为了在新建一个项目的时候能够快速的搭建好我们需要的环境，同时也能够方便的获取各个开源库的最新版本。\n网络操作类： Retrofit https://github.com/square/retrofit\nOkHttp https://github.com/square/okhttp\nGson https://github.com/google/gson\nRx类： RxJava https://github.com/ReactiveX/RxJava\nRxAndroid https://github.com/ReactiveX/Rxandroid\n事件通知类： EventBus https://github.com/greenrobot/EventBus\nAndroid原生控件类： RecyclerView compile \u0026lsquo;com.android.support:recyclerview-v7:24.2.0\u0026rsquo;\nCardView compile \u0026lsquo;com.android.support:cardview-v7:24.2.0\u0026rsquo;\nSupportLiabrary compile \u0026lsquo;com.android.support:support-v4:24.2.0\u0026rsquo;\n图片加载类： Glide https://github.com/bumptech/glide Glide transform： https://github.com/wasabeef/glide-transformations Glide Pattele：https://github.com/florent37/GlidePalette ","permalink":"https://example.org/posts/android%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E5%BA%93%E6%95%B4%E7%90%86%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/","summary":"\u003cp\u003e在此整理一下Android开发中常用的开源库，主要是为了在新建一个项目的时候能够快速的搭建好我们需要的环境，同时也能够方便的获取各个开源库的最新版本。\u003c/p\u003e","title":"Android开发常用开源库整理（不定期更新）"},{"content":"前言 最近一直在进行Android游戏手柄的开发，在这里简单记录一下自己在这个过程中遇到的问题，同时也能够为自己以后的开发提供一些帮助。\nAndroid手柄事件 先来看下Android官方文档关于处理控制器输入动作的介绍：\n在 Activity中： dispatchGenericMotionEvent(android.view.MotionEvent) 处理一般的运动事件，如摇动摇杆。 dispatchKeyEvent(android.view.KeyEvent) 处理按键事件，如按下或释放游戏键盘的按键或者D-pad的按钮。 在View中： onGenericMotionEvent(android.view.MotionEvent) 处理一般的运动事件，如摇动摇杆。 onKeyDown(int, android.view.KeyEvent) 处理按下一个按键的事件，如按下游戏键盘的按键或者 D-pad 按钮。 onKeyUp(int, android.view.KeyEvent) 处理释放一个按键的事件，如释放游戏键盘的按键或者 D-pad 按钮。 从上面的介绍中，我们可以知道处理输入动作就两个事件：\nKeyEvent MotionEvent 处理输入动作的地方也就是两个： Activity View Android官方建议开发者从与用户交互的View对象中去捕获输入事件。 在实际的开发过程中，大家也可以根据自己的需求，决定是从Activity或者View中去捕获输入事件。 下面我们就以从Activity中捕获事件为例进行记录。\nDispatchKeyEvent DispatchKeyEvent可以处理几乎所有的输入动作，包括普通的游戏按键以及方向按键（D-pad）。\n//DispatchKeyEvent示例 @Override public boolean dispatchKeyEvent(KeyEvent event) { if (event.getAction() == KeyEvent.ACTION_DOWN) {//按键按下 switch (event.getKeyCode()) { case KeyEvent.KEYCODE_BUTTON_A: //do something break; } } else {//按键释放 switch (event.getKeyCode()) { case KeyEvent.KEYCODE_BUTTON_A: //do something break; } } return true; } 上面的代码就是用来处理KeyEvent事件，但是在实际的开发过程中，我们可能遇到输入设备，如游戏手柄，具有摇杆和扳机键（Trigger）。上面的函数是无法去处理摇杆和扳机键事件的，因为摇杆和扳机键事件都有一个坐标（AXIS），那么摇杆和扳机键该如何处理呢，接下来我们就介绍另外一个函数：dispatchMontionEvnet。 #DispatchMotionEvent dispatchMontionEvnet可以处理方向按键、摇杆、扳机键等具有坐标值的特殊按键。\nMotionEvent的优先级是要高于KeyEvent的，也就是说，当操作手柄的事件发生时，会先将获取到的KeyCode传递到dispatchMotionEvent或者on中进行处理，\n","permalink":"https://example.org/posts/android%E6%B8%B8%E6%88%8F%E6%89%8B%E6%9F%84%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95%E4%B8%80/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e最近一直在进行Android游戏手柄的开发，在这里简单记录一下自己在这个过程中遇到的问题，同时也能够为自己以后的开发提供一些帮助。\u003c/p\u003e","title":"Android游戏手柄开发记录（一）"},{"content":"最近在学习Android中自定义View的一些知识，为了检验成果，先来自定义一个流式布局。\n什么是流式布局？ 上面就是流式布局的示例，简单来说就是一些不同宽度的控件显示的时候根据自己的宽度和当前行剩余的宽度来决定是显示在当前行还是换行显示。\n如何实现流式布局 实现流式布局毫无疑问是需要自定义布局的，虽然Android官方给我们提供了Recyclerview中的瀑布流布局，但是这种效果却并不好，因为瀑布流的布局需要给定一个spanCount，也就是瀑布的列数。但是我们的流式布局是不清楚有多少列多少行的，因为这完全取决于我们的控件的宽度和整个流式布局的宽度。 自定义流式布局和自定义其他的一些ViewGroup的步骤基本是一致的：\n先onMeasure 后onLayout 我们先从第一步开始\n首先直接放出onMeasure的代码\nprotected void onMeasure(final int widthMeasureSpec, final int heightMeasureSpec) { //获取该ViewGroup的父布局为该ViewGroup推荐的宽高以及计算模式 int sizeWidth = MeasureSpec.getSize(widthMeasureSpec); int sizeHeight = MeasureSpec.getSize(heightMeasureSpec); int modeWidth = MeasureSpec.getMode(widthMeasureSpec); int modeHeight = MeasureSpec.getMode(heightMeasureSpec); //当该ViewGroup是wrap_content的时候，记录宽高 int layoutWidth = 0; int layoutHeight = 0; //每行的宽高，宽度永远都取最大值，高度则直接相加 int lineWidth = 0; int lineHeight = 0; //遍历childView计并算childView的宽高与margin值，然后通过计算结果来确定当 //我们的ViewGroup设置为wrap_content时ViewGroup的宽高 for (int i = 0, childCount = getChildCount(); i \u0026lt; childCount; i++) { View childView = getChildAt(i); //通过ViewGroup的measureChild方法设置childView的宽高，执行完毕之后， //所有的childView的宽高都已经确定了。 measureChild(childView, widthMeasureSpec, heightMeasureSpec); //获取上一步中ViewGroup设置的childView的宽高 int childWidth = childView.getMeasuredWidth(); int childHeight = childView.getMeasuredHeight(); //获取childView的LayoutParams // 每个布局都有一种特殊的LayoutParams， //比如LinearLayout.LayoutParams,RelativeLayout.LayoutParams等等 MarginLayoutParams mlp = (MarginLayoutParams) childView.getLayoutParams(); //计算实际上childView的宽高(childView本身的宽高加上它的Margin值) int realChildWidth = childWidth + mlp.leftMargin + mlp.rightMargin; int realChildHeight = childHeight + mlp.topMargin + mlp.bottomMargin; //该行当前的宽度加上childView实际的宽度大于布局宽度，则换行 if (lineWidth + realChildWidth \u0026gt; sizeWidth) { //执行换行操作 //这里layoutWidth取lineWidth和realChildWidth的最大值是因为可能会 //出现如下的情况： //上一行：= = = ==(宽度为8) //该childView：==========(宽度\u0026gt;8) layoutWidth = Math.max(lineWidth, realChildWidth); //当前计算的总高度累加一个realChildHeight即可 layoutHeight = layoutHeight + realChildHeight; //换行之后，新行的宽度和高度需要重新计算，此处是设置为在该行的唯一一个childView的实际宽高 lineWidth = realChildWidth; lineHeight = realChildHeight; } else { //宽度未超出，可以直接相加宽度 lineWidth = lineWidth + realChildWidth; //获取最终的行高，取之前的行高和当前子View的高度 lineHeight = Math.max(lineHeight, realChildHeight); } // 如果是最后一个，需要做一些处理。 if (i == childCount - 1) { //将当前布局的宽度和最后一行的宽度相比，取最大值 layoutWidth = Math.max(lineWidth, layoutWidth); //当前布局的行高还是简单的叠加即可 layoutHeight = layoutHeight + lineHeight; } /** * Mode 一般有三种模式： * MeasureSpec.EXACTLY: 一般是在childView设置match_parent时或者是设置了具体的宽高时使用。 * MeasureSPec.AT_MOST: 一般是在childView设置wrap_content时使用 * MeasureSpec.UNSPECIFIC: childView想要多大都行，用的比较少，可能会在ScrollView的heightMode中见到。 */ // 下面就是判断childView的宽高时是如何设置的，如果是设置了具体的宽高 //或者是match_parent，那就直接使用父布局给出的大小 // 否则就使用我们自己测量出来的宽高 setMeasuredDimension(modeWidth == MeasureSpec.EXACTLY ? sizeWidth : layoutWidth, modeHeight == MeasureSpec.EXACTLY ? sizeHeight : layoutHeight); } } 上面的代码注释已经非常的清楚，在onMeasure中的步骤也非常的清晰：\n获取父布局对流式布局的测量宽高和测量模式。 遍历流式布局中的childView。 测量并设置childView的宽高，执行这一步之后childView的宽高就已经确定 获取测量的childView的宽高和Layoutparams 计算实际上的childView宽高（包括margin） 判断childView的实际宽高+当前行的宽度是否超出流式布局的宽度 若超过，则换行[注1] 若未超过，则宽度累加，行高取当前行高与childView高度的最大值 最后一行的时候进行一些处理，获取最终的流式布局的宽和高 onMeasure基本上就是这些了，接下来就是onLayout，先放代码：\nprotected void onLayout(final boolean changed, final int l, final int t, final int r, final int b) { //获取该布局在onMeasure函数中测量的宽度 int flowWidth = getWidth(); //通过lineWidth和lineHeight来确定childView的位置 int lineWidth = 0; int lineHeight = 0; //记录childView的left和top来确定位置 int childLeft = 0; int childTop = 0; //遍历子控件，记录每个子view的位置 for (int i = 0, childCount = getChildCount(); i \u0026lt; childCount; i++) { View childView = getChildAt(i); //获取到测量的宽和高 int childWidth = childView.getMeasuredWidth(); int childHeight = childView.getMeasuredHeight(); //因为childView可能设置margin，这里要加上margin的距离 MarginLayoutParams mlp = (MarginLayoutParams) childView.getLayoutParams(); //判断整个childView所占的空间宽度+当前行的宽度是否大于父布局也就是我们ViewGroup的宽度 //若大于就进行换行处理 if (lineWidth + mlp.leftMargin + childWidth + mlp.rightMargin \u0026gt; flowWidth) { //换行之后，left为最左边的值 childLeft = 0; //换行之后，top为top+当前的行高 childTop = childTop + lineHeight; //换行之后，当前行高为换行前的行高+childView的TopMargin+childView+BottomMargin lineHeight = (mlp.topMargin + childHeight + mlp.bottomMargin); //换行之后，当前行宽度为0 lineWidth = 0; } //设置childView的上下左右坐标，统一处理margin int left = childLeft + mlp.leftMargin; int top = childTop + mlp.topMargin; int right = left + childWidth; int bottom = top + childHeight; childView.layout(left, top, right, bottom); //记录当前行的宽度 lineWidth = lineWidth + (mlp.leftMargin + childWidth + mlp.rightMargin); childLeft = lineWidth; } } onLayoutd的代码也非常的清晰：\n遍历childView 获取childView的宽高，并判断是否换行 若换行，则下一个childView的Left和下一行的width重置，行高为当前childView的实际高度，childTop则累加行高。 若不换行，宽度累加，行高不变。 通过上面的onMeasure和onLayout之后，整个流式布局就已经基本完成，接下来我们设置布局文件：\n\u0026lt;!-- 布局文件--\u0026gt; \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;RelativeLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34; xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34; android:id=\u0026#34;@+id/content_flow\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; app:layout_behavior=\u0026#34;@string/appbar_scrolling_view_behavior\u0026#34; tools:showIn=\u0026#34;@layout/activity_flow\u0026#34; tools:context=\u0026#34;stephen.com.bugstest.FlowActivity\u0026#34;\u0026gt; \u0026lt;stephen.com.bugstest.customwidgets.FlowLayout android:id=\u0026#34;@+id/flow_layout\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;Welcome\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;IT工程师\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;学习ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;恋爱ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;挣钱ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;努力ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;I thick i can\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;Welcome\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;IT工程师\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;学习ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;恋爱ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;挣钱ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;努力ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;I thick i can\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;Welcome\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;IT工程师\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;学习ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;恋爱ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;挣钱ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;努力ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;I thick i can\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;Welcome\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;学习ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;恋爱ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;挣钱ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;努力ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;I thick i can\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;Welcome\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;IT工程师\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;学习ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;恋爱ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;挣钱ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;努力ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;I thick i can\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;Welcome\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;IT工程师\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;学习ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;恋爱ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;挣钱ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;努力ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;I thick i can\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;Welcome\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;IT工程师\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;学习ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;恋爱ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;挣钱ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;努力ing\u0026#34;/\u0026gt; \u0026lt;TextView style=\u0026#34;@style/text_flag_01\u0026#34; android:text=\u0026#34;I thick i can\u0026#34;/\u0026gt; \u0026lt;/stephen.com.bugstest.customwidgets.FlowLayout\u0026gt; \u0026lt;/RelativeLayout\u0026gt; 最终效果： 从上面的图中我们可以看到，每一行都是根据宽度自动换行，最终形成了流式布局。\n在上面的说明中，我标注了一个注[1]，这里具体来说一下： 在实际的编码和测试过程中，我发现如果我们的childView宽度大于本身整个流式布局的宽度，那么整个流式布局就被破坏了。直接上图看看吧： 这种情况是只有这个childView的这一行的行距出现了问题。\n这种情况看起来好像是正常的，但是实际上是从这个childView之后的所有行高都变大了。\n上面这两种情况的出现对应着代码中有一些微小的改动，在这里就不放出来了。针对上面的这两种情况，都尝试过解决办法，但是都失败了，可能是因为我们在onLayout中使用了行高来确定上下两行的间隔距离，而这个childView的行高要特殊一些，所以就导致出现这个问题。但是这个小问题也不用太在意，因为我们的流式布局基本上是不会碰到一个childView的宽度比整个布局的宽度还宽的。\n","permalink":"https://example.org/posts/android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80%E7%9A%84%E6%8E%A2%E7%B4%A2/","summary":"\u003cp\u003e最近在学习Android中自定义View的一些知识，为了检验成果，先来自定义一个流式布局。\u003c/p\u003e\n\u003ch3 id=\"什么是流式布局\"\u003e什么是流式布局？\u003c/h3\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"http://upload-images.jianshu.io/upload_images/2524102-a4edfa75da430455.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"流式布局示例1\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"http://upload-images.jianshu.io/upload_images/2524102-9b3989321f3e5db6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"流式布局示例2.png\"  /\u003e\n\u003c/p\u003e","title":"Android自定义流式布局的探索"},{"content":"自从Material Design出来之后，各种各样的控件也是让人眼花缭乱，但是用的时候还是需要克制，比如Google在官方的Material Design Guideline中就建议内容相同的列表不要使用Cardview，而是推荐使用普通的布局，中间加上divider即可，避免给人一种分裂感。\n在使用DrawerLayout的时候，可能我们多个Activity中都需要用到，我们是不是每个Activity都需要新建为Navigation Drawer Activity呢，答案是：NO。所以这次我们就来看看，如何“克制地”使用DrawerLayout\nWrite Once，Run Everywhere\n新建Navigation Drawer Activity 首先我们新建一个Navigation Drawer Activity作为我们BaseActivity，布局文件如下：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;android.support.v4.widget.DrawerLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34; xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34; android:id=\u0026#34;@+id/drawer_layout\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:fitsSystemWindows=\u0026#34;true\u0026#34; tools:openDrawer=\u0026#34;start\u0026#34;\u0026gt; \u0026lt;!--\u0026lt;include layout=\u0026#34;@layout/app_bar_base_drawer\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;/\u0026gt; --\u0026gt; \u0026lt;FrameLayout android:id=\u0026#34;@+id/frame_container\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;/\u0026gt; \u0026lt;android.support.design.widget.NavigationView android:id=\u0026#34;@+id/nav_view\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:layout_gravity=\u0026#34;start\u0026#34; android:fitsSystemWindows=\u0026#34;true\u0026#34; app:headerLayout=\u0026#34;@layout/nav_header_base_drawer\u0026#34; app:menu=\u0026#34;@menu/activity_base_drawer_drawer\u0026#34;/\u0026gt; \u0026lt;/android.support.v4.widget.DrawerLayout\u0026gt; 我们首先将Android studio自己生成的\u0026lt;include\u0026gt;\u0026lt;/include\u0026gt;注释掉，换成代码中的FrameLayout，接下来修改自动生成的BaseActivity代码：\n重写setContentView函数,重写后的函数如下：\noverride fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) } override fun setContentView(layoutResID: Int) { //首先获取带有DrawerLayout的布局 val drawer = layoutInflater.inflate(R.layout.activity_base_drawer, null) as DrawerLayout //然后获取这个布局里面的FrameLayout，也就是我们刚才在xml中添加的FrameLayout val frameContainer = drawer.findViewById(R.id.frame_container) as FrameLayout //然后将子类的布局添加到FrameLayout中 layoutInflater.inflate(layoutResID, frameContainer, true) //最后设置布局为DrawerLayout的布局 setContentView(drawer) //下面就是一些设置DrawerLayout动作和点击事件的代码 val toggle = ActionBarDrawerToggle( this, drawer, R.string.navigation_drawer_open, R.string.navigation_drawer_close) drawer.setDrawerListener(toggle) toggle.syncState() val navigationView = findViewById(R.id.nav_view) as NavigationView navigationView.setNavigationItemSelectedListener(this) toolbar.setNavigationOnClickListener { view -\u0026gt; drawer.openDrawer(Gravity.START) } } 上面的代码使用Kotlin写的，顺便提一句：\n在今天凌晨的Google I/O 2017上，Android Team已经将Kotlin做为Android开发的\u0026quot;first-class\u0026quot;了。\n上面设置完之后，我们可以随便新建一个Activity，然后继承BaseActivity即可。\nclass DrawerActivity : BaseDrawerActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.app_bar_base_drawer) fab.setOnClickListener { view -\u0026gt; Snackbar.make(view, \u0026#34;可以\u0026#34;, Snackbar.LENGTH_SHORT).show() } } } 来看看结果： 可以看到我们的功能已经实现了，但是有一些小瑕疵：\nToolbar上面没有菜单键，需要通过从屏幕左边滑才能呼出Drawer\n这个问题从我们上面的代码中也体现出来了，在BaseActivity中并没有将Drawer的操作与Toolbar联系到一起，接下来我们就来添加代码，让Toolbar和Drawer联系到一起，添加到上面重写的setContentView中相应的位置\n//获取Toolbar val toolbar = frameContainer.findViewById(R.id.toolbar) as Toolbar setSupportActionBar(toolbar) // 将Toolbar与Drawer的动作联系起来 val toggle = ActionBarDrawerToggle( this, drawer,toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close) //最后设置toolbar的点击事件 toolbar.setNavigationOnClickListener { view -\u0026gt; drawer.openDrawer(Gravity.START) } 经过上面的设置之后，再来看看运行效果： 如果点击菜单键没有反应的话，请删除掉继承自BaseActivity的activity中的setSupportActionBar这行代码即可\n","permalink":"https://example.org/posts/drawerlayoutwrite-oncerun-everywhere/","summary":"\u003cp\u003e自从Material Design出来之后，各种各样的控件也是让人眼花缭乱，但是用的时候还是需要克制，比如Google在官方的Material Design Guideline中就建议内容相同的列表不要使用Cardview，而是推荐使用普通的布局，中间加上divider即可，避免给人一种分裂感。\u003c/p\u003e\n\u003cp\u003e在使用DrawerLayout的时候，可能我们多个Activity中都需要用到，我们是不是每个Activity都需要新建为Navigation Drawer Activity呢，答案是：NO。所以这次我们就来看看，如何“克制地”使用DrawerLayout\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWrite Once，Run Everywhere\u003c/p\u003e\n\u003c/blockquote\u003e","title":"DrawerLayout：Write-Once，Run-EveryWhere"},{"content":"今天在学习Material Design的过程中，遇到了一个比较坑的问题，在这里记录一下，以后如果有人遇到的话，可以做个参考吧。首先来看看我们的需求，今天我们需要实现下面这个效果：\n图片来自blog：http://blog.csdn.net/eclipsexys/article/details/46349721\n大家可以看到这个需求其实是非常简单的，就是有个Toolbar和一个TabLayout，然后在TabLayout中有个列表，根据列表的上下滑动，Toolbar也相应的隐藏和显示。我们都知道这个是Material Design中的动画效果，那么我们就直接开始动手编码来实现这个效果。首先贴出布局部分的代码吧：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;android.support.design.widget.CoordinatorLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34; xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34; android:id=\u0026#34;@+id/activity_base\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:fitsSystemWindows=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;android.support.design.widget.AppBarLayout android:id=\u0026#34;@+id/appbar\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; app:theme=\u0026#34;@style/AppTheme.AppBarOverlay\u0026#34;\u0026gt; \u0026lt;android.support.v7.widget.Toolbar android:id=\u0026#34;@+id/toolbar\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;?attr/actionBarSize\u0026#34; app:layout_scrollFlags=\u0026#34;scroll|enterAlways\u0026#34; app:popupTheme=\u0026#34;@style/AppTheme.PopupOverlay\u0026#34;/\u0026gt; \u0026lt;android.support.design.widget.TabLayout android:id=\u0026#34;@+id/tabs\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;/android.support.design.widget.AppBarLayout\u0026gt; \u0026lt;android.support.v4.view.ViewPager android:id=\u0026#34;@+id/viewpager\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; app:layout_behavior=\u0026#34;@string/appbar_scrolling_view_behavior\u0026#34;/\u0026gt; \u0026lt;/android.support.design.widget.CoordinatorLayout\u0026gt; 上面就是我们主布局的代码，然后我们看看ViewPager对应的布局的代码：\n\u0026lt;android.support.v4.widget.NestedScrollView xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; app:layout_behavior=\u0026#34;@string/appbar_scrolling_view_behavior\u0026#34;\u0026gt; \u0026lt;RelativeLayout android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;TextView android:id=\u0026#34;@+id/section_label\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;ListView android:id=\u0026#34;@+id/listview\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:layout_below=\u0026#34;@id/section_label\u0026#34;/\u0026gt; \u0026lt;/RelativeLayout\u0026gt; \u0026lt;/android.support.v4.widget.NestedScrollView\u0026gt; 这个里面的代码也很简单，就是一个ListView，主要的作用就是上下滑动，然后触发Toolbar的动画。 剩下的就是一些简单的Fragment和一些控件初始化之类的，就不贴代码了，然后我们直接运行。运行之后截图如下：\n运行结果如上图，请大家忽视这个画质的问题，视频转GIF真是心累。\n如果大家有什么好的视频转GIF的工具，可以给我推荐一下。\n有细心的朋友可能已经发现问题了，当我们将列表往上滑动时，Toolbar确实隐藏了起来，但是在最后，屏幕的左上角还留有一些没有隐藏起来。这是第一个问题，还有一个比较细节的问题是我们通过对比我们的需求图片和运行结果图片，可以发现： 需求图片中向上滑动时，状态栏是保持不动的，Toolbar和TabLayout向上滑动，给人一种状态栏是在Toolbar和Tablayout上方的感觉。 运行结果向上滑动时，状态栏也会向上滑，给人的感觉就像是被Toolbar和TabLayout挤上去的样子。\n基于以上的两个不同之处，我们大致可以推断出Toolbar没有完全隐藏可能是因为状态栏的原因，那么我们就开始着手解决这个问题。\n从布局开始 首先我们进行了将主布局的android:fitsSystemWindows=\u0026quot;true\u0026quot;放到不同的地方，看看是否是这行代码出了问题，我分别将这行代码放到了CoordinatorLayout、AppBarLayout、Toolbar、TabLayout等多个地方，最后发现并没有解决问题。但是在这个过程中，却有一个小的变化是比较奇怪的，那就是当我android:fitsSystemWindows=\u0026quot;true\u0026quot;这行代码移出CoordinatorLayout中时，我们运行程序之后会出现如下结果： 从上图中我们可以看到，上面的状态栏变白了。这个发现就更加印证了我们之前的推测：这件事情肯定和状态栏有关系。既然已经知道这个，那么我们就可以从第二个方面来解决。\n从代码入手 我们尝试着在进行了第一步尝试的基础上在代码中将状态栏的颜色修改一下getWindow().setStatusBarColor(getResources().getColor(R.color.colorPrimaryDark));修改完之后，发现是可以得到和需求一样的结果。问题得到了完美的解决\u0026hellip;\u0026hellip;吗？我们都知道上面这修改状态栏颜色的代码是在api\u0026gt;=21才可以用的，那如果api\u0026lt;21怎么办？可能有人会说用开源库来修改啊。这个确实是一种非常好的解决办法，但是我并不想“撞大运”式的将这个问题解决。所以我们还得继续的深入查找问题，那么这个时候就想到了，和状态栏有关的属性，除了布局文件中和代码中，还有一个地方，就是style.xml中。\n从style.xml入手 先贴出代码：\n\u0026lt;resources\u0026gt; \u0026lt;style name=\u0026#34;AppTheme.NoActionBar\u0026#34;\u0026gt; \u0026lt;item name=\u0026#34;windowActionBar\u0026#34;\u0026gt;false\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026#34;windowNoTitle\u0026#34;\u0026gt;true\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026#34;android:windowDrawsSystemBarBackgrounds\u0026#34;\u0026gt;true\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026#34;android:statusBarColor\u0026#34;\u0026gt;@android:color/transparent\u0026lt;/item\u0026gt; \u0026lt;/style\u0026gt; \u0026lt;/resources\u0026gt; 上面这个是style.xml(v21)的代码，从这段代码中我们就可以找到这次这个bug的罪魁祸首了。就是这一行\u0026lt;item name=\u0026quot;android:statusBarColor\u0026quot;\u0026gt;@android:color/transparent\u0026lt;/item\u0026gt; 就是这行代码将我们的状态栏给弄成了透明了，结果就导致我们看到的状态栏和布局文件是在同一个z轴上，也就是会被挤上去，从而导致我们的Toolbar不能完全的隐藏起来。\n最后，为什么这个小bug费了这么大劲才找出来，我上面这一整套代码，基本上都是在android studio 中新建一个TabActivity 自动生成的。也就说原本自动生成的代码就有这个Bug，谁能想到android studio 这个浓眉大眼的家伙也\u0026quot;叛变革命\u0026quot;了呢。\n","permalink":"https://example.org/posts/material-design-%E4%B9%8Btablayout%E4%B8%8Etoolbar/","summary":"\u003cp\u003e今天在学习Material Design的过程中，遇到了一个比较坑的问题，在这里记录一下，以后如果有人遇到的话，可以做个参考吧。首先来看看我们的需求，今天我们需要实现下面这个效果：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"http://upload-images.jianshu.io/upload_images/2524102-d8903fa389d460a8.gif?imageMogr2/auto-orient/strip\" alt=\"需求.gif\"  /\u003e\n\u003c/p\u003e","title":"Material-Design-之TabLayout与Toolbar"},{"content":"在Android 5.0之后，Google推出了Material Design兼容库，在Material Design的兼容库中，有个用的比较多的控件就是NavigationView。在我们平时使用过程中，对于NavigationView的一些小细节可能也并没有过多的关注，所以就导致我们在遇到特殊需求的时候无从下手，那么在这里我就简单记录一下使用NavigationView的一些小坑，暂时可能也并没有遇到很多的坑，如果以后遇到的话会不定时更新。\nNavigationView基本使用 有很多人对于NavigationView的基本使用还是比较了解的， 那么我这里推荐一种非常偷懒的方法，就是我们在Android Studio中新建Activity时可以直接进行如下操作：\n在选择了Navigation Drawer Activity之后会出现如下界面：\n然后点击Finish就可以完成一个最基础的带有NavigationView的Activity创建，创建之后就可以在原有的基础上进行修改了，这样也是非常的方便。\nNavigationView Menu的设置 Menu的第一种布局设置 最基本的Menu的设置就是每行一个项目。在menu中的代码是这样的：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;menu xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_camera\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_camera\u0026#34; android:title=\u0026#34;Import\u0026#34;/\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_gallery\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_gallery\u0026#34; android:title=\u0026#34;Gallery\u0026#34;/\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_slideshow\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_slideshow\u0026#34; android:title=\u0026#34;Slideshow\u0026#34;/\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_manage\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_manage\u0026#34; android:title=\u0026#34;Tools\u0026#34;/\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_share\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_share\u0026#34; android:title=\u0026#34;Share\u0026#34;/\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_send\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_send\u0026#34; android:title=\u0026#34;Send\u0026#34;/\u0026gt; \u0026lt;/menu\u0026gt; 实际效果是这样的：\n通过上面的图片我们可以看到，这样设置之后，每个item都是独立的，各占一行，每一行代表着一个操作。\nMenu的第二种布局设置 子菜单的设置是这样的：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;menu xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; \u0026lt;group android:checkableBehavior=\u0026#34;single\u0026#34;\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_camera\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_camera\u0026#34; android:title=\u0026#34;Import\u0026#34;/\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_gallery\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_gallery\u0026#34; android:title=\u0026#34;Gallery\u0026#34;/\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_slideshow\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_slideshow\u0026#34; android:title=\u0026#34;Slideshow\u0026#34;/\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_manage\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_manage\u0026#34; android:title=\u0026#34;Tools\u0026#34;/\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;item android:title=\u0026#34;Communicate\u0026#34;\u0026gt; \u0026lt;menu\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_share\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_share\u0026#34; android:title=\u0026#34;Share\u0026#34;/\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_send\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_send\u0026#34; android:title=\u0026#34;Send\u0026#34;/\u0026gt; \u0026lt;/menu\u0026gt; \u0026lt;/item\u0026gt; \u0026lt;item android:title=\u0026#34;about\u0026#34;\u0026gt; \u0026lt;menu\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_about\u0026#34; android:icon=\u0026#34;@drawable/ic_history\u0026#34; android:title=\u0026#34;about\u0026#34;/\u0026gt; \u0026lt;/menu\u0026gt; \u0026lt;/item\u0026gt; \u0026lt;/menu\u0026gt; 设置之后的效果是这样的：\n通过这种设置分组之后，我们可以发现，每个组是一起的，是通过group将同一个组的item包裹起来，组内的item可能会相互影响，这取决于你设置属性android:checkableBehavior的值。而且在上面的图片中我们也可以发现一个小的细节，就是我们组和组之间有一条小横线隔开了，有点类似于我们在ListView中设置的divider属性。\nMenu的第三种布局设置 那么在我们实际的开发过程中，有时候我们需要把第一种和第二种结合起来，也就是说呈现出下图中的效果：\n细心的朋友可能已经看出来第三种和第二种的区别。 第二种的布局结果是每个group下有一个title，然后在title下面才是我们的子item 第三种是直接每个group下就是子item并没有第二种中出现的title 很显然在某些情况下，我们的开发需求需要像第三种这样简约但是不简单的Navigation Menu还是先来看看我们第三种布局的menu文件：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;menu xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; \u0026lt;group android:id=\u0026#34;@+id/nav_group_normal\u0026#34; android:checkableBehavior=\u0026#34;single\u0026#34;\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_camera\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_camera\u0026#34; android:title=\u0026#34;Import\u0026#34;/\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_gallery\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_gallery\u0026#34; android:title=\u0026#34;Gallery\u0026#34;/\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_slideshow\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_slideshow\u0026#34; android:title=\u0026#34;Slideshow\u0026#34;/\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_manage\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_manage\u0026#34; android:title=\u0026#34;Tools\u0026#34;/\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;group android:id=\u0026#34;@+id/nav_commnunicate\u0026#34; android:title=\u0026#34;Communicate\u0026#34;\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_share\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_share\u0026#34; android:title=\u0026#34;Share\u0026#34;/\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_send\u0026#34; android:icon=\u0026#34;@drawable/ic_menu_send\u0026#34; android:title=\u0026#34;Send\u0026#34;/\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;group android:id=\u0026#34;@+id/nav_about_group\u0026#34;\u0026gt; \u0026lt;item android:title=\u0026#34;about\u0026#34;\u0026gt; \u0026lt;item android:id=\u0026#34;@+id/nav_about\u0026#34; android:icon=\u0026#34;@drawable/ic_history\u0026#34; android:title=\u0026#34;about\u0026#34;/\u0026gt; \u0026lt;/item\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/menu\u0026gt; 这个布局文件就是用group包裹起每个组的item，有点类似第二种布局，但是最关键的地方就是要为每一个group设置一个id，设置完成之后就可以得到第三种布局的效果。\n","permalink":"https://example.org/posts/navigationview-%E5%AD%90%E8%8F%9C%E5%8D%95%E9%97%AE%E9%A2%98/","summary":"\u003cp\u003e在Android 5.0之后，Google推出了Material Design兼容库，在Material Design的兼容库中，有个用的比较多的控件就是\u003ccode\u003eNavigationView\u003c/code\u003e。在我们平时使用过程中，对于\u003ccode\u003eNavigationView\u003c/code\u003e的一些小细节可能也并没有过多的关注，所以就导致我们在遇到特殊需求的时候无从下手，那么在这里我就简单记录一下使用\u003ccode\u003eNavigationView\u003c/code\u003e的一些小坑，暂时可能也并没有遇到很多的坑，如果以后遇到的话会不定时更新。\u003c/p\u003e","title":"NavigationView-子菜单问题"},{"content":"Virtualbox与Mactype共存 最近心血来潮，准备重启吃灰好久的ubuntu虚拟机玩玩，于是开开心心准备打开机器，顺利进入，准备更新下软件，发现网速好慢，虽然主机能够高速访问“外网”，但是虚拟机并没有享受到这种福利，那么能不能让虚拟机也享受呢？这么一说，就是一段折腾史……\n##　虚拟机“外网”访问 虚拟机访问“外网”，可以通过设置虚拟机的网络为桥接模式，然后在虚拟机中设置主机的ip和端口即可。具体设置我们后面再说，先来打开桥接模式。 首先我们打开virtualbox的设置-\u0026gt;网络-\u0026gt;网卡1-\u0026gt;连接方式-\u0026gt;桥接网卡。到这一步的时候，被无情的提示“未指定”。原因是下图中红色箭头标记的那个东西没有 根据网上的提示安装桥接网卡驱动，但是安装完毕之后，依然没有显示出来。经过多方查证，发现是虚拟机版本太低，于是选择将4.3.12升级到5.1.18（最新版），升级完毕之后选择桥接网卡，一切顺利。\n准备开机起飞……还没飞起来就被无情打脸，虚拟机不能启动，报错信息如下：\n这个报错信息就是我们今天的关键信息，这个报错信息一般都是出现在virtualbox 5.0+和windows 8+上面，那么具体是什么原因呢，是因为virtualbox5.0之后对于系统的要求更严格了，说白了就是系统中如果安装了一些杀毒软件、主题修改的东西，那么虚拟机基本上就是会报这个错误。但是由于我的电脑一直是裸奔状态，于是我就将目标转向了mactype，这是我装的唯一一个主题修改类软件，于是经过多方查证找到了解决办法 按照上面的步骤操作之后，然后准备再次起飞……依然没飞起来被打脸，打脸的还是那个报错信息。于是再次排查，找了半天，发现virtualbox5.0之后安装完虚拟机还要安装一个驱动，具体操作在这里 这次安装完毕之后，再次信心满满的准备起飞……最后还是被打脸，我在想这飞机是不是有问题，准备换回4.3.12了，但是内心有个声音告诉我，一定要征服这个虚拟机，我就不信了。然后又到处找资料，找来找去还是找回到之前的杀毒软件和主题修改软件方向上，于是我仔细检查了一下我的电脑，搞了一下午，结果发现电脑右下角有一个净网大师，于是怒卸载之。 卸载完毕，再次小心翼翼的准备起飞，这一次飞机平稳的起飞，心中的大石头也落地了，这一下午算是值了。\n最后说一下关于ubuntu虚拟机桥接主机高速访问“外网”的方法： 在宿主机windows上运行shadowsocks.exe并勾选“允许局域网连接” 使用桥接方式运行虚拟机（这时虚拟机与宿主处于同一个局域网） 进入ubuntu系统，System Settings – Network – Network proxy勾选Manual（手动）,地址全部填宿主机IP（局域网网段），设置好代理端口（可在windows下的shadowsocks查看，一般为默认1080） ubuntu用浏览器访问www.google.com，成功。\n","permalink":"https://example.org/posts/virtualbox%E4%B8%8Emactype%E5%85%B1%E5%AD%98/","summary":"\u003ch1 id=\"virtualbox与mactype共存\"\u003eVirtualbox与Mactype共存\u003c/h1\u003e\n\u003cp\u003e最近心血来潮，准备重启吃灰好久的ubuntu虚拟机玩玩，于是开开心心准备打开机器，顺利进入，准备更新下软件，发现网速好慢，虽然主机能够高速访问“外网”，但是虚拟机并没有享受到这种福利，那么能不能让虚拟机也享受呢？这么一说，就是一段折腾史……\u003c/p\u003e","title":"Virtualbox与Mactype共存"},{"content":"概念解析 在Adnroid 4.4(API level 19)中引入了“沉浸式”状态栏的概念，现在许多对这个“沉浸式”状态栏的解释。但是感觉大部分的解释好像“差一点”，要么是把“沉浸式”状态栏解释为“透明状态栏”，要么是解释为Toolbar颜色和状态栏颜色不一致（前者为colorprimary，后者为colorprimary_dark）的状态栏。但是其实Android官方对于沉浸式状态栏的解释是非常清楚的。\n沉浸式状态栏 这个概念的提出对于手机是虚拟按键的用户来说是非常有意义的，因为“沉浸式”的体验可以增加手机的阅读空间，将上面的状态栏（statusbar）和下面的导航栏（navigationbar）隐藏起来，从而造成“沉浸式”的体验。\n图中展示了不同的“沉浸式”状态 在上图中：\n非沉浸模式 —— 展示了应用进入沉浸模式之前的状态。也展示了设置IMMERSIVE 标签后用户滑动展示系统栏的状态。用户滑动后，SYSTEM_UI_FLAG_HIDE_NAVIGATION 和SYSTEM_UI_FLAG_FULLSCREEN 就会被清除，系统栏就会重新显示并保持可见。 请注意，最好的实践方式就是让所有的UI控件的变化与系统栏的显示隐藏保持同步，这样可以减少屏幕显示所处的状态，同时提供了更无缝平滑的用户体验。因此所有的UI控件跟随系统栏一同显示。一旦应用进入了沉浸模式，相应的UI控件也跟随着系统栏一同隐藏。为了确保UI的可见性与系统栏保持一致，我们需要一个监听器View.OnSystemUiVisibilityChangeListener 来监听系统栏的变化。这在下一节中将详细讲解。 提示气泡——第一次进入沉浸模式时，系统将会显示一个提示气泡，提示用户如何再让系统栏显示出来。 Note：如果为了测试你想强制显示提示气泡，你可以先将应用设为沉浸模式，然后按下电源键进入锁屏模式，并在5秒中之后打开屏幕。\n沉浸模式—— 这张图展示了隐藏了系统栏和其他UI控件的状态。你可以设置IMMERSIVE 和IMMERSIVE_STICKY 来进入这个状态。 粘性标签——这就是你设置了IMMERSIVE_STICKY 标签时的UI状态，用户会向内滑动以展示系统栏。半透明的系统栏会临时的进行显示，一段时间后自动隐藏。滑动的操作并不会清空任何标签，也不会触发系统UI可见性的监听器，因为暂时显示的导航栏并不被认为是一种可见性状态的变化。 Note：immersive类的标签只有在 与SYSTEM_UI_FLAG_HIDE_NAVIGATION,SYSTEM_UI_FLAG_FULLSCREEN 中一个或两个一起使用的时候才会生效。你可以只使用其中的一个，但是一般情况下你需要同时隐藏状态栏和导航栏以达到沉浸的效果。\n上面引用了Android官方培训课程中对于“沉浸式”的讲解。\n从上面我们可以知道“沉浸式”是像我们前面所说的，将状态栏（statusbar）和导航栏（navigationbar）给隐藏起来（气泡[3]的状态），并不是像大部分的应用那样，将我们的状态栏设置为透明，或者是将状态栏颜色加深。 气泡[4]的状态是我们在“沉浸式”过程中点击屏幕之后产生的效果，即当我们阅读完毕时，点击屏幕，让屏幕获取焦点， 显示出状态栏和导航栏，然后进行其他的操作。 使用colorPrimary和colorPrimaryDark只是为了设置状态栏颜色，而且在Android 5.0之后，Material Design中引入了Toolbar，这也可以将Toolbar颜色和状态颜色区分开。\n最后希望各位通过篇文章了解什么是“沉浸式”状态栏，或者了解什么是“沉浸式”，而不是简单的将透明状态栏或是所谓的“变色龙”状态栏成为沉浸式状态栏。\n","permalink":"https://example.org/posts/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F%E6%8E%A2%E7%B4%A2/","summary":"\u003ch1 id=\"概念解析\"\u003e概念解析\u003c/h1\u003e\n\u003cp\u003e在Adnroid 4.4(API level 19)中引入了“沉浸式”状态栏的概念，现在许多对这个“沉浸式”状态栏的解释。但是感觉大部分的解释好像“差一点”，要么是把“沉浸式”状态栏解释为“透明状态栏”，要么是解释为Toolbar颜色和状态栏颜色不一致（前者为colorprimary，后者为colorprimary_dark）的状态栏。但是其实Android官方对于沉浸式状态栏的解释是非常清楚的。\u003c/p\u003e","title":"沉浸式状态栏"},{"content":"ADB无线调试步骤（不用root） 将手机通过USB连接到PC 在命令行输入：adb tcpip 5555开启无线调试模式 PC端开启WiFi热点 手机连上PC的WiFi热点 在命令行输入：adb connect [你的手机IP] 若要恢复USB有线调试模式，只需要在保持手机与PC连接状态下输入adb usb即可 若要断开连接，在命令行输入adb disconnect即可。 ","permalink":"https://example.org/posts/adb-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/","summary":"ADB无线调试步骤（不用root） 将手机通过USB连接到PC 在命令行输入：adb tcpip 5555开启无线调试模式 PC端开启WiFi热点 手机连上PC的WiFi热点 在命令行输入：adb connect [你的手机IP] 若要恢复USB有线调试模式，只需要在保持手机与PC连接状态下输入adb usb即可 若要断开连接，在命令行输入adb disconnect即可。 ","title":"ADB 命令行无线调试"},{"content":"Git 彩色Log配置 git 在打印log的时候，默认是黑底白字，这样我们很多的关键信息都不能够非常突出的显示出来，看起来也是比较费劲。我们可以通过如下的语句让git打印出来的log出现彩色的字体，这样的话可以让我们更直接的看到我们的提交信息的关键字。\n关键语句如下：\ngit log --graph --pretty=format:\u0026#39;%Cred%h - %Cgreen[%an]%Creset -%C(yellow)%d%Creset %s %C(yellow)\u0026lt;%cr\u0026gt;%Creset\u0026#39; --abbrev-commit --date=relative 大家可以看到这个关键语句比较长，我们不可能每次想要打印log的时候，都输入这么长的语句。 这样并不符合我们\u0026quot;能懒就懒\u0026quot;的原则。所以我们可以将这条语句配置到config配置文件里面\n关键配置语句如下：\n# 为了更简单,将log的别名设置为lg,以后就可以直接git lg输出日志了 git config --global alias.lg \u0026#34;log --graph --pretty=format:\u0026#39;%Cred%h - %Cgreen[%an]%Creset -%C(yellow)%d%Creset %s %C(yellow)\u0026lt;%cr\u0026gt;%Creset\u0026#39; --abbrev-commit --date=relative\u0026#34; 执行了上面的配置语句之后，我们以后每次输出log就可以直接输入下面的语句：\ngit lg 这样我们每次就只需要输入上面的一条语句，就可以看到我们的彩色log信息，关键字都已经变色，而且不同的信息用-分隔开，一目了然，在也不用面对黑底白字的命令行窗口了。 最后再给大家提供另一种log的格式，大家根据自己的喜好自行选择：\ngit config --global alias.lg \u0026#34;log --color --graph --pretty=format:\u0026#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u0026lt;%an\u0026gt;%Creset\u0026#39; --abbrev-commit\u0026#34; git config --global alias.his \u0026#34;log --graph --decorate --oneline --pretty=format:\u0026#39;%Creset %s %C(magenta)in %Cred%h %C(magenta)commited by %Cgreen%cn %C(magenta)on %C(yellow) %cd %C(magenta)from %Creset %C(yellow)%d\u0026#39; --abbrev-commit --date=format:\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;\u0026#34; git config --global alias.hist \u0026#34;log --graph --decorate --oneline --pretty=format:\u0026#39;%Cred%h - %C(bold white) %s %Creset %C(yellow)%d %C(cyan) \u0026lt;%cd\u0026gt; %Creset %Cgreen(%cn)\u0026#39; --abbrev-commit --date=format:\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;\u0026#34; ","permalink":"https://example.org/posts/git-%E8%BE%93%E5%87%BA%E5%BD%A9%E8%89%B2log/","summary":"Git 彩色Log配置 git 在打印log的时候，默认是黑底白字，这样我们很多的关键信息都不能够非常突出的显示出来，看起来也是比较费劲。我们可以通过如下的语句让git打印出来的log出现彩色的字体，这样的话可以让我们更直接的看到我们的提交信息的关键字。\n关键语句如下：\ngit log --graph --pretty=format:\u0026#39;%Cred%h - %Cgreen[%an]%Creset -%C(yellow)%d%Creset %s %C(yellow)\u0026lt;%cr\u0026gt;%Creset\u0026#39; --abbrev-commit --date=relative 大家可以看到这个关键语句比较长，我们不可能每次想要打印log的时候，都输入这么长的语句。 这样并不符合我们\u0026quot;能懒就懒\u0026quot;的原则。所以我们可以将这条语句配置到config配置文件里面\n关键配置语句如下：\n# 为了更简单,将log的别名设置为lg,以后就可以直接git lg输出日志了 git config --global alias.lg \u0026#34;log --graph --pretty=format:\u0026#39;%Cred%h - %Cgreen[%an]%Creset -%C(yellow)%d%Creset %s %C(yellow)\u0026lt;%cr\u0026gt;%Creset\u0026#39; --abbrev-commit --date=relative\u0026#34; 执行了上面的配置语句之后，我们以后每次输出log就可以直接输入下面的语句：\ngit lg 这样我们每次就只需要输入上面的一条语句，就可以看到我们的彩色log信息，关键字都已经变色，而且不同的信息用-分隔开，一目了然，在也不用面对黑底白字的命令行窗口了。 最后再给大家提供另一种log的格式，大家根据自己的喜好自行选择：\ngit config --global alias.lg \u0026#34;log --color --graph --pretty=format:\u0026#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u0026lt;%an\u0026gt;%Creset\u0026#39; --abbrev-commit\u0026#34; git config --global alias.his \u0026#34;log --graph --decorate --oneline --pretty=format:\u0026#39;%Creset %s %C(magenta)in %Cred%h %C(magenta)commited by %Cgreen%cn %C(magenta)on %C(yellow) %cd %C(magenta)from %Creset %C(yellow)%d\u0026#39; --abbrev-commit --date=format:\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;\u0026#34; git config --global alias.","title":"Git配置彩色Log"},{"content":"本文以Windows 10操作系统为例，介绍Hexo + Github Pages搭建个人博客的具体步骤。先简单介绍下Hexo和Github Pages\nHexo是一个快速、简洁且高效的博客框架 Github Pages是Github推出的静态页面托管服务 将由Hexo生成的静态页面托管到Github Pages上，即可实现简单的个人博客或是项目介绍页面，那么接下来就来看看具体的操作步骤。\n环境配置 创建Github仓库 创建私有的源文件仓库\n创建私有源文件仓库是因为部分源文件中会包含一些敏感的信息，为了更好地保护隐私。具体操作如图所示\n在上图中，我们创建了一个名为HexoSourceRepo仓库，以后我们就会将博客的基本配置和文件存放在这个仓库。因此后续的主要操作，都是在HexoSourceRepo仓库进行的。\n创建公开的静态页面仓库\n创建静态页面仓库和源文件仓库步骤是一样的，但是有两个地方需要注意\n公开仓库的名称必须是你的用户名.github.io，比如你的用户名是zhangsan，那么仓库名称就必须是zhangsan.github.io 静态页面仓库，也就是zhangsan.github.io是公开的，而源文件仓库是私有的。 创建好两个仓库之后，我们就可以开始安装Hexo了，但是在安装Hexo之前，需要先安装Node环境，因为Hexo是Node.js支持的。\n安装Node 直接去Node官网下载最新的安装包即可，推荐长期支持版，下载完成之后，打开安装包，一路下一步傻瓜式安装。安装完成之后，在命令行输入node --version和npm -v查看是否有输出，输出如下就表示没问题。\n在安装Node的时候会自动安装npm包管理工具，但是npm默认使用国外的镜像，所以在后面安装包的时候可能会非常慢，所以我们先将npm替换为cnpm，在命令行中输入如下命令\nnpm install -g cnpm --registry=https://registry.npm.taobao.org 安装cnpm并将镜像替换为国内的taobao镜像，加速包的下载速度。如果不想安装cnpm也可以直接将npm的镜像替换为taobao镜像\nnpm config set registry https://registry.npm.taobao.org 安装完cnpm之后，就可以将所有的npm命令使用cnpm代替。\n2020-5-1 15:47:56更新\n\u0026ndash;可以安装nrm来选择各种源，具体操作为\u0026ndash;\n#安装nrm npm install -g nrm #常用命令 nrm help #显示帮助 nrm ls #列出所有的源 nrm use cnpm #切换源 通过nrm我们可以更好的管理各种源，选择国内的源能够显著的提升包的安装速度。\n安装Git 在Git官方页面下载Git，完成之后一路下一步傻瓜式安装。安装完成之后，即可使用Git Bash和Git GUI\n来进行Git操作，本文全程使用Git Bash操作。为了能在Git Bash中使用Node和npm命令，还需要配置一下Node的环境变量，否则会出现command not found错误。\n在环境变量－系统变量中，添加一个NODE_PATH值为C:\\Program Files\\nodejs(注意替换为自己的Node安装路径)，然后在Path中添加%NODE_PATH%即可。\n安装Hexo 在喜欢的位置，新建一个文件夹，名为HexoSourceRepo，和上面创建的私有文件仓库同名。然后在文件夹中打开Git Bash依次进行如下操作\ngit init //初始化Git仓库 git remote add origin https://github.com/yourname/HexoSourceRepo.git //添加远程仓库 git add . git commit -m \u0026#34;init hexo blog\u0026#34; //第一次提交 git push -u origin master cnpm install hexo //安装Hexo hexo init //初始化Hexo cnpm install //安装依赖包 cnpm install hexo-deployer-git //安装部署插件 安装完Hexo之后，可以在命令行执行hexo -v查看所有的信息，如果提示command not found那么就将Hexo添加到环境变量的Path中C:\\HexoSourceRepo\\node_modules\\.bin(注意替换为自己的目录)。\n经过上面的一系列操作，我们搭建好了基本的环境，接下来就是进行Hexo的博客配置，这部分内容主要是在HexoSourceRepo中进行的。后文中的根目录指的也是HexoSourceRepo这个目录。\n打开根目录中的_config.yml文件，修改文件最后的deploy参数为如下内容\ndeploy: type: git repository: github: git@github.com:yourname/yourname.github.io.git //注意将yourname替换为自己的用户名 branch: master 修改完成之后，我们再进行一次提交\ngit add . git commit -m \u0026#34;first deploy\u0026#34; git push origin master //然后继续执行 hexo g -d //将生成的网站部署到Github Pages静态页面上 至此，我们就完成了个人博客的搭建和部署。\n","permalink":"https://example.org/posts/hexo-+-github-pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","summary":"\u003cp\u003e本文以Windows 10操作系统为例，介绍Hexo + Github Pages搭建个人博客的具体步骤。先简单介绍下Hexo和Github Pages\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHexo是一个快速、简洁且高效的博客框架\u003c/li\u003e\n\u003cli\u003eGithub Pages是Github推出的静态页面托管服务\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e将由Hexo生成的静态页面托管到Github Pages上，即可实现简单的个人博客或是项目介绍页面，那么接下来就来看看具体的操作步骤。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://i.loli.net/2020/04/15/DNjXiwZC51ekBy8.png\" alt=\"\"  /\u003e\n\u003c/p\u003e","title":"Hexo + Github Pages搭建博客"},{"content":"在日常写博客时，免不了需要插入图片帮助读者更好的理解。\n对于Markdown语法，插入图片只需要输入\n![图片描述](图片路径/xxx.png) 但是对于图片的存储，有几种方法\n云服务，借助七牛云这类云服务进行图片的存储，可能需要收费 图床，sm.ms这类的公开图床，对于图片大小有一定的限制 自建Github仓库，相对有点麻烦 本地图片 在此主要推荐最后一种，就是放在本地，当然这里说的本地并不是指放在本机，而是指放在博客本身的目录中，也就是不通过外链引入图片。\n对于Hexo博客使用本地图片，需要在配置文件_config.yml中设置post_asset_folder: true\n设置完毕之后，每次写新的文章，只需要在命令行运行hexo new post xxx，就可以在博客的目录中自动生成一个名为xxx的目录和一个名为xxx.md的文件，写作的时候将我们需要的图片放入目录中，就可以在文章中直接引用了。\n但是在写博客的时候，可能更多的是通过Typora这个软件来新建文件，这时候就没法自动生成同名目录，可以通过对Typora这个软件进行设置：\n文件-偏好设置-图像-插入图片时-复制到指定路径-./${filename}\n这样设置之后，我们每次写文章就可以直接将图片复制粘贴到文章中，Typora会自动帮我们生成文件夹并且把图片放入其中，也会将我们的图片引用路径改为相对路径。\n","permalink":"https://example.org/posts/hexo%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/","summary":"在日常写博客时，免不了需要插入图片帮助读者更好的理解。\n对于Markdown语法，插入图片只需要输入\n![图片描述](图片路径/xxx.png) 但是对于图片的存储，有几种方法\n云服务，借助七牛云这类云服务进行图片的存储，可能需要收费 图床，sm.ms这类的公开图床，对于图片大小有一定的限制 自建Github仓库，相对有点麻烦 本地图片 在此主要推荐最后一种，就是放在本地，当然这里说的本地并不是指放在本机，而是指放在博客本身的目录中，也就是不通过外链引入图片。\n对于Hexo博客使用本地图片，需要在配置文件_config.yml中设置post_asset_folder: true\n设置完毕之后，每次写新的文章，只需要在命令行运行hexo new post xxx，就可以在博客的目录中自动生成一个名为xxx的目录和一个名为xxx.md的文件，写作的时候将我们需要的图片放入目录中，就可以在文章中直接引用了。\n但是在写博客的时候，可能更多的是通过Typora这个软件来新建文件，这时候就没法自动生成同名目录，可以通过对Typora这个软件进行设置：\n文件-偏好设置-图像-插入图片时-复制到指定路径-./${filename}\n这样设置之后，我们每次写文章就可以直接将图片复制粘贴到文章中，Typora会自动帮我们生成文件夹并且把图片放入其中，也会将我们的图片引用路径改为相对路径。","title":"Hexo使用本地图片"}]