<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 雅俗共赏</title>
    <link>https://houzixiashanxiedaima.github.io/posts/</link>
    <description>Recent content in Posts on 雅俗共赏</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://houzixiashanxiedaima.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>完美主义、拖延症、人物弧光</title>
      <link>https://houzixiashanxiedaima.github.io/posts/%E5%AE%8C%E7%BE%8E%E4%B8%BB%E4%B9%89%E6%8B%96%E5%BB%B6%E7%97%87%E4%BA%BA%E7%89%A9%E5%BC%A7%E5%85%89/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/%E5%AE%8C%E7%BE%8E%E4%B8%BB%E4%B9%89%E6%8B%96%E5%BB%B6%E7%97%87%E4%BA%BA%E7%89%A9%E5%BC%A7%E5%85%89/</guid>
      <description>每位程序员，要么已经，要么正在，要么即将折腾博客&#xA;&amp;ndash; 鲁迅没说过&#xA;在很久之前，我就折腾过博客，从Github到Coding再回到Github，从Hexo到Hugo。始终都是在折腾配置和主题。当主题折腾完成之后，就不再更新，直到下一次网上冲浪时，看到别人推荐了博客主题，交换博客友链，才又想起来折腾一次。&#xA;有时候也想在帖子下面附上自己的博客链接，但是看到自己清汤寡水的内容，寥寥无几的访问，默认配置的主题，实在拿不出手。&#xA;每次换工作的时候，除了在简历上写一些同质化的技术栈，不高深的项目经历，费劲脑筋也想不出有什么特别的闪光点，那个时候就总想着，如果我一直在持续更新博客，一直在持续更新Github，那该多好。&#xA;于是暗下决心，找到新工作之后，一定要开始更新博客，更新Github，但是真的找到新工作之后，这些事情就成了下次一定。&#xA;似乎写博客，成了一件一直萦绕在心头，但是却始终难以完成的事情。我以前总觉得是因为自己太懒，但当我直面内心才发现，原来是这样。&#xA;完美主义与拖延症 对我而言，在编码时，完美主义让我能更好地完成任务。但对于写博客这件事，却是一个沉重的思想包袱。&#xA;一鸣惊人 指想要在一开始就直接是最厉害的&#xA;有时在学习一些新技术，我就想写博客记录下来，但是真到写的时候，却发现想写的很多东西和官网内容高度重合，甚至有一些是直接复制官网的内容。&#xA;这时我内心就开始觉得我写出的东西，毫无价值，因为肯定不如官网的详细，因此干脆就不写了。&#xA;过早优化 指在做事情时，每一步都想做到最好&#xA;再就是在写博客的时候，会经常写一段就停下来，反复的对这一段文字进行修改。可能写了一两个小时，才写了一两百字。&#xA;正是因为这样的完美主义，导致写博客的热情被消耗，最终只能「封笔」。&#xA;人物弧光 在之前网上冲浪时，我看到一个词「人物弧光」，一般用来形容在故事中，人物经历了磨难和考验，最终人物的，或状态、或心态、或品质逐渐发生改变。&#xA;我想这个词也可以用在写博客这件事上。&#xA;在刚学习某个新技术的时候，由于有一些基本概念需要记忆，难免会出现博客内容与官方文档高度重合的情况，这是我们通向完美的必经之路。&#xA;在刚开始写博客的时候，难免会出现一些遣词造句不完善的地方，但随着输入和输出的增加，这些问题都会被慢慢改正。&#xA;我们需要允许自己的不完美，才能更接近完美。&#xA;还是以新技术学习为例，如果在前期的学习过程中，不输出一些基本概念的文章，而是直接等到学会了，再输出一些「硬核」文章，一方面可能对读者有一定的门槛，另一方面是我们无法见证自己的成长。&#xA;见证一个人的成长，永远都是故事中最吸引人的地方。&#xA;而你，我的朋友，为什么不用博客记录自己的成长呢。</description>
    </item>
    <item>
      <title>开发环境配置</title>
      <link>https://houzixiashanxiedaima.github.io/posts/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 17 Oct 2021 17:54:55 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>为了防止每次配置环境都要去搜索，每次配置完成之后都要重新做一些个性化设置，记录一下环境配置，一次搞定。后续会将这些配置写成一个macOS/Linux的脚本，一键配置，Windows下还是得自己手动配置。&#xA;配置Java 下载JAVA_8、JAVA_11&#xA;配置环境&#xA;JAVA_HOME: C:\Java\jdk11&#xA;Path: %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;&#xA;CLASSPATH: .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;&#xA;配置Android 下载Toolbox 配置环境 ANDROID_HOME: C:\AndroidSDK Path: %ANDROID_HOME%\tools;%ANDROID_HOME%\platform-tools; 配置Flutter 下载Flutter 配置环境 FLUTTER_HOME: C:\androidsdk\flutter\bin Path: %FLUTTER_HOME% 配置Node 下载nvm-windows-upgrader 安装Node nvm install lts 配置环境 NODE_HOME: C:\Users\xxx\AppData\Roaming\nvm NVM_SYMLINK: C:\Program Files\nodejs Path: %NVM_HOME%;%NVM_SYMLINK% 配置python 下载python 配置环境 PYTHON_HOME: C:\Users\xxx\AppData\Local\Programs\Python\Python310\ Path: %PYTHON_HOME%;%PYTHON_HOME%\Scripts\ </description>
    </item>
    <item>
      <title>build.gradle.kts &#43; buildSrc管理Gradle依赖</title>
      <link>https://houzixiashanxiedaima.github.io/posts/build-gradle-kts-buildsrc/</link>
      <pubDate>Sun, 09 Aug 2020 11:31:28 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/build-gradle-kts-buildsrc/</guid>
      <description>在Android开发过程中，经常需要管理Gradle的依赖，但是传统的Gradle管理方式有几个不好的地方&#xA;对于多个module支持不太好，无法共用 build.gradle文件中无法使用自动补全 如果某个库在多module中引用，需要改动多个地方 …… 虽然Google官方推荐使用ext的形式统一管理，但是对于现在大家使用Kotlin越来越多的情况下，是否能够使用Kotlin一门语言统一Android开发。&#xA;今天就给大家介绍build.gradle.kts + buildSrc的方式来管理Gradle依赖，这种方式管理Gradle依赖，能够利用Kotlin语言的自动补全，让我们更方便地书写代码。接下来我们就一步步的将build.gradle转化为build.gradle.kts&#xA;build.gradle -&amp;gt; build.gradle.kts 修改文件名为build.gradle.kts&#xA;替换单引号为双引号&#xA;在gradle语法中，可以用单引号&#39;和双引号&amp;quot;来表示字符串，但是在build.gradle.kts中只能使用双引号表示字符串，所以我们要做的第一步就是将build.gradle文件中所有的单引号转换为双引号，这一步使用Android Studio自带的替换功能即可。&#xA;在文件中按下快捷键Ctrl+R，然后输入要查找的单引号，再输入要替换的双引号，点击Replace all，替换完成。&#xA;修改gradle语法为kts语法&#xA;setting.gradle&#xA;//修改前 include &amp;#39;:app&amp;#39; rootProject.name = &amp;#34;BlogTmp&amp;#34; //修改后 include(&amp;#34;:app&amp;#34;) rootProject.name = &amp;#34;BlogTmp&amp;#34; build.gradle(project)&#xA;//修改前 // Top-level build file where you can add configuration options common to all sub-projects/modules. buildscript { ext.kotlin_version = &amp;#34;1.3.72&amp;#34; repositories { google() jcenter() } dependencies { classpath &amp;#34;com.android.tools.build:gradle:4.0.1&amp;#34; classpath &amp;#34;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&amp;#34; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.</description>
    </item>
    <item>
      <title>AlertDialog中使用WebView显示内容</title>
      <link>https://houzixiashanxiedaima.github.io/posts/alertdialog%E4%B8%AD%E4%BD%BF%E7%94%A8webview%E6%98%BE%E7%A4%BA%E5%86%85%E5%AE%B9/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/alertdialog%E4%B8%AD%E4%BD%BF%E7%94%A8webview%E6%98%BE%E7%A4%BA%E5%86%85%E5%AE%B9/</guid>
      <description>&lt;p&gt;在最近的开发中，需要用到在AlertDialog中通过WebView显示内容，但是在实际操作过程中，发现有一个小小的问题需要注意一下，在此也记录一下。&#xA;首先放出代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;AlertDialog.&lt;span style=&#34;color:#658b00&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;builder&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Builder(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;setView&lt;/span&gt;(R.&lt;span style=&#34;color:#658b00&#34;&gt;layout&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;new_dialog_user_guide&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;View&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;view&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;getLayoutInflater().&lt;span style=&#34;color:#658b00&#34;&gt;inflate&lt;/span&gt;(R.&lt;span style=&#34;color:#658b00&#34;&gt;layout&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;new_dialog_user_guide&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;WebView&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;webView&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(WebView)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;view.&lt;span style=&#34;color:#658b00&#34;&gt;findViewById&lt;/span&gt;(R.&lt;span style=&#34;color:#658b00&#34;&gt;id&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;web_user_guide&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;webView.&lt;span style=&#34;color:#658b00&#34;&gt;loadUrl&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://www.baidu.com&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;builder.&lt;span style=&#34;color:#658b00&#34;&gt;show&lt;/span&gt;();&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面这段代码，看似是没问题的，但是在实际显示过程中，WebView一直都是空白页面，啥也没有。开始排查问题：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android 5.0透明状态栏设置</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android-5.0%E9%80%8F%E6%98%8E%E7%8A%B6%E6%80%81%E6%A0%8F%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/android-5.0%E9%80%8F%E6%98%8E%E7%8A%B6%E6%80%81%E6%A0%8F%E8%AE%BE%E7%BD%AE/</guid>
      <description>&lt;p&gt;这篇文章是针对Android 5.0及以上版本的系统进行透明的状态栏设置，Android 5.0以下的系统暂不在本篇文章的讨论范围之内。&lt;/p&gt;&#xA;&lt;h2 id=&#34;android-50透明状态栏普通界面&#34;&gt;Android 5.0透明状态栏——普通界面&lt;/h2&gt;&#xA;&lt;p&gt;先贴出MainActivity布局代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;RelativeLayout&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;xmlns:tools=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://schemas.android.com/tools&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;android:background=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@color/colorPrimary&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;android:fitsSystemWindows=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;tools:context=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stephen.com.material_design.NoteActivity&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;include&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;layout=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@layout/app_bar_note&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Android光速打包</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android%E5%85%89%E9%80%9F%E6%89%93%E5%8C%85/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/android%E5%85%89%E9%80%9F%E6%89%93%E5%8C%85/</guid>
      <description>&lt;h1 id=&#34;快速打包插件-packer-ng-plugin-使用心得&#34;&gt;快速打包插件 packer-ng-plugin 使用心得&lt;/h1&gt;&#xA;&lt;p&gt;首先放出这个工具的Github地址：https://github.com/mcxiaoke/packer-ng-plugin 在这个工具里面，作者已经非常详细的介绍了该如何使用这个打包工具，在此我主要记录一下我使用这个打包工具的过程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android开发常用开源库整理（不定期更新）</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E5%BA%93%E6%95%B4%E7%90%86%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/android%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E5%BA%93%E6%95%B4%E7%90%86%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/</guid>
      <description>&lt;p&gt;在此整理一下Android开发中常用的开源库，主要是为了在新建一个项目的时候能够快速的搭建好我们需要的环境，同时也能够方便的获取各个开源库的最新版本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android开发使用lambda表达式</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/android%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>&lt;p&gt;在Java9即将发布之际，我们来讲讲如何使用Java8的新特性&amp;ndash;&amp;gt;lambda表达式。lambda表达式可以让我们的代码非常简洁，提高代码的可读性，那么如何在Android开发中来使用lambda表达式呢。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android开发之View坐标问题</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android%E5%BC%80%E5%8F%91%E4%B9%8Bview%E5%9D%90%E6%A0%87%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/android%E5%BC%80%E5%8F%91%E4%B9%8Bview%E5%9D%90%E6%A0%87%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;在我们日常的开发过程中，接触最多的就是View了，各种各样的View，但是我们可能对View的知识了解一些，但是还是感觉有些地方不太够，尤其是View的坐标问题。我们今天就来看看这个View的坐标到底是怎么定义的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android游戏手柄开发记录（一）</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android%E6%B8%B8%E6%88%8F%E6%89%8B%E6%9F%84%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95%E4%B8%80/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/android%E6%B8%B8%E6%88%8F%E6%89%8B%E6%9F%84%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95%E4%B8%80/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;最近一直在进行Android游戏手柄的开发，在这里简单记录一下自己在这个过程中遇到的问题，同时也能够为自己以后的开发提供一些帮助。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android中输出HTML格式下的文字</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android%E4%B8%AD%E8%BE%93%E5%87%BAhtml%E6%A0%BC%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%96%87%E5%AD%97/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/android%E4%B8%AD%E8%BE%93%E5%87%BAhtml%E6%A0%BC%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%96%87%E5%AD%97/</guid>
      <description>&lt;h1 id=&#34;android中输出html格式下的文字&#34;&gt;Android中输出HTML格式下的文字&lt;/h1&gt;&#xA;&lt;p&gt;在Android中，我们经常会用到TextView这个控件，在使用的过程中，我们用到最多的方法就是setText()，单纯的使用基本上能够满足我们日常的需求，但是有时候我们需要对文字进行一些处理，比如说加粗、斜体、下划线等等，这些也都是可以通过Android提供的原生方法完成。但是如果我们需要实现下面的效果呢：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/2524102-92f803de79292a20.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;图1&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android自定义流式布局的探索</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80%E7%9A%84%E6%8E%A2%E7%B4%A2/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80%E7%9A%84%E6%8E%A2%E7%B4%A2/</guid>
      <description>&lt;p&gt;最近在学习Android中自定义View的一些知识，为了检验成果，先来自定义一个流式布局。&lt;/p&gt;&#xA;&lt;h3 id=&#34;什么是流式布局&#34;&gt;什么是流式布局？&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/2524102-a4edfa75da430455.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;流式布局示例1&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/2524102-9b3989321f3e5db6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;流式布局示例2.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>DrawerLayout：Write-Once，Run-EveryWhere</title>
      <link>https://houzixiashanxiedaima.github.io/posts/drawerlayoutwrite-oncerun-everywhere/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/drawerlayoutwrite-oncerun-everywhere/</guid>
      <description>&lt;p&gt;自从Material Design出来之后，各种各样的控件也是让人眼花缭乱，但是用的时候还是需要克制，比如Google在官方的Material Design Guideline中就建议内容相同的列表不要使用Cardview，而是推荐使用普通的布局，中间加上divider即可，避免给人一种分裂感。&lt;/p&gt;&#xA;&lt;p&gt;在使用DrawerLayout的时候，可能我们多个Activity中都需要用到，我们是不是每个Activity都需要新建为Navigation Drawer Activity呢，答案是：NO。所以这次我们就来看看，如何“克制地”使用DrawerLayout&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Write Once，Run Everywhere&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Material-Design-之TabLayout与Toolbar</title>
      <link>https://houzixiashanxiedaima.github.io/posts/material-design-%E4%B9%8Btablayout%E4%B8%8Etoolbar/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/material-design-%E4%B9%8Btablayout%E4%B8%8Etoolbar/</guid>
      <description>&lt;p&gt;今天在学习Material Design的过程中，遇到了一个比较坑的问题，在这里记录一下，以后如果有人遇到的话，可以做个参考吧。首先来看看我们的需求，今天我们需要实现下面这个效果：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/2524102-d8903fa389d460a8.gif?imageMogr2/auto-orient/strip&#34; alt=&#34;需求.gif&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>NavigationView-子菜单问题</title>
      <link>https://houzixiashanxiedaima.github.io/posts/navigationview-%E5%AD%90%E8%8F%9C%E5%8D%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/navigationview-%E5%AD%90%E8%8F%9C%E5%8D%95%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;在Android 5.0之后，Google推出了Material Design兼容库，在Material Design的兼容库中，有个用的比较多的控件就是&lt;code&gt;NavigationView&lt;/code&gt;。在我们平时使用过程中，对于&lt;code&gt;NavigationView&lt;/code&gt;的一些小细节可能也并没有过多的关注，所以就导致我们在遇到特殊需求的时候无从下手，那么在这里我就简单记录一下使用&lt;code&gt;NavigationView&lt;/code&gt;的一些小坑，暂时可能也并没有遇到很多的坑，如果以后遇到的话会不定时更新。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Virtualbox与Mactype共存</title>
      <link>https://houzixiashanxiedaima.github.io/posts/virtualbox%E4%B8%8Emactype%E5%85%B1%E5%AD%98/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/virtualbox%E4%B8%8Emactype%E5%85%B1%E5%AD%98/</guid>
      <description>&lt;h1 id=&#34;virtualbox与mactype共存&#34;&gt;Virtualbox与Mactype共存&lt;/h1&gt;&#xA;&lt;p&gt;最近心血来潮，准备重启吃灰好久的ubuntu虚拟机玩玩，于是开开心心准备打开机器，顺利进入，准备更新下软件，发现网速好慢，虽然主机能够高速访问“外网”，但是虚拟机并没有享受到这种福利，那么能不能让虚拟机也享受呢？这么一说，就是一段折腾史……&lt;/p&gt;</description>
    </item>
    <item>
      <title>沉浸式状态栏</title>
      <link>https://houzixiashanxiedaima.github.io/posts/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F%E6%8E%A2%E7%B4%A2/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F%E6%8E%A2%E7%B4%A2/</guid>
      <description>&lt;h1 id=&#34;概念解析&#34;&gt;概念解析&lt;/h1&gt;&#xA;&lt;p&gt;在Adnroid 4.4(API level 19)中引入了“沉浸式”状态栏的概念，现在许多对这个“沉浸式”状态栏的解释。但是感觉大部分的解释好像“差一点”，要么是把“沉浸式”状态栏解释为“透明状态栏”，要么是解释为Toolbar颜色和状态栏颜色不一致（前者为colorprimary，后者为colorprimary_dark）的状态栏。但是其实Android官方对于沉浸式状态栏的解释是非常清楚的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ADB 命令行无线调试</title>
      <link>https://houzixiashanxiedaima.github.io/posts/adb-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/</link>
      <pubDate>Thu, 28 Jul 2016 15:17:34 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/adb-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/</guid>
      <description>ADB无线调试步骤（不用root） 将手机通过USB连接到PC 在命令行输入：adb tcpip 5555开启无线调试模式 PC端开启WiFi热点 手机连上PC的WiFi热点 在命令行输入：adb connect [你的手机IP] 若要恢复USB有线调试模式，只需要在保持手机与PC连接状态下输入adb usb即可 若要断开连接，在命令行输入adb disconnect即可。 </description>
    </item>
    <item>
      <title>Git配置彩色Log</title>
      <link>https://houzixiashanxiedaima.github.io/posts/git-%E8%BE%93%E5%87%BA%E5%BD%A9%E8%89%B2log/</link>
      <pubDate>Thu, 28 Jul 2016 15:17:34 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/git-%E8%BE%93%E5%87%BA%E5%BD%A9%E8%89%B2log/</guid>
      <description>Git 彩色Log配置 git 在打印log的时候，默认是黑底白字，这样我们很多的关键信息都不能够非常突出的显示出来，看起来也是比较费劲。我们可以通过如下的语句让git打印出来的log出现彩色的字体，这样的话可以让我们更直接的看到我们的提交信息的关键字。&#xA;关键语句如下：&#xA;git log --graph --pretty=format:&amp;#39;%Cred%h - %Cgreen[%an]%Creset -%C(yellow)%d%Creset %s %C(yellow)&amp;lt;%cr&amp;gt;%Creset&amp;#39; --abbrev-commit --date=relative 大家可以看到这个关键语句比较长，我们不可能每次想要打印log的时候，都输入这么长的语句。 这样并不符合我们&amp;quot;能懒就懒&amp;quot;的原则。所以我们可以将这条语句配置到config配置文件里面&#xA;关键配置语句如下：&#xA;# 为了更简单,将log的别名设置为lg,以后就可以直接git lg输出日志了 git config --global alias.lg &amp;#34;log --graph --pretty=format:&amp;#39;%Cred%h - %Cgreen[%an]%Creset -%C(yellow)%d%Creset %s %C(yellow)&amp;lt;%cr&amp;gt;%Creset&amp;#39; --abbrev-commit --date=relative&amp;#34; 执行了上面的配置语句之后，我们以后每次输出log就可以直接输入下面的语句：&#xA;git lg 这样我们每次就只需要输入上面的一条语句，就可以看到我们的彩色log信息，关键字都已经变色，而且不同的信息用-分隔开，一目了然，在也不用面对黑底白字的命令行窗口了。 最后再给大家提供另一种log的格式，大家根据自己的喜好自行选择：&#xA;git config --global alias.lg &amp;#34;log --color --graph --pretty=format:&amp;#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39; --abbrev-commit&amp;#34; git config --global alias.his &amp;#34;log --graph --decorate --oneline --pretty=format:&amp;#39;%Creset %s %C(magenta)in %Cred%h %C(magenta)commited by %Cgreen%cn %C(magenta)on %C(yellow) %cd %C(magenta)from %Creset %C(yellow)%d&amp;#39; --abbrev-commit --date=format:&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;&amp;#34; git config --global alias.</description>
    </item>
    <item>
      <title>Hexo &#43; Github Pages搭建博客</title>
      <link>https://houzixiashanxiedaima.github.io/posts/hexo-&#43;-github-pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/hexo-&#43;-github-pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;p&gt;本文以Windows 10操作系统为例，介绍Hexo + Github Pages搭建个人博客的具体步骤。先简单介绍下Hexo和Github Pages&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Hexo是一个快速、简洁且高效的博客框架&lt;/li&gt;&#xA;&lt;li&gt;Github Pages是Github推出的静态页面托管服务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;将由Hexo生成的静态页面托管到Github Pages上，即可实现简单的个人博客或是项目介绍页面，那么接下来就来看看具体的操作步骤。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/04/15/DNjXiwZC51ekBy8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hexo使用本地图片</title>
      <link>https://houzixiashanxiedaima.github.io/posts/hexo%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://houzixiashanxiedaima.github.io/posts/hexo%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</guid>
      <description>在日常写博客时，免不了需要插入图片帮助读者更好的理解。&#xA;对于Markdown语法，插入图片只需要输入&#xA;![图片描述](图片路径/xxx.png) 但是对于图片的存储，有几种方法&#xA;云服务，借助七牛云这类云服务进行图片的存储，可能需要收费 图床，sm.ms这类的公开图床，对于图片大小有一定的限制 自建Github仓库，相对有点麻烦 本地图片 在此主要推荐最后一种，就是放在本地，当然这里说的本地并不是指放在本机，而是指放在博客本身的目录中，也就是不通过外链引入图片。&#xA;对于Hexo博客使用本地图片，需要在配置文件_config.yml中设置post_asset_folder: true&#xA;设置完毕之后，每次写新的文章，只需要在命令行运行hexo new post xxx，就可以在博客的目录中自动生成一个名为xxx的目录和一个名为xxx.md的文件，写作的时候将我们需要的图片放入目录中，就可以在文章中直接引用了。&#xA;但是在写博客的时候，可能更多的是通过Typora这个软件来新建文件，这时候就没法自动生成同名目录，可以通过对Typora这个软件进行设置：&#xA;文件-偏好设置-图像-插入图片时-复制到指定路径-./${filename}&#xA;这样设置之后，我们每次写文章就可以直接将图片复制粘贴到文章中，Typora会自动帮我们生成文件夹并且把图片放入其中，也会将我们的图片引用路径改为相对路径。</description>
    </item>
  </channel>
</rss>
