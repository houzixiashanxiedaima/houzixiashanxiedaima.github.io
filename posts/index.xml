<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on BLOG</title>
    <link>https://houzixiashanxiedaima.github.io/posts/</link>
    <description>Recent content in Posts on BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Oct 2021 17:54:55 +0000</lastBuildDate><atom:link href="https://houzixiashanxiedaima.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>开发环境配置</title>
      <link>https://houzixiashanxiedaima.github.io/posts/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 17 Oct 2021 17:54:55 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>为了防止每次配置环境都要去搜索，每次配置完成之后都要重新做一些个性化设置，记录一下环境配置，一次搞定。后续会将这些配置写成一个macOS/Linux的脚本，一键配置，Windows下还是得自己手动配置。
配置Java 下载JAVA_8、JAVA_11
配置环境
JAVA_HOME: C:\Java\jdk11
Path: %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;
CLASSPATH: .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;
配置Android 下载Toolbox 配置环境 ANDROID_HOME: C:\AndroidSDK Path: %ANDROID_HOME%\tools;%ANDROID_HOME%\platform-tools; 配置Flutter 下载Flutter 配置环境 FLUTTER_HOME: C:\androidsdk\flutter\bin Path: %FLUTTER_HOME% 配置Node 下载nvm-windows-upgrader 安装Node nvm install lts 配置环境 NODE_HOME: C:\Users\xxx\AppData\Roaming\nvm NVM_SYMLINK: C:\Program Files\nodejs Path: %NVM_HOME%;%NVM_SYMLINK% 配置python 下载python 配置环境 PYTHON_HOME: C:\Users\xxx\AppData\Local\Programs\Python\Python310\ Path: %PYTHON_HOME%;%PYTHON_HOME%\Scripts\ </description>
      <content:encoded><![CDATA[<p>为了防止每次配置环境都要去搜索，每次配置完成之后都要重新做一些个性化设置，记录一下环境配置，一次搞定。后续会将这些配置写成一个macOS/Linux的脚本，一键配置，Windows下还是得自己手动配置。</p>
<h4 id="配置java">配置Java</h4>
<ol>
<li>
<p>下载<a href="https://www.azul.com/downloads/?version=java-8-lts&amp;package=jdk">JAVA_8</a>、<a href="https://www.azul.com/downloads/?version=java-11-lts&amp;package=jdk">JAVA_11</a></p>
</li>
<li>
<p>配置环境</p>
<p>JAVA_HOME: <code>C:\Java\jdk11</code></p>
<p>Path: <code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</code></p>
<p>CLASSPATH: <code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</code></p>
</li>
</ol>
<h4 id="配置android">配置Android</h4>
<ol>
<li><a href="https://www.jetbrains.com/toolbox-app/">下载Toolbox</a></li>
<li>配置环境
ANDROID_HOME: <code>C:\AndroidSDK</code>
Path: <code>%ANDROID_HOME%\tools;%ANDROID_HOME%\platform-tools;</code></li>
</ol>
<h4 id="配置flutter">配置Flutter</h4>
<ol>
<li><a href="https://flutter.cn/docs/get-started/install">下载Flutter</a></li>
<li>配置环境
FLUTTER_HOME: <code>C:\androidsdk\flutter\bin</code>
Path: <code>%FLUTTER_HOME%</code></li>
</ol>
<h4 id="配置node">配置Node</h4>
<ol>
<li><a href="https://github.com/coreybutler/nvm-windows/releases">下载nvm-windows-upgrader</a></li>
<li>安装Node <code>nvm install lts</code></li>
<li>配置环境
NODE_HOME: <code>C:\Users\xxx\AppData\Roaming\nvm</code>
NVM_SYMLINK: <code>C:\Program Files\nodejs</code>
Path: <code>%NVM_HOME%;%NVM_SYMLINK%</code></li>
</ol>
<h4 id="配置python">配置python</h4>
<ol>
<li><a href="https://www.python.org/downloads/">下载python</a></li>
<li>配置环境
PYTHON_HOME: <code>C:\Users\xxx\AppData\Local\Programs\Python\Python310\</code>
Path: <code>%PYTHON_HOME%;%PYTHON_HOME%\Scripts\</code></li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>build.gradle.kts &#43; buildSrc管理Gradle依赖</title>
      <link>https://houzixiashanxiedaima.github.io/posts/build-gradle-kts-buildsrc/</link>
      <pubDate>Sun, 09 Aug 2020 11:31:28 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/build-gradle-kts-buildsrc/</guid>
      <description>在Android开发过程中，经常需要管理Gradle的依赖，但是传统的Gradle管理方式有几个不好的地方
对于多个module支持不太好，无法共用 build.gradle文件中无法使用自动补全 如果某个库在多module中引用，需要改动多个地方 …… 虽然Google官方推荐使用ext的形式统一管理，但是对于现在大家使用Kotlin越来越多的情况下，是否能够使用Kotlin一门语言统一Android开发。
今天就给大家介绍build.gradle.kts + buildSrc的方式来管理Gradle依赖，这种方式管理Gradle依赖，能够利用Kotlin语言的自动补全，让我们更方便地书写代码。接下来我们就一步步的将build.gradle转化为build.gradle.kts
build.gradle -&amp;gt; build.gradle.kts 修改文件名为build.gradle.kts
替换单引号为双引号
在gradle语法中，可以用单引号&#39;和双引号&amp;quot;来表示字符串，但是在build.gradle.kts中只能使用双引号表示字符串，所以我们要做的第一步就是将build.gradle文件中所有的单引号转换为双引号，这一步使用Android Studio自带的替换功能即可。
在文件中按下快捷键Ctrl+R，然后输入要查找的单引号，再输入要替换的双引号，点击Replace all，替换完成。
修改gradle语法为kts语法
setting.gradle
//修改前 include &amp;#39;:app&amp;#39; rootProject.name = &amp;#34;BlogTmp&amp;#34; //修改后 include(&amp;#34;:app&amp;#34;) rootProject.name = &amp;#34;BlogTmp&amp;#34; build.gradle(project)
//修改前 // Top-level build file where you can add configuration options common to all sub-projects/modules. buildscript { ext.kotlin_version = &amp;#34;1.3.72&amp;#34; repositories { google() jcenter() } dependencies { classpath &amp;#34;com.android.tools.build:gradle:4.0.1&amp;#34; classpath &amp;#34;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&amp;#34; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.</description>
      <content:encoded><![CDATA[<p>在Android开发过程中，经常需要管理Gradle的依赖，但是传统的Gradle管理方式有几个不好的地方</p>
<ul>
<li>对于多个module支持不太好，无法共用</li>
<li>build.gradle文件中无法使用自动补全</li>
<li>如果某个库在多module中引用，需要改动多个地方</li>
<li>……</li>
</ul>
<p>虽然Google官方推荐使用ext的形式统一管理，但是对于现在大家使用Kotlin越来越多的情况下，是否能够使用Kotlin一门语言统一Android开发。</p>
<!-- raw HTML omitted -->
<p>今天就给大家介绍build.gradle.kts + buildSrc的方式来管理Gradle依赖，这种方式管理Gradle依赖，能够利用Kotlin语言的自动补全，让我们更方便地书写代码。接下来我们就一步步的将<code>build.gradle</code>转化为<code>build.gradle.kts</code></p>
<h3 id="buildgradle---buildgradlekts">build.gradle -&gt; build.gradle.kts</h3>
<p>修改文件名为<code>build.gradle.kts</code></p>
<p><strong>替换单引号为双引号</strong></p>
<p>在gradle语法中，可以用单引号<code>'</code>和双引号<code>&quot;</code>来表示字符串，但是在<code>build.gradle.kts</code>中只能使用双引号表示字符串，所以我们要做的第一步就是将<code>build.gradle</code>文件中所有的单引号转换为双引号，这一步使用Android Studio自带的替换功能即可。</p>
<p>在文件中按下快捷键<code>Ctrl+R</code>，然后输入要查找的单引号，再输入要替换的双引号，点击<code>Replace all</code>，替换完成。</p>
<p><strong>修改gradle语法为kts语法</strong></p>
<ul>
<li>
<p>setting.gradle</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#75715e">//修改前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>include <span style="color:#960050;background-color:#1e0010">&#39;</span>:app<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>rootProject.name = <span style="color:#e6db74">&#34;BlogTmp&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//修改后
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>include(<span style="color:#e6db74">&#34;:app&#34;</span>)
</span></span><span style="display:flex;"><span>rootProject.name = <span style="color:#e6db74">&#34;BlogTmp&#34;</span>
</span></span></code></pre></div></li>
<li>
<p>build.gradle(project)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#75715e">//修改前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// Top-level build file where you can add configuration options common to all sub-projects/modules.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>buildscript {
</span></span><span style="display:flex;"><span>    ext.kotlin_version = <span style="color:#e6db74">&#34;1.3.72&#34;</span>
</span></span><span style="display:flex;"><span>    repositories {
</span></span><span style="display:flex;"><span>        google()
</span></span><span style="display:flex;"><span>        jcenter()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    dependencies {
</span></span><span style="display:flex;"><span>        classpath <span style="color:#e6db74">&#34;com.android.tools.build:gradle:4.0.1&#34;</span>
</span></span><span style="display:flex;"><span>        classpath <span style="color:#e6db74">&#34;org.jetbrains.kotlin:kotlin-gradle-plugin:</span><span style="color:#e6db74">$kotlin</span><span style="color:#e6db74">_version&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// NOTE: Do not place your application dependencies here; they belong
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// in the individual module build.gradle files
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>allprojects {
</span></span><span style="display:flex;"><span>    repositories {
</span></span><span style="display:flex;"><span>        google()
</span></span><span style="display:flex;"><span>        jcenter()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>task clean(type: Delete) {
</span></span><span style="display:flex;"><span>    delete rootProject.buildDir
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//修改后
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// Top-level build file where you can add configuration options common to all sub-projects/modules.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>buildscript {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">val</span> kotlin_version = <span style="color:#e6db74">&#34;1.3.72&#34;</span>
</span></span><span style="display:flex;"><span>    repositories {
</span></span><span style="display:flex;"><span>        google()
</span></span><span style="display:flex;"><span>        jcenter()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    dependencies {
</span></span><span style="display:flex;"><span>        classpath (<span style="color:#e6db74">&#34;com.android.tools.build:gradle:4.0.1&#34;</span>)
</span></span><span style="display:flex;"><span>        classpath (<span style="color:#e6db74">&#34;org.jetbrains.kotlin:kotlin-gradle-plugin:</span><span style="color:#e6db74">$kotlin</span><span style="color:#e6db74">_version&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// NOTE: Do not place your application dependencies here; they belong
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// in the individual module build.gradle files
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>allprojects {
</span></span><span style="display:flex;"><span>    repositories {
</span></span><span style="display:flex;"><span>        google()
</span></span><span style="display:flex;"><span>        jcenter()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>tasks.register(<span style="color:#e6db74">&#34;clean&#34;</span>, Delete<span style="color:#f92672">::</span><span style="color:#66d9ef">class</span>) {
</span></span><span style="display:flex;"><span>    delete(rootProject.buildDir)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
<li>
<p>build.gradle(app)</p>
<p>修改前</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span>apply plugin: <span style="color:#960050;background-color:#1e0010">&#39;</span>com.android.application<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>apply plugin: <span style="color:#960050;background-color:#1e0010">&#39;</span>kotlin-android<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>apply plugin: <span style="color:#960050;background-color:#1e0010">&#39;</span>kotlin-android-extensions<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>android {
</span></span><span style="display:flex;"><span>    compileSdkVersion <span style="color:#ae81ff">29</span>
</span></span><span style="display:flex;"><span>    buildToolsVersion <span style="color:#e6db74">&#34;29.0.3&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    defaultConfig {
</span></span><span style="display:flex;"><span>        applicationId <span style="color:#e6db74">&#34;com.agiao.blogtmp&#34;</span>
</span></span><span style="display:flex;"><span>        minSdkVersion <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>        targetSdkVersion <span style="color:#ae81ff">29</span>
</span></span><span style="display:flex;"><span>        versionCode <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        versionName <span style="color:#e6db74">&#34;1.0&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        testInstrumentationRunner <span style="color:#e6db74">&#34;androidx.test.runner.AndroidJUnitRunner&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    buildTypes {
</span></span><span style="display:flex;"><span>        release {
</span></span><span style="display:flex;"><span>            minifyEnabled <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>            proguardFiles getDefaultProguardFile(<span style="color:#960050;background-color:#1e0010">&#39;</span>proguard-android-optimize.txt<span style="color:#960050;background-color:#1e0010">&#39;</span>), <span style="color:#960050;background-color:#1e0010">&#39;</span>proguard-rules.pro<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>dependencies {
</span></span><span style="display:flex;"><span>    implementation fileTree(dir: <span style="color:#e6db74">&#34;libs&#34;</span>, include: [<span style="color:#e6db74">&#34;*.jar&#34;</span>])
</span></span><span style="display:flex;"><span>    implementation <span style="color:#e6db74">&#34;org.jetbrains.kotlin:kotlin-stdlib:</span><span style="color:#e6db74">$kotlin</span><span style="color:#e6db74">_version&#34;</span>
</span></span><span style="display:flex;"><span>    implementation <span style="color:#960050;background-color:#1e0010">&#39;</span>androidx.core:core-ktx:<span style="color:#ae81ff">1.3</span>.<span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>    implementation <span style="color:#960050;background-color:#1e0010">&#39;</span>androidx.appcompat:appcompat:<span style="color:#ae81ff">1.1</span>.<span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>    implementation <span style="color:#960050;background-color:#1e0010">&#39;</span>androidx.constraintlayout:constraintlayout:<span style="color:#ae81ff">1.1</span>.<span style="color:#ae81ff">3</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>    testImplementation <span style="color:#960050;background-color:#1e0010">&#39;</span>junit:junit:<span style="color:#ae81ff">4.12</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>    androidTestImplementation <span style="color:#960050;background-color:#1e0010">&#39;</span>androidx.test.ext:junit:<span style="color:#ae81ff">1.1</span>.<span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>    androidTestImplementation <span style="color:#960050;background-color:#1e0010">&#39;</span>androidx.test.espresso:espresso-core:<span style="color:#ae81ff">3.2</span>.<span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>修改后</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span>plugins {
</span></span><span style="display:flex;"><span>    id(<span style="color:#e6db74">&#34;com.android.application&#34;</span>)
</span></span><span style="display:flex;"><span>    id(<span style="color:#e6db74">&#34;kotlin-android&#34;</span>)
</span></span><span style="display:flex;"><span>    id(<span style="color:#e6db74">&#34;kotlin-android-extensions&#34;</span>)
</span></span><span style="display:flex;"><span>    id(<span style="color:#e6db74">&#34;kotlin-kapt&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>android {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    compileSdkVersion(<span style="color:#a6e22e">Versions</span>.compileSdkVersion)
</span></span><span style="display:flex;"><span>    buildToolsVersion(<span style="color:#a6e22e">Versions</span>.buildToolsVersion)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    defaultConfig {
</span></span><span style="display:flex;"><span>        applicationId = <span style="color:#a6e22e">Versions</span>.applicationId
</span></span><span style="display:flex;"><span>        minSdkVersion(<span style="color:#a6e22e">Versions</span>.minSdkVersion)
</span></span><span style="display:flex;"><span>        targetSdkVersion(<span style="color:#a6e22e">Versions</span>.targetSdkVersion)
</span></span><span style="display:flex;"><span>        versionCode = <span style="color:#a6e22e">Versions</span>.versionCode
</span></span><span style="display:flex;"><span>        versionName = <span style="color:#a6e22e">Versions</span>.versionName
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        testInstrumentationRunner = <span style="color:#e6db74">&#34;androidx.test.runner.AndroidJUnitRunner&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    buildTypes {
</span></span><span style="display:flex;"><span>        getByName(<span style="color:#a6e22e">BuildType</span>.release) {
</span></span><span style="display:flex;"><span>            isMinifyEnabled = <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            proguardFiles(getDefaultProguardFile(<span style="color:#e6db74">&#34;proguard-android.txt&#34;</span>), <span style="color:#e6db74">&#34;proguard-rules.pro&#34;</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    compileOptions {
</span></span><span style="display:flex;"><span>        sourceCompatibility = <span style="color:#a6e22e">JavaVersion</span>.VERSION_1_8
</span></span><span style="display:flex;"><span>        targetCompatibility = <span style="color:#a6e22e">JavaVersion</span>.VERSION_1_8
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>dependencies {
</span></span><span style="display:flex;"><span>    implementation(fileTree(mapOf(<span style="color:#e6db74">&#34;dir&#34;</span> to <span style="color:#e6db74">&#34;libs&#34;</span>, <span style="color:#e6db74">&#34;include&#34;</span> to listOf(<span style="color:#e6db74">&#34;*.jar&#34;</span>))))
</span></span><span style="display:flex;"><span>    implementation(<span style="color:#a6e22e">Dependencies</span>.kotlinStd)
</span></span><span style="display:flex;"><span>    implementation(<span style="color:#a6e22e">Dependencies</span>.coreKTX)
</span></span><span style="display:flex;"><span>    implementation(<span style="color:#a6e22e">Dependencies</span>.constraintLayout)
</span></span><span style="display:flex;"><span>    implementation(<span style="color:#a6e22e">Dependencies</span>.appCompat)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    testImplementation(<span style="color:#a6e22e">Test</span>.junit)
</span></span><span style="display:flex;"><span>    androidTestImplementation(<span style="color:#a6e22e">Test</span>.junitTest)
</span></span><span style="display:flex;"><span>    androidTestImplementation(<span style="color:#a6e22e">Test</span>.espresso)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
</ul>
<p>修改的几个注意点：</p>
<ul>
<li><code>kts</code>文件中大多都是函数调用，所以需要加上括号，字符串是作为参数传进去的</li>
<li><code>project-build.gradle</code>中的<code>task</code>需要修改为新的写法</li>
<li><code>app-build.gradle</code>中的<code>fileTree</code>需要修改为新的写法</li>
</ul>
<p>在上述的修改中，使用到了<code>Dependencies.appCompat</code>这种调用方式，<code>Dependencies</code>就是我们在buildSrc中定义的统一管理文件。</p>
<h3 id="新建buildsrc模块">新建buildSrc模块</h3>
<p>在Android Studio中，将目录切换为<code>Project</code>，然后新建<code>buildSrc</code>文件夹，在<code>buildSrc</code>文件夹下新建<code>build.gradle.kts</code>文件，然后填入下面的代码，点击<code>sync now</code>进行同步。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span>plugins {
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">`</span>kotlin-dsl<span style="color:#960050;background-color:#1e0010">`</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>repositories{
</span></span><span style="display:flex;"><span>    jcenter()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>同步完成之后，<code>buildSrc</code>就变成了和<code>app</code>一样的一个<code>module</code>。然后在<code>buildSrc</code>文件夹上右键-新建文件夹-选择<code>src/main/java</code>，接下来就可以将我们的依赖写在该文件下的文件中了。</p>
<h3 id="新建统一依赖管理文件">新建统一依赖管理文件</h3>
<p>在上述的<code>src/main/java</code>文件夹中新建Dependencies.kt文件（文件名可以任意取）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Dependencies</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> kotlinStd = <span style="color:#e6db74">&#34;org.jetbrains.kotlin:kotlin-stdlib:</span><span style="color:#e6db74">${Versions.kotlinVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> coreKTX = <span style="color:#e6db74">&#34;androidx.core:core-ktx:</span><span style="color:#e6db74">${Versions.coreKTX}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> appCompat = <span style="color:#e6db74">&#34;androidx.appcompat:appcompat:</span><span style="color:#e6db74">${Versions.appCompact}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> constraintLayout =
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;androidx.constraintlayout:constraintlayout:</span><span style="color:#e6db74">${Versions.constraintLayout}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> roomRuntime = <span style="color:#e6db74">&#34;androidx.room:room-runtime:</span><span style="color:#e6db74">${Versions.roomVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> roomCompiler = <span style="color:#e6db74">&#34;androidx.room:room-compiler:</span><span style="color:#e6db74">${Versions.roomVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> roomCoroutines = <span style="color:#e6db74">&#34;androidx.room:room-ktx:</span><span style="color:#e6db74">${Versions.roomVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> liveData = <span style="color:#e6db74">&#34;androidx.lifecycle:lifecycle-viewmodel-ktx:</span><span style="color:#e6db74">${Versions.lifeCycleVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> viewModel = <span style="color:#e6db74">&#34;androidx.lifecycle:lifecycle-livedata-ktx:</span><span style="color:#e6db74">${Versions.lifeCycleVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> lifeCycleCompiler =
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;androidx.lifecycle:lifecycle-compiler:</span><span style="color:#e6db74">${Versions.lifeCycleVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> material = <span style="color:#e6db74">&#34;com.google.android.material:material:</span><span style="color:#e6db74">${Versions.materialVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Versions</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> compileSdkVersion = <span style="color:#ae81ff">29</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> buildToolsVersion = <span style="color:#e6db74">&#34;29.0.3&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> applicationId = <span style="color:#e6db74">&#34;com.agiao.blogtmp&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> minSdkVersion = <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> targetSdkVersion = <span style="color:#ae81ff">29</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> versionCode = <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> versionName = <span style="color:#e6db74">&#34;1.0&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> kotlinVersion = <span style="color:#e6db74">&#34;1.3.72&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> coreKTX = <span style="color:#e6db74">&#34;1.3.0&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> appCompact = <span style="color:#e6db74">&#34;1.1.0&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> constraintLayout = <span style="color:#e6db74">&#34;2.0.0-rc1&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> roomVersion = <span style="color:#e6db74">&#34;2.2.5&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> lifeCycleVersion = <span style="color:#e6db74">&#34;2.2.0&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> materialVersion = <span style="color:#e6db74">&#34;1.1.0&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> junit = <span style="color:#e6db74">&#34;4.12&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> junitTest = <span style="color:#e6db74">&#34;1.1.1&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> espresso = <span style="color:#e6db74">&#34;3.2.0&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Test</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> testRoom = <span style="color:#e6db74">&#34;androidx.room:room-testing:</span><span style="color:#e6db74">${Versions.roomVersion}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> junit = <span style="color:#e6db74">&#34;junit:junit:</span><span style="color:#e6db74">${Versions.junit}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> junitTest = <span style="color:#e6db74">&#34;androidx.test.ext:junit:</span><span style="color:#e6db74">${Versions.junitTest}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> espresso = <span style="color:#e6db74">&#34;androidx.test.espresso:espresso-core:</span><span style="color:#e6db74">${Versions.espresso}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">object</span> <span style="color:#a6e22e">BuildType</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> release = <span style="color:#e6db74">&#34;release&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">val</span> debug = <span style="color:#e6db74">&#34;debug&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>上述的依赖库可以根据自己的需要调整，也可以把每个<code>object</code>都提取为单独的文件，这部分就是根据个人喜好自己调整。</p>
<p>至此，我们的<code>build.gradle</code>就完全改造完成了。现在就可以在<code>build.gradle.kts</code>中使用Kotlin的语法进行依赖导入了，同时还能使用Kotlin的自动补全功能，更方便的管理和导入依赖了。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>AlertDialog中使用WebView显示内容</title>
      <link>https://houzixiashanxiedaima.github.io/posts/alertdialog%E4%B8%AD%E4%BD%BF%E7%94%A8webview%E6%98%BE%E7%A4%BA%E5%86%85%E5%AE%B9/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/alertdialog%E4%B8%AD%E4%BD%BF%E7%94%A8webview%E6%98%BE%E7%A4%BA%E5%86%85%E5%AE%B9/</guid>
      <description>&lt;p&gt;在最近的开发中，需要用到在AlertDialog中通过WebView显示内容，但是在实际操作过程中，发现有一个小小的问题需要注意一下，在此也记录一下。
首先放出代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; AlertDialog&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt; builder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Builder&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setView&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;layout&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;new_dialog_user_guide&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        View view &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getLayoutInflater&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inflate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;layout&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;new_dialog_user_guide&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WebView webView &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;WebView&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; view&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;web_user_guide&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        webView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;loadUrl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.baidu.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        builder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面这段代码，看似是没问题的，但是在实际显示过程中，WebView一直都是空白页面，啥也没有。开始排查问题：&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>在最近的开发中，需要用到在AlertDialog中通过WebView显示内容，但是在实际操作过程中，发现有一个小小的问题需要注意一下，在此也记录一下。
首先放出代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span> AlertDialog<span style="color:#f92672">.</span><span style="color:#a6e22e">Builder</span> builder <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Builder<span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span><span style="color:#a6e22e">setView</span><span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">layout</span><span style="color:#f92672">.</span><span style="color:#a6e22e">new_dialog_user_guide</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        View view <span style="color:#f92672">=</span> getLayoutInflater<span style="color:#f92672">().</span><span style="color:#a6e22e">inflate</span><span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">layout</span><span style="color:#f92672">.</span><span style="color:#a6e22e">new_dialog_user_guide</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        WebView webView <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>WebView<span style="color:#f92672">)</span> view<span style="color:#f92672">.</span><span style="color:#a6e22e">findViewById</span><span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">web_user_guide</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        webView<span style="color:#f92672">.</span><span style="color:#a6e22e">loadUrl</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;http://www.baidu.com&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        builder<span style="color:#f92672">.</span><span style="color:#a6e22e">show</span><span style="color:#f92672">();</span>
</span></span></code></pre></div><p>上面这段代码，看似是没问题的，但是在实际显示过程中，WebView一直都是空白页面，啥也没有。开始排查问题：</p>
<h4 id="网络问题">网络问题</h4>
<p>一开始以为是网络问题，于是将<code>http://www.baidu.com</code>换成本地的assets中的文件，更换后关键代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>  webView<span style="color:#f92672">.</span><span style="color:#a6e22e">loadUrl</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;file:///android_asset/test.html&#34;</span><span style="color:#f92672">);</span>
</span></span></code></pre></div><p>更换为本地文件之后，WebView中显示的依然是空白页面，啥也没有。继续排查</p>
<h4 id="文件问题">文件问题</h4>
<p>是否是这个HTML的文件有问题，如果直接加载HTML字符串，问题能否结局，继续修改关键代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>webView<span style="color:#f92672">.</span><span style="color:#a6e22e">loadData</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&lt;html&gt;这是一段HTML的代码&lt;/html&gt;&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;text/html&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;utf-8&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//或者也可以这样
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>webView<span style="color:#f92672">.</span><span style="color:#a6e22e">loadDataWithBaseURL</span><span style="color:#f92672">(</span><span style="color:#66d9ef">null</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;&lt;html&gt;这是一段html代码&lt;/html&gt;&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;text/html&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;utf-8&#34;</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">);</span>
</span></span></code></pre></div><p>更改成直接加载HTML字符串之后，WebView还是现实空白页面，啥也没有。最后想来想去，是不是因为我们将WebView放在了AlertDialog中，所以导致我们的WebView显示有问题。于是我们将WebView单独移出来，结果发现可以显示出正确的内容。那也就是说这个问题出在AlertDialog身上了，难道WebView不能放在AlertDialog中吗。显然不是的，于是参考了官方教程之后，终于发现了问题所在。</p>
<h4 id="震惊导致webview显示空白的罪魁祸首竟然是">震惊！导致WebView显示空白的罪魁祸首竟然是……</h4>
<p>先直接贴出可以运行的正确代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>AlertDialog<span style="color:#f92672">.</span><span style="color:#a6e22e">Builder</span> builder <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Builder<span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        View view <span style="color:#f92672">=</span> getLayoutInflater<span style="color:#f92672">().</span><span style="color:#a6e22e">inflate</span><span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">layout</span><span style="color:#f92672">.</span><span style="color:#a6e22e">new_dialog_user_guide</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        WebView webView <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>WebView<span style="color:#f92672">)</span> view<span style="color:#f92672">.</span><span style="color:#a6e22e">findViewById</span><span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">web_user_guide</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        webView<span style="color:#f92672">.</span><span style="color:#a6e22e">setWebViewClient</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> WebViewClient<span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>        webView<span style="color:#f92672">.</span><span style="color:#a6e22e">loadUrl</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;http://www.baidu.com&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        builder<span style="color:#f92672">.</span><span style="color:#a6e22e">setView</span><span style="color:#f92672">(</span>view<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        builder<span style="color:#f92672">.</span><span style="color:#a6e22e">setPositiveButton</span><span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">string</span><span style="color:#f92672">.</span><span style="color:#a6e22e">confirm</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        builder<span style="color:#f92672">.</span><span style="color:#a6e22e">show</span><span style="color:#f92672">();</span>
</span></span></code></pre></div><p>问题就出在这个<code>setView</code>身上，我们的&quot;错误代码&quot;是先setView，然后再使用webview进行load，但是正确的顺序应该是先使用webview进行load，然后再setView。
问题到此排查结束。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Android 5.0透明状态栏设置</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android-5.0%E9%80%8F%E6%98%8E%E7%8A%B6%E6%80%81%E6%A0%8F%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/android-5.0%E9%80%8F%E6%98%8E%E7%8A%B6%E6%80%81%E6%A0%8F%E8%AE%BE%E7%BD%AE/</guid>
      <description>&lt;p&gt;这篇文章是针对Android 5.0及以上版本的系统进行透明的状态栏设置，Android 5.0以下的系统暂不在本篇文章的讨论范围之内。&lt;/p&gt;
&lt;h2 id=&#34;android-50透明状态栏普通界面&#34;&gt;Android 5.0透明状态栏——普通界面&lt;/h2&gt;
&lt;p&gt;先贴出MainActivity布局代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;RelativeLayout&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:tools=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/tools&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:background=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@color/colorPrimary&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:fitsSystemWindows=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;tools:context=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stephen.com.material_design.NoteActivity&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;include&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;layout=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@layout/app_bar_note&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      <content:encoded><![CDATA[<p>这篇文章是针对Android 5.0及以上版本的系统进行透明的状态栏设置，Android 5.0以下的系统暂不在本篇文章的讨论范围之内。</p>
<h2 id="android-50透明状态栏普通界面">Android 5.0透明状态栏——普通界面</h2>
<p>先贴出MainActivity布局代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;RelativeLayout</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:android=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res/android&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:tools=</span><span style="color:#e6db74">&#34;http://schemas.android.com/tools&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:background=</span><span style="color:#e6db74">&#34;@color/colorPrimary&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:fitsSystemWindows=</span><span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">tools:context=</span><span style="color:#e6db74">&#34;stephen.com.material_design.NoteActivity&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;include</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">layout=</span><span style="color:#e6db74">&#34;@layout/app_bar_note&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;match_parent&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/RelativeLayout&gt;</span>
</span></span></code></pre></div><p>上面的代码中，最主要的两行分别是：</p>
<ul>
<li>设置最外层布局背景色为Toolbar的颜色：<code>android:background=&quot;@color/colorPrimary&quot;</code></li>
<li>设置Toolbar不扩展到状态栏：<code>android:fitsSystemWindows=&quot;true&quot;</code>
在布局文件中设置完毕后，还需要在<code>onCreate()</code>里面加上如下的代码：</li>
<li>设置状态栏颜色为透明：<code>getWindow().setStatusBarColor(Color.TRANSPARENT);</code></li>
<li>设置状态栏和APP的位置关系：<code>getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);</code></li>
</ul>
<blockquote>
<p>setSystemUiVisibility(int visibility)传入的实参类型如下：</p>
<ol>
<li>View.SYSTEM_UI_FLAG_VISIBLE：显示状态栏，Activity不全屏显示(恢复到有状态的正常情况)。</li>
<li>View.INVISIBLE：隐藏状态栏，同时Activity会伸展全屏显示。</li>
<li>View.SYSTEM_UI_FLAG_FULLSCREEN：Activity全屏显示，且状态栏被隐藏覆盖掉。</li>
<li>View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN：Activity全屏显示，但状态栏不会被隐藏覆盖，状态栏依然可见，Activity顶端布局部分会被状态遮住。</li>
</ol>
</blockquote>
<p>主要需要用到的参数就是以上的几个，其他的参数在实际的开发中用的相对较少，这里也就不列举出来了。
通过上面的两个地方的代码设置之后，我们的APP就可以实现透明状态栏的效果了。</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-c81ed81629099945.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="普通界面的透明状态栏"  />
</p>
<p>以上就是普通的界面设置透明状态栏的方法。</p>
<h2 id="android-50透明状态栏带drawerlayout界面">Android 5.0透明状态栏——带DrawerLayout界面</h2>
<p>带有DrawerLayout的界面设置透明状态栏，最终效果是和网易云音乐一样的，方法其实和上面的差不多，但是有个小的地方需要注意，在这里我还是把代码和方法都完整的讲一遍。
带有DrawerLayout的布局文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;android.support.v4.widget.DrawerLayout</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:android=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res/android&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:app=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res-auto&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:tools=</span><span style="color:#e6db74">&#34;http://schemas.android.com/tools&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/drawer_layout&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:background=</span><span style="color:#e6db74">&#34;@color/colorPrimary&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">tools:openDrawer=</span><span style="color:#e6db74">&#34;start&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;LinearLayout</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:fitsSystemWindows=</span><span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:orientation=</span><span style="color:#e6db74">&#34;vertical&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;include</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">layout=</span><span style="color:#e6db74">&#34;@layout/app_bar_main&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/LinearLayout&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;android.support.design.widget.NavigationView</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_view&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;wrap_content&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_gravity=</span><span style="color:#e6db74">&#34;start&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:fitsSystemWindows=</span><span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">app:headerLayout=</span><span style="color:#e6db74">&#34;@layout/nav_header_main&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">app:menu=</span><span style="color:#e6db74">&#34;@menu/activity_main_drawer&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/android.support.v4.widget.DrawerLayout&gt;</span>
</span></span></code></pre></div><p>在这里说一下要注意的几个点：</p>
<ol>
<li>这个<code>&lt;LinearLayout&gt; ... &lt;/LinearLayout&gt;</code>的作用，我之前没有用这个<code>&lt;LinearLayout&gt;</code>包裹<code>Toolbar</code>，结果怎么设置，都不能实现非常完美的透明状态栏，要么是statusbar颜色问题，要么是statusbar和NavigationView颜色不统一的问题。后来查找了很多资料，在一个小角落里面发现了，需要外层用<code>&lt;LinearLayout&gt;</code>包裹一下，这样的话就可以非常完美的显示出网易云音乐的效果了。</li>
<li><code>NavigationView</code>里面设置的<code> android:fitsSystemWindows=&quot;true&quot;</code>，这个也是为了让侧边栏即抽屉能够和状态栏颜色统一。</li>
<li><code>&lt;include  ... /&gt;</code>里面就是正常的设置<code>Toolbar</code>什么的了，但是要注意在<code>Toolbar</code>布局的最外层中也记得要添加<code> android:fitsSystemWindows=&quot;true&quot;</code></li>
</ol>
<p>在布局文件中设置完毕之后，接着就是在代码中设置了，在<code>onCreate()</code>里面加上如下的代码：</p>
<ul>
<li>设置状态栏颜色为透明：<code>getWindow().setStatusBarColor(Color.TRANSPARENT);</code></li>
<li>设置状态栏和APP的位置关系：<code>getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);</code></li>
</ul>
<p>将以上的所有代码都设置完毕之后，最终呈现的效果如下：</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-d795e4d2e40a3f9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="没有打开抽屉.png"  />
</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-911543b2ad913c29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开抽屉"  />
</p>
<p>至此，我们已经在Android 5.0上实现透明状态栏。但是对于这样的透明状态栏，我个人是不推荐的。因为我们进行的Android开发，而这个透明状态栏却给人一种IOS的风格，Android开发就应该从方方面面都能够体现出Android的特性。虽然在Android 5.0之前，Android的UI风格一直都惨不忍睹，但是我们一路都坚持下来了，而在Android 5.0之后，因为Material Design的推出，Android的颜值可以说是提升了非常多。所以我们开发人员更应该开发Pure Android的程序，而不是模仿和抄袭IOS的各种风格。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Android中输出HTML格式下的文字</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android%E4%B8%AD%E8%BE%93%E5%87%BAhtml%E6%A0%BC%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%96%87%E5%AD%97/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/android%E4%B8%AD%E8%BE%93%E5%87%BAhtml%E6%A0%BC%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%96%87%E5%AD%97/</guid>
      <description>&lt;h1 id=&#34;android中输出html格式下的文字&#34;&gt;Android中输出HTML格式下的文字&lt;/h1&gt;
&lt;p&gt;在Android中，我们经常会用到TextView这个控件，在使用的过程中，我们用到最多的方法就是setText()，单纯的使用基本上能够满足我们日常的需求，但是有时候我们需要对文字进行一些处理，比如说加粗、斜体、下划线等等，这些也都是可以通过Android提供的原生方法完成。但是如果我们需要实现下面的效果呢：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://upload-images.jianshu.io/upload_images/2524102-92f803de79292a20.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;图1&#34;  /&gt;
&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="android中输出html格式下的文字">Android中输出HTML格式下的文字</h1>
<p>在Android中，我们经常会用到TextView这个控件，在使用的过程中，我们用到最多的方法就是setText()，单纯的使用基本上能够满足我们日常的需求，但是有时候我们需要对文字进行一些处理，比如说加粗、斜体、下划线等等，这些也都是可以通过Android提供的原生方法完成。但是如果我们需要实现下面的效果呢：</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-92f803de79292a20.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1"  />
</p>
<h2 id="html下的文字解析快速版">HTML下的文字解析(快速版)</h2>
<p>从图片上我们可以看到，这段文字分别有<code>两种大小，三种颜色</code>。我们当然可以定义多个TextView来实现这样的效果，但是如果我们的文字变化较多，那么定义多个TextView也非常的麻烦。那么接下来我们就来介绍一个比较简单的方法：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Java" data-lang="Java"><span style="display:flex;"><span>String str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;恭喜您！您的手机跑分为&lt;font color=&#39;#F50057&#39;&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;888888分&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/font&gt;，已经超过全国&lt;font color=&#39;#00E676&#39;&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;99%&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/font&gt;的Android手机。&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>tv<span style="color:#f92672">.</span><span style="color:#a6e22e">setText</span><span style="color:#f92672">(</span>Html<span style="color:#f92672">.</span><span style="color:#a6e22e">fromHtml</span><span style="color:#f92672">(</span>str<span style="color:#f92672">));</span>
</span></span></code></pre></div><p>上面的代码中，我们用到了一个方法<code>Html.fromHtml()</code>，这个方法是Android中专门用来解析HTML格式的一个方法，我们可以将任意的HTML格式下的代码通过此方法解析，最后得到我们需要的结果。
通过上面的方法，我们就可以实现在<code>setText()</code>中使用各种带HTML效果的文字了。这样应该能够实现我们开发中98%的需求了，那么还有1-2%的需求是什么呢？</p>
<h2 id="html下的文字解析多语言支持">HTML下的文字解析(多语言支持)</h2>
<p>比如说我们现在的APP需要兼容多种语言，包括中文、法语、英语、日语等等。在平时的开发过程中，我们都知道多语言的实现可以通过不同<code>values</code>文件夹下的<code>string.xml</code>文件来实现。我们这里就以中文来举例，看看我们如何在<code>string.xml</code>文件中定义HTML格式的文字。
首先我们来尝试将我们上面定义的<code>str</code>中的字符串直接放到<code>string.xml</code>中。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;string</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;test_string&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>      恭喜您！您的手机跑分为<span style="color:#f92672">&lt;font</span> <span style="color:#a6e22e">color=</span><span style="color:#e6db74">&#39;#F50057&#39;</span><span style="color:#f92672">&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;</span>888888分<span style="color:#f92672">&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/font&gt;</span>
</span></span><span style="display:flex;"><span>      ，已经超过全国<span style="color:#f92672">&lt;font</span> <span style="color:#a6e22e">color=</span><span style="color:#e6db74">&#39;#00E676&#39;</span><span style="color:#f92672">&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;</span>99%<span style="color:#f92672">&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/font&gt;</span>的Android手机。
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&lt;/string&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>tv<span style="color:#f92672">.</span><span style="color:#a6e22e">setText</span><span style="color:#f92672">(</span>Html<span style="color:#f92672">.</span><span style="color:#a6e22e">fromHtml</span><span style="color:#f92672">(</span>getString<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">string</span><span style="color:#f92672">.</span><span style="color:#a6e22e">test_string</span><span style="color:#f92672">)));</span>
</span></span></code></pre></div><p>运行程序，结果如下：</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-d8922d1d6ea9bc47.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2"  />
</p>
<p>并没有出现我们预期的效果，HTML格式并没有被解析出来。这是什么原因呢？原因就在于我们使用的<code>getString()</code>方法，官方对于这个方法的解释如下：</p>
<blockquote>
<p>Return the string value associated with a particular resource ID. It will be stripped of any styled text information.
返回与特定资源ID相关联的字符串值，它将删除任何样式的文本信息。</p>
</blockquote>
<p>那么也就是说我们的HTML格式被<code>getString()</code>方法给删除了，所以我们的文字才会变成普通的字符串。要解决这个问题，我们需要将我们的<code>string.xml</code>中的字符串使用<code>&lt;![CDATA[...your html...]]&gt;</code>包裹起来，被<code>CDATA</code>包裹起来的字符都会被解析器忽略，也就是说<code>CDATA</code>中的HTML格式将会被原封不动的保留下来，最终交给我们的<code>Html.fromHtml()</code>进行解析。那么我们来尝试以下，将我们<code>string.xml</code>中的字符串改为如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;string</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;test_string&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">&lt;![CDATA[
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">            恭喜您！您的手机跑分为&lt;font color=&#39;#F50057&#39;&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;888888分&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/font&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">            ，已经超过全国&lt;font color=&#39;#00E676&#39;&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;99%&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/font&gt;的Android手机。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">        ]]&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/string&gt;</span>
</span></span></code></pre></div><p>编译运行，结果编译时报错：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span>Error:(17, 5) Apostrophe not preceded by \ (in  鎭枩鎮紒鎮ㄧ殑鎵嬫満璺戝垎涓?<span style="color:#f92672">&lt;font</span> <span style="color:#a6e22e">color=</span><span style="color:#e6db74">&#39;#F50057&#39;</span><span style="color:#f92672">&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;</span>888888鍒?<span style="color:#f92672">&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/font&gt;</span>
</span></span></code></pre></div><p>报错的关键词为：</p>
<blockquote>
<p>Apostrophe not preceded by <br>
撇号前面没有\</p>
</blockquote>
<p>通过上面的这个报错信息我们可以知道，这是因为<code>'</code>没有进行转义，那么我根据报错信息将所有的单引号进行转义。最后的结果如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;string</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;test_string&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>       <span style="color:#75715e">&lt;![CDATA[
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">           恭喜您！您的手机跑分为&lt;font color=\&#39;#F50057\&#39;&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;888888分&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/font&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">           ，已经超过全国&lt;font color=\&#39;#00E676\&#39;&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;99%&lt;/big&gt;&lt;/big&gt;&lt;/big&gt;&lt;/font&gt;的Android手机。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       ]]&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&lt;/string&gt;</span>
</span></span></code></pre></div><p>最后我们再次运行，得到的就是和我们文章开头一样的结果。
关于Android中HTML格式下的文字解析大概就是这样了，如果大家还有其他的方法，欢迎交流。</p>
<h2 id="后记">后记</h2>
<p>最后附上一个在尝试过程中遇到的错误，本来想情景重现的，结果怎么样都无法再遇到那个错误了。如果有遇到这个错误的朋友，可以尝试下面的解决办法。
错误：</p>
<blockquote>
<p>Multiple annotations found at this line:</p>
</blockquote>
<ul>
<li>error: Multiple substitutions specified in non-positional format; did you mean to add<br>
the formatted=&ldquo;false&rdquo; attribute?</li>
<li>error: Unexpected end tag string</li>
</ul>
<p>导致错误的可能原因及解决方法：</p>
<ol>
<li>string.xml中的字符串中有<code>%</code>，对<code>%</code>进行转义，即改为<code>\%</code>；或者使用两个百分号表示一个，即改为<code>%%</code>。</li>
<li>string.xml中的字符串被格式化了，导致解析器解析出错，解决办法为<code>&lt;string name=&quot;test_string&quot; formatted=&quot;false&quot;&gt;</code>，将formatted设置为false即可。</li>
</ol>]]></content:encoded>
    </item>
    
    <item>
      <title>Android光速打包</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android%E5%85%89%E9%80%9F%E6%89%93%E5%8C%85/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/android%E5%85%89%E9%80%9F%E6%89%93%E5%8C%85/</guid>
      <description>&lt;h1 id=&#34;快速打包插件-packer-ng-plugin-使用心得&#34;&gt;快速打包插件 packer-ng-plugin 使用心得&lt;/h1&gt;
&lt;p&gt;首先放出这个工具的Github地址：https://github.com/mcxiaoke/packer-ng-plugin 在这个工具里面，作者已经非常详细的介绍了该如何使用这个打包工具，在此我主要记录一下我使用这个打包工具的过程。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="快速打包插件-packer-ng-plugin-使用心得">快速打包插件 packer-ng-plugin 使用心得</h1>
<p>首先放出这个工具的Github地址：https://github.com/mcxiaoke/packer-ng-plugin 在这个工具里面，作者已经非常详细的介绍了该如何使用这个打包工具，在此我主要记录一下我使用这个打包工具的过程。</p>
<h2 id="导入依赖库文件">导入依赖库文件</h2>
<p>这个工具导入依赖库文件有两个地方</p>
<ul>
<li>在项目的根目录中的<code>build.gradle</code>添加依赖</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>buildscript <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">......</span>
</span></span><span style="display:flex;"><span>    dependencies<span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// add packer-ng
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        classpath <span style="color:#e6db74">&#39;com.mcxiaoke.gradle:packer-ng:1.0.7&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>在APP中的<code>build.gradle</code>添加依赖</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>apply plugin: <span style="color:#e6db74">&#39;packer&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>dependencies <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    compile <span style="color:#e6db74">&#39;com.mcxiaoke.gradle:packer-helper:1.0.7&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>android <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    signingConfigs <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      release <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 同时满足下面两个条件才需要此配置
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// 1. Gradle版本 &gt;= 2.14.1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// 2. Android Gradle Plugin 版本 &gt;= 2.2.0
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// 作用是只使用旧版签名，禁用V2版签名模式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// 兼容7.0版本的Android系统才需要,否则不需要
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        v2SigningEnabled <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>##这里有个非常重要的信息大家要注意一下，就是<code>packer-helper:1.0.7</code>和<code>packer-ng:1.0.7</code>这两个地方的版本号一定要保持一致##</p>
<ul>
<li>在APP的<code>build.gradle</code>中配置签名信息</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>signingConfigs <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>       release <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>           storeFile <span style="color:#a6e22e">file</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;D:/keystore/release.keystore&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>           storePassword <span style="color:#e6db74">&#34;release&#34;</span>
</span></span><span style="display:flex;"><span>           keyAlias <span style="color:#e6db74">&#34;release123&#34;</span>
</span></span><span style="display:flex;"><span>           keyPassword <span style="color:#e6db74">&#34;release123&#34;</span>
</span></span><span style="display:flex;"><span>       <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>       debug <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">//debug 的签名信息
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>       <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">}</span>
</span></span></code></pre></div><ul>
<li>在APP的<code>build.gradle</code>中添加<code>buildTypes</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>buildTypes <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>       release <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">......</span>
</span></span><span style="display:flex;"><span>           <span style="color:#75715e">//这里是配置签名的关键信息
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>           signingConfig signingConfigs<span style="color:#f92672">.</span><span style="color:#a6e22e">release</span>
</span></span><span style="display:flex;"><span>       <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>       debug <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">......</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">//这里是配置签名的关键信息
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>           signingConfig signingConfigs<span style="color:#f92672">.</span><span style="color:#a6e22e">debug</span>
</span></span><span style="display:flex;"><span>       <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>以上的工作完成之后,我们的配置基本上就完成了,但是这个工具的作者在文档的最后说了</p>
<blockquote>
<ul>
<li>注意事项
不支持productFlavors中定义的条件编译变量，不支持修改AndroidManifest
如果你的项目有多个productFlavors，默认只会用第一个flavor生成的APK文件作为打包工具的输入参数，忽略其它flavor生成的apk，代码里用的是 theVariant.outputs[0].outputFile。如果你想指定使用某个flavor来生成渠道包，可以用 apkFlavor1Release，apkFlavor2Beta这样的名字，示例（假设flavor名字是Intel）：./gradlew -Pmarket=markets.txt clean apkIntelRelease</li>
</ul>
</blockquote>
<p>注意事项中给我们说明了两件事情:</p>
<ol>
<li>不支持<code>productFlavors</code>中定义的条件编译</li>
<li>不支持修改<code>AndroidManifest</code>文件</li>
</ol>
<p>那么这个时候就会有个问题,如果我们需要多渠道打包怎么办?</p>
<h2 id="多渠道打包">多渠道打包</h2>
<p>首先在项目的根目录中添加一个<code>markets.txt</code> 文件,文件中每一行表示一个渠道,这个工具会自动识别空行和不符合规定的行,每一行的<code>渠道</code>和<code>注释</code>之间用**#**隔开,但是也可以没有注释,比如我可以在<code>markets.txt</code> 中进行如下定义:</p>
<pre tabindex="0"><code>Google#google channel
Baidu#baidu channel
Test
</code></pre><p>在进行了如上的定义之后,我们就可以进行多渠道打包,多渠道打包时我个人还是比较喜欢用<code>Gradle</code>来进行打包，在项目的根目录中执行<code>Gradle</code>命令行：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gradlew -Pmarket<span style="color:#f92672">=</span>markets.txt clean apkRelease
</span></span></code></pre></div><p>但是这个时候如果我们有对友盟的配置,就不能使用友盟官方SDK文档中推荐的方法,友盟官方推荐的方法是在AndroidManifest中设置各种配置信息,但是因为这个工具的限制,我们需要在代码中进行配置.</p>
<h2 id="配置友盟的多渠道信息">配置友盟的多渠道信息</h2>
<p>首先我们在程序的入口处,一般都是<code>ApplicationMain</code>中的<code>onCreate()</code>中进行如下的配置:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String APP_KEY <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;YOUR_APP_KEY&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> MobclickAgent<span style="color:#f92672">.</span><span style="color:#a6e22e">UMAnalyticsConfig</span> mUMAnalyticsConfig<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onCreate</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">onCreate</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        setChannelID<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setChannelID</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">final</span> String channelID <span style="color:#f92672">=</span> PackerNg<span style="color:#f92672">.</span><span style="color:#a6e22e">getMarket</span><span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>          mUMAnalyticsConfig <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> MobclickAgent<span style="color:#f92672">.</span><span style="color:#a6e22e">UMAnalyticsConfig</span><span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">,</span> APP_KEY<span style="color:#f92672">,</span> channelID<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>          MobclickAgent<span style="color:#f92672">.</span><span style="color:#a6e22e">startWithConfigure</span><span style="color:#f92672">(</span>mUMAnalyticsConfig<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>当然最后别忘记在<code>AndroidManifest.xml</code>的<code>application</code>结点中加上<code>android:name=&quot;.Application.ApplicationMain&quot;</code></p>
<p>进行了以上的所有设置之后,我们就可以享受光速打包了,根据我亲测,打50个包的速度是1分钟左右,这一分钟包括检查插件和编译信息等等.其实开始打第0个包到第49个包大概是10多秒钟吧。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Android开发之View坐标问题</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android%E5%BC%80%E5%8F%91%E4%B9%8Bview%E5%9D%90%E6%A0%87%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/android%E5%BC%80%E5%8F%91%E4%B9%8Bview%E5%9D%90%E6%A0%87%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;在我们日常的开发过程中，接触最多的就是View了，各种各样的View，但是我们可能对View的知识了解一些，但是还是感觉有些地方不太够，尤其是View的坐标问题。我们今天就来看看这个View的坐标到底是怎么定义的。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>在我们日常的开发过程中，接触最多的就是View了，各种各样的View，但是我们可能对View的知识了解一些，但是还是感觉有些地方不太够，尤其是View的坐标问题。我们今天就来看看这个View的坐标到底是怎么定义的。</p>
<p>别的不说，先上代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;RelativeLayout</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:android=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res/android&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:app=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res-auto&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:tools=</span><span style="color:#e6db74">&#34;http://schemas.android.com/tools&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">app:layout_behavior=</span><span style="color:#e6db74">&#34;@string/appbar_scrolling_view_behavior&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">tools:context=</span><span style="color:#e6db74">&#34;stephen.com.bugstest.MainActivity&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">tools:showIn=</span><span style="color:#e6db74">&#34;@layout/activity_main&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/tv_test&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;wrap_content&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;wrap_content&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_centerInParent=</span><span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:background=</span><span style="color:#e6db74">&#34;@color/colorPrimary&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:padding=</span><span style="color:#e6db74">&#34;10dp&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;测试文本&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:textColor=</span><span style="color:#e6db74">&#34;#FFFFFF&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/RelativeLayout&gt;</span>
</span></span></code></pre></div><p>上面这个是一个简单布局文件，这个布局文件对应的<code>坐标信息</code>：</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-c83b13d3a71e882f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TextView的坐标信息"  />
</p>
<blockquote>
<p>图画的很粗糙，意思表达到了就行。
win10 下有什么好的画这种图的软件也可以推荐下。</p>
</blockquote>
<p>上面图中，外层红色框表示的RelativeLayout，里面的蓝色实心矩形表示的是TextView。图中的标明的坐标信息解释如下：</p>
<blockquote>
<p>getTop()表示Textview上边缘距离父布局上边的距离</p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Android开发使用lambda表达式</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/android%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>&lt;p&gt;在Java9即将发布之际，我们来讲讲如何使用Java8的新特性&amp;ndash;&amp;gt;lambda表达式。lambda表达式可以让我们的代码非常简洁，提高代码的可读性，那么如何在Android开发中来使用lambda表达式呢。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>在Java9即将发布之际，我们来讲讲如何使用Java8的新特性&ndash;&gt;lambda表达式。lambda表达式可以让我们的代码非常简洁，提高代码的可读性，那么如何在Android开发中来使用lambda表达式呢。</p>
<ol>
<li>
<p>在项目根目录的build.gradle中添加classpath</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>buildscript <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    repositories <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        jcenter<span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>        mavenCentral<span style="color:#f92672">()</span> <span style="color:#75715e">//添加
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    dependencies <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>       	<span style="color:#960050;background-color:#1e0010">……</span>
</span></span><span style="display:flex;"><span>        classpath <span style="color:#e6db74">&#39;me.tatarka:gradle-retrolambda:3.2.5&#39;</span>  <span style="color:#75715e">//添加
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>在项目module的build.gradle中添加</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>apply plugin: <span style="color:#e6db74">&#39;me.tatarka.retrolambda&#39;</span><span style="color:#75715e">//引用lambda插件
</span></span></span></code></pre></div></li>
<li>
<p>在项目module的build.gradle中添加</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>android <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>         <span style="color:#75715e">//设置java版本
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        compileOptions <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            sourceCompatibility JavaVersion<span style="color:#f92672">.</span><span style="color:#a6e22e">VERSION_1_8</span>
</span></span><span style="display:flex;"><span>            targetCompatibility JavaVersion<span style="color:#f92672">.</span><span style="color:#a6e22e">VERSION_1_8</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
</ol>
<p>以上的内容添加完毕之后，即可在Android中使用lambda表达式，这时候我们可以回到Android Studio中看看我们使用匿名内部类的一些情况，比如注册View的点击事件、RxJava的一些事件，可以发现IDE会提示我们可以使用lambda来代替。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Android开发常用开源库整理（不定期更新）</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E5%BA%93%E6%95%B4%E7%90%86%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/android%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E5%BA%93%E6%95%B4%E7%90%86%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/</guid>
      <description>&lt;p&gt;在此整理一下Android开发中常用的开源库，主要是为了在新建一个项目的时候能够快速的搭建好我们需要的环境，同时也能够方便的获取各个开源库的最新版本。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>在此整理一下Android开发中常用的开源库，主要是为了在新建一个项目的时候能够快速的搭建好我们需要的环境，同时也能够方便的获取各个开源库的最新版本。</p>
<h2 id="网络操作类">网络操作类：</h2>
<ol>
<li>Retrofit</li>
</ol>
<blockquote>
<p><a href="https://github.com/square/retrofit">https://github.com/square/retrofit</a></p>
</blockquote>
<ol start="2">
<li>OkHttp</li>
</ol>
<blockquote>
<p><a href="https://github.com/square/okhttp">https://github.com/square/okhttp</a></p>
</blockquote>
<ol start="3">
<li>Gson</li>
</ol>
<blockquote>
<p><a href="https://github.com/google/gson">https://github.com/google/gson</a></p>
</blockquote>
<h2 id="rx类">Rx类：</h2>
<ol>
<li>RxJava</li>
</ol>
<blockquote>
<p><a href="https://github.com/ReactiveX/RxJava">https://github.com/ReactiveX/RxJava</a></p>
</blockquote>
<ol start="2">
<li>RxAndroid</li>
</ol>
<blockquote>
<p><a href="https://github.com/ReactiveX/Rxandroid">https://github.com/ReactiveX/Rxandroid</a></p>
</blockquote>
<h2 id="事件通知类">事件通知类：</h2>
<ol>
<li>EventBus</li>
</ol>
<blockquote>
<p><a href="https://github.com/greenrobot/EventBus">https://github.com/greenrobot/EventBus</a></p>
</blockquote>
<h2 id="android原生控件类">Android原生控件类：</h2>
<ol>
<li>RecyclerView</li>
</ol>
<blockquote>
<p>compile &lsquo;com.android.support:recyclerview-v7:24.2.0&rsquo;</p>
</blockquote>
<ol start="2">
<li>CardView</li>
</ol>
<blockquote>
<p>compile &lsquo;com.android.support:cardview-v7:24.2.0&rsquo;</p>
</blockquote>
<ol start="3">
<li>SupportLiabrary</li>
</ol>
<blockquote>
<p>compile &lsquo;com.android.support:support-v4:24.2.0&rsquo;</p>
</blockquote>
<h2 id="图片加载类">图片加载类：</h2>
<ol>
<li>Glide</li>
</ol>
<blockquote>
<ul>
<li><a href="https://github.com/bumptech/glide">https://github.com/bumptech/glide</a></li>
<li>Glide transform： <a href="https://github.com/wasabeef/glide-transformations">https://github.com/wasabeef/glide-transformations</a></li>
<li>Glide Pattele：https://github.com/florent37/GlidePalette</li>
</ul>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Android游戏手柄开发记录（一）</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android%E6%B8%B8%E6%88%8F%E6%89%8B%E6%9F%84%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95%E4%B8%80/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/android%E6%B8%B8%E6%88%8F%E6%89%8B%E6%9F%84%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95%E4%B8%80/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;最近一直在进行Android游戏手柄的开发，在这里简单记录一下自己在这个过程中遇到的问题，同时也能够为自己以后的开发提供一些帮助。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="前言">前言</h1>
<p>最近一直在进行Android游戏手柄的开发，在这里简单记录一下自己在这个过程中遇到的问题，同时也能够为自己以后的开发提供一些帮助。</p>
<h1 id="android手柄事件">Android手柄事件</h1>
<p>先来看下Android官方文档关于<strong>处理控制器输入动作</strong>的介绍：</p>
<blockquote>
</blockquote>
<ul>
<li>在 <code>Activity</code>中：</li>
<li><code>dispatchGenericMotionEvent(android.view.MotionEvent)</code>
<ul>
<li>处理一般的运动事件，如摇动摇杆。</li>
</ul>
</li>
<li><code>dispatchKeyEvent(android.view.KeyEvent)</code>
<ul>
<li>处理按键事件，如按下或释放游戏键盘的按键或者D-pad的按钮。</li>
</ul>
</li>
<li>在<code>View</code>中：</li>
<li><code>onGenericMotionEvent(android.view.MotionEvent)</code>
<ul>
<li>处理一般的运动事件，如摇动摇杆。</li>
</ul>
</li>
<li><code>onKeyDown(int, android.view.KeyEvent)</code>
<ul>
<li>处理按下一个按键的事件，如按下游戏键盘的按键或者 D-pad 按钮。</li>
</ul>
</li>
<li><code>onKeyUp(int, android.view.KeyEvent)</code>
<ul>
<li>处理释放一个按键的事件，如释放游戏键盘的按键或者 D-pad 按钮。</li>
</ul>
</li>
</ul>
<p>从上面的介绍中，我们可以知道处理输入动作就两个事件：</p>
<ul>
<li><code>KeyEvent</code></li>
<li><code>MotionEvent</code>
处理输入动作的地方也就是两个：</li>
<li><code>Activity</code></li>
<li><code>View</code>
Android官方建议开发者从与用户交互的<code>View</code>对象中去捕获输入事件。</li>
</ul>
<p>在实际的开发过程中，大家也可以根据自己的需求，决定是从<code>Activity</code>或者<code>View</code>中去捕获输入事件。
下面我们就以从<code>Activity</code>中捕获事件为例进行记录。</p>
<h1 id="dispatchkeyevent">DispatchKeyEvent</h1>
<p><code>DispatchKeyEvent</code>可以处理几乎所有的输入动作，包括普通的游戏按键以及方向按键（D-pad）。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#75715e">//DispatchKeyEvent示例
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">dispatchKeyEvent</span><span style="color:#f92672">(</span>KeyEvent event<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>event<span style="color:#f92672">.</span><span style="color:#a6e22e">getAction</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> KeyEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">ACTION_DOWN</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span><span style="color:#75715e">//按键按下
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">switch</span> <span style="color:#f92672">(</span>event<span style="color:#f92672">.</span><span style="color:#a6e22e">getKeyCode</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> KeyEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">KEYCODE_BUTTON_A</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#75715e">//do something
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                    <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span><span style="color:#75715e">//按键释放
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">switch</span> <span style="color:#f92672">(</span>event<span style="color:#f92672">.</span><span style="color:#a6e22e">getKeyCode</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> KeyEvent<span style="color:#f92672">.</span><span style="color:#a6e22e">KEYCODE_BUTTON_A</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#75715e">//do something
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                    <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>上面的代码就是用来处理<code>KeyEvent</code>事件，但是在实际的开发过程中，我们可能遇到输入设备，如游戏手柄，具有摇杆和扳机键（Trigger）。上面的函数是无法去处理摇杆和扳机键事件的，因为摇杆和扳机键事件都有一个坐标（AXIS），那么摇杆和扳机键该如何处理呢，接下来我们就介绍另外一个函数：<code>dispatchMontionEvnet</code>。
#DispatchMotionEvent
<code>dispatchMontionEvnet</code>可以处理方向按键、摇杆、扳机键等具有坐标值的特殊按键。</p>
<p><code>MotionEvent</code>的优先级是要高于<code>KeyEvent</code>的，也就是说，当操作手柄的事件发生时，会先将获取到的<strong>KeyCode</strong>传递到<code>dispatchMotionEvent</code>或者<code>on</code>中进行处理，</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Android自定义流式布局的探索</title>
      <link>https://houzixiashanxiedaima.github.io/posts/android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80%E7%9A%84%E6%8E%A2%E7%B4%A2/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80%E7%9A%84%E6%8E%A2%E7%B4%A2/</guid>
      <description>&lt;p&gt;最近在学习Android中自定义View的一些知识，为了检验成果，先来自定义一个流式布局。&lt;/p&gt;
&lt;h3 id=&#34;什么是流式布局&#34;&gt;什么是流式布局？&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://upload-images.jianshu.io/upload_images/2524102-a4edfa75da430455.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;流式布局示例1&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://upload-images.jianshu.io/upload_images/2524102-9b3989321f3e5db6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;流式布局示例2.png&#34;  /&gt;
&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>最近在学习Android中自定义View的一些知识，为了检验成果，先来自定义一个流式布局。</p>
<h3 id="什么是流式布局">什么是流式布局？</h3>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-a4edfa75da430455.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流式布局示例1"  />
</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-9b3989321f3e5db6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流式布局示例2.png"  />
</p>
<p>上面就是流式布局的示例，简单来说就是一些不同宽度的控件显示的时候根据自己的宽度和当前行剩余的宽度来决定是显示在当前行还是换行显示。</p>
<h3 id="如何实现流式布局">如何实现流式布局</h3>
<p>实现流式布局毫无疑问是需要自定义布局的，虽然Android官方给我们提供了Recyclerview中的瀑布流布局，但是这种效果却并不好，因为瀑布流的布局需要给定一个spanCount，也就是瀑布的列数。但是我们的流式布局是不清楚有多少列多少行的，因为这完全取决于我们的控件的宽度和整个流式布局的宽度。
自定义流式布局和自定义其他的一些ViewGroup的步骤基本是一致的：</p>
<ol>
<li>先onMeasure</li>
<li>后onLayout</li>
</ol>
<p>我们先从第一步开始</p>
<p>首先直接放出onMeasure的代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Java" data-lang="Java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onMeasure</span><span style="color:#f92672">(</span><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> widthMeasureSpec<span style="color:#f92672">,</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> heightMeasureSpec<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">//获取该ViewGroup的父布局为该ViewGroup推荐的宽高以及计算模式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#66d9ef">int</span> sizeWidth <span style="color:#f92672">=</span> MeasureSpec<span style="color:#f92672">.</span><span style="color:#a6e22e">getSize</span><span style="color:#f92672">(</span>widthMeasureSpec<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">int</span> sizeHeight <span style="color:#f92672">=</span> MeasureSpec<span style="color:#f92672">.</span><span style="color:#a6e22e">getSize</span><span style="color:#f92672">(</span>heightMeasureSpec<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">int</span> modeWidth <span style="color:#f92672">=</span> MeasureSpec<span style="color:#f92672">.</span><span style="color:#a6e22e">getMode</span><span style="color:#f92672">(</span>widthMeasureSpec<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">int</span> modeHeight <span style="color:#f92672">=</span> MeasureSpec<span style="color:#f92672">.</span><span style="color:#a6e22e">getMode</span><span style="color:#f92672">(</span>heightMeasureSpec<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">//当该ViewGroup是wrap_content的时候，记录宽高
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#66d9ef">int</span> layoutWidth <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">int</span> layoutHeight <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">//每行的宽高，宽度永远都取最大值，高度则直接相加
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#66d9ef">int</span> lineWidth <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">int</span> lineHeight <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">//遍历childView计并算childView的宽高与margin值，然后通过计算结果来确定当
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#75715e">//我们的ViewGroup设置为wrap_content时ViewGroup的宽高
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">,</span> childCount <span style="color:#f92672">=</span> getChildCount<span style="color:#f92672">();</span> i <span style="color:#f92672">&lt;</span> childCount<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          View childView <span style="color:#f92672">=</span> getChildAt<span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">//通过ViewGroup的measureChild方法设置childView的宽高，执行完毕之后，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          <span style="color:#75715e">//所有的childView的宽高都已经确定了。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          measureChild<span style="color:#f92672">(</span>childView<span style="color:#f92672">,</span> widthMeasureSpec<span style="color:#f92672">,</span> heightMeasureSpec<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">//获取上一步中ViewGroup设置的childView的宽高
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          <span style="color:#66d9ef">int</span> childWidth <span style="color:#f92672">=</span> childView<span style="color:#f92672">.</span><span style="color:#a6e22e">getMeasuredWidth</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">int</span> childHeight <span style="color:#f92672">=</span> childView<span style="color:#f92672">.</span><span style="color:#a6e22e">getMeasuredHeight</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">//获取childView的LayoutParams
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          <span style="color:#75715e">// 每个布局都有一种特殊的LayoutParams，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          <span style="color:#75715e">//比如LinearLayout.LayoutParams,RelativeLayout.LayoutParams等等
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          MarginLayoutParams mlp <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>MarginLayoutParams<span style="color:#f92672">)</span> childView<span style="color:#f92672">.</span><span style="color:#a6e22e">getLayoutParams</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">//计算实际上childView的宽高(childView本身的宽高加上它的Margin值)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          <span style="color:#66d9ef">int</span> realChildWidth <span style="color:#f92672">=</span> childWidth <span style="color:#f92672">+</span> mlp<span style="color:#f92672">.</span><span style="color:#a6e22e">leftMargin</span> <span style="color:#f92672">+</span> mlp<span style="color:#f92672">.</span><span style="color:#a6e22e">rightMargin</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">int</span> realChildHeight <span style="color:#f92672">=</span> childHeight <span style="color:#f92672">+</span> mlp<span style="color:#f92672">.</span><span style="color:#a6e22e">topMargin</span> <span style="color:#f92672">+</span> mlp<span style="color:#f92672">.</span><span style="color:#a6e22e">bottomMargin</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">//该行当前的宽度加上childView实际的宽度大于布局宽度，则换行
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>lineWidth <span style="color:#f92672">+</span> realChildWidth <span style="color:#f92672">&gt;</span> sizeWidth<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>              <span style="color:#75715e">//执行换行操作
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              <span style="color:#75715e">//这里layoutWidth取lineWidth和realChildWidth的最大值是因为可能会
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              <span style="color:#75715e">//出现如下的情况：
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              <span style="color:#75715e">//上一行：= = = ==(宽度为8)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              <span style="color:#75715e">//该childView：==========(宽度&gt;8)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              layoutWidth <span style="color:#f92672">=</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">max</span><span style="color:#f92672">(</span>lineWidth<span style="color:#f92672">,</span> realChildWidth<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>              <span style="color:#75715e">//当前计算的总高度累加一个realChildHeight即可
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              layoutHeight <span style="color:#f92672">=</span> layoutHeight <span style="color:#f92672">+</span> realChildHeight<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#75715e">//换行之后，新行的宽度和高度需要重新计算，此处是设置为在该行的唯一一个childView的实际宽高
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              lineWidth <span style="color:#f92672">=</span> realChildWidth<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>              lineHeight <span style="color:#f92672">=</span> realChildHeight<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>              <span style="color:#75715e">//宽度未超出，可以直接相加宽度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              lineWidth <span style="color:#f92672">=</span> lineWidth <span style="color:#f92672">+</span> realChildWidth<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#75715e">//获取最终的行高，取之前的行高和当前子View的高度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              lineHeight <span style="color:#f92672">=</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">max</span><span style="color:#f92672">(</span>lineHeight<span style="color:#f92672">,</span> realChildHeight<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">// 如果是最后一个，需要做一些处理。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>i <span style="color:#f92672">==</span> childCount <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>              <span style="color:#75715e">//将当前布局的宽度和最后一行的宽度相比，取最大值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              layoutWidth <span style="color:#f92672">=</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">max</span><span style="color:#f92672">(</span>lineWidth<span style="color:#f92672">,</span> layoutWidth<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>              <span style="color:#75715e">//当前布局的行高还是简单的叠加即可
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              layoutHeight <span style="color:#f92672">=</span> layoutHeight <span style="color:#f92672">+</span> lineHeight<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">           *  Mode 一般有三种模式：
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">           *  MeasureSpec.EXACTLY: 一般是在childView设置match_parent时或者是设置了具体的宽高时使用。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">           *  MeasureSPec.AT_MOST: 一般是在childView设置wrap_content时使用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">           *  MeasureSpec.UNSPECIFIC: childView想要多大都行，用的比较少，可能会在ScrollView的heightMode中见到。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">           */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">// 下面就是判断childView的宽高时是如何设置的，如果是设置了具体的宽高
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          <span style="color:#75715e">//或者是match_parent，那就直接使用父布局给出的大小
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          <span style="color:#75715e">// 否则就使用我们自己测量出来的宽高
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          setMeasuredDimension<span style="color:#f92672">(</span>modeWidth <span style="color:#f92672">==</span> MeasureSpec<span style="color:#f92672">.</span><span style="color:#a6e22e">EXACTLY</span> <span style="color:#f92672">?</span> sizeWidth <span style="color:#f92672">:</span> layoutWidth<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>                  modeHeight <span style="color:#f92672">==</span> MeasureSpec<span style="color:#f92672">.</span><span style="color:#a6e22e">EXACTLY</span> <span style="color:#f92672">?</span> sizeHeight <span style="color:#f92672">:</span> layoutHeight<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>上面的代码注释已经非常的清楚，在onMeasure中的步骤也非常的清晰：</p>
<ol>
<li>获取父布局对流式布局的测量宽高和测量模式。</li>
<li>遍历流式布局中的childView。
<ul>
<li>测量并设置childView的宽高，执行这一步之后childView的宽高就已经确定</li>
<li>获取测量的childView的宽高和Layoutparams</li>
<li>计算实际上的childView宽高（包括margin）</li>
<li>判断childView的实际宽高+当前行的宽度是否超出流式布局的宽度
<ul>
<li>若超过，则换行[注1]</li>
<li>若未超过，则宽度累加，行高取当前行高与childView高度的最大值</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>最后一行的时候进行一些处理，获取最终的流式布局的宽和高</li>
</ul>
<p>onMeasure基本上就是这些了，接下来就是onLayout，先放代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Java" data-lang="Java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onLayout</span><span style="color:#f92672">(</span><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">boolean</span> changed<span style="color:#f92672">,</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> l<span style="color:#f92672">,</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> t<span style="color:#f92672">,</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> r<span style="color:#f92672">,</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> b<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>       <span style="color:#75715e">//获取该布局在onMeasure函数中测量的宽度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>       <span style="color:#66d9ef">int</span> flowWidth <span style="color:#f92672">=</span> getWidth<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>       <span style="color:#75715e">//通过lineWidth和lineHeight来确定childView的位置
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>       <span style="color:#66d9ef">int</span> lineWidth <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">int</span> lineHeight <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>       <span style="color:#75715e">//记录childView的left和top来确定位置
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>       <span style="color:#66d9ef">int</span> childLeft <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">int</span> childTop <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>       <span style="color:#75715e">//遍历子控件，记录每个子view的位置
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>       <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">,</span> childCount <span style="color:#f92672">=</span> getChildCount<span style="color:#f92672">();</span> i <span style="color:#f92672">&lt;</span> childCount<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>           View childView <span style="color:#f92672">=</span> getChildAt<span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>           <span style="color:#75715e">//获取到测量的宽和高
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>           <span style="color:#66d9ef">int</span> childWidth <span style="color:#f92672">=</span> childView<span style="color:#f92672">.</span><span style="color:#a6e22e">getMeasuredWidth</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>           <span style="color:#66d9ef">int</span> childHeight <span style="color:#f92672">=</span> childView<span style="color:#f92672">.</span><span style="color:#a6e22e">getMeasuredHeight</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>           <span style="color:#75715e">//因为childView可能设置margin，这里要加上margin的距离
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>           MarginLayoutParams mlp <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>MarginLayoutParams<span style="color:#f92672">)</span> childView<span style="color:#f92672">.</span><span style="color:#a6e22e">getLayoutParams</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>           <span style="color:#75715e">//判断整个childView所占的空间宽度+当前行的宽度是否大于父布局也就是我们ViewGroup的宽度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>           <span style="color:#75715e">//若大于就进行换行处理
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>           <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>lineWidth <span style="color:#f92672">+</span> mlp<span style="color:#f92672">.</span><span style="color:#a6e22e">leftMargin</span> <span style="color:#f92672">+</span> childWidth <span style="color:#f92672">+</span> mlp<span style="color:#f92672">.</span><span style="color:#a6e22e">rightMargin</span> <span style="color:#f92672">&gt;</span> flowWidth<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>               <span style="color:#75715e">//换行之后，left为最左边的值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>               childLeft <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>               <span style="color:#75715e">//换行之后，top为top+当前的行高
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>               childTop <span style="color:#f92672">=</span> childTop <span style="color:#f92672">+</span> lineHeight<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>               <span style="color:#75715e">//换行之后，当前行高为换行前的行高+childView的TopMargin+childView+BottomMargin
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>               lineHeight <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>mlp<span style="color:#f92672">.</span><span style="color:#a6e22e">topMargin</span> <span style="color:#f92672">+</span> childHeight <span style="color:#f92672">+</span> mlp<span style="color:#f92672">.</span><span style="color:#a6e22e">bottomMargin</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>               <span style="color:#75715e">//换行之后，当前行宽度为0
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>               lineWidth <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>           <span style="color:#75715e">//设置childView的上下左右坐标，统一处理margin
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>           <span style="color:#66d9ef">int</span> left <span style="color:#f92672">=</span> childLeft <span style="color:#f92672">+</span> mlp<span style="color:#f92672">.</span><span style="color:#a6e22e">leftMargin</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>           <span style="color:#66d9ef">int</span> top <span style="color:#f92672">=</span> childTop <span style="color:#f92672">+</span> mlp<span style="color:#f92672">.</span><span style="color:#a6e22e">topMargin</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>           <span style="color:#66d9ef">int</span> right <span style="color:#f92672">=</span> left <span style="color:#f92672">+</span> childWidth<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>           <span style="color:#66d9ef">int</span> bottom <span style="color:#f92672">=</span> top <span style="color:#f92672">+</span> childHeight<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>           childView<span style="color:#f92672">.</span><span style="color:#a6e22e">layout</span><span style="color:#f92672">(</span>left<span style="color:#f92672">,</span> top<span style="color:#f92672">,</span> right<span style="color:#f92672">,</span> bottom<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>           <span style="color:#75715e">//记录当前行的宽度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>           lineWidth <span style="color:#f92672">=</span> lineWidth <span style="color:#f92672">+</span> <span style="color:#f92672">(</span>mlp<span style="color:#f92672">.</span><span style="color:#a6e22e">leftMargin</span> <span style="color:#f92672">+</span> childWidth <span style="color:#f92672">+</span> mlp<span style="color:#f92672">.</span><span style="color:#a6e22e">rightMargin</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>           childLeft <span style="color:#f92672">=</span> lineWidth<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>       <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>onLayoutd的代码也非常的清晰：</p>
<ol>
<li>遍历childView</li>
<li>获取childView的宽高，并判断是否换行</li>
</ol>
<ul>
<li>若换行，则下一个childView的Left和下一行的width重置，行高为当前childView的实际高度，childTop则累加行高。</li>
<li>若不换行，宽度累加，行高不变。</li>
</ul>
<p>通过上面的onMeasure和onLayout之后，整个流式布局就已经基本完成，接下来我们设置布局文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span> <span style="color:#75715e">&lt;!--  布局文件--&gt;</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;RelativeLayout</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">xmlns:android=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res/android&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">xmlns:tools=</span><span style="color:#e6db74">&#34;http://schemas.android.com/tools&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">xmlns:app=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res-auto&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/content_flow&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">app:layout_behavior=</span><span style="color:#e6db74">&#34;@string/appbar_scrolling_view_behavior&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">tools:showIn=</span><span style="color:#e6db74">&#34;@layout/activity_flow&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">tools:context=</span><span style="color:#e6db74">&#34;stephen.com.bugstest.FlowActivity&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;stephen.com.bugstest.customwidgets.FlowLayout</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/flow_layout&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;match_parent&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;Welcome&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;IT工程师&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;学习ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;恋爱ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;挣钱ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;努力ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;I thick i can&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;Welcome&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;IT工程师&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;学习ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;恋爱ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;挣钱ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;努力ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;I thick i can&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;Welcome&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;IT工程师&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;学习ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;恋爱ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;挣钱ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;努力ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;I thick i can&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;Welcome&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;学习ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;恋爱ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;挣钱ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;努力ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;I thick i can&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;Welcome&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;IT工程师&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;学习ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;恋爱ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;挣钱ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;努力ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;I thick i can&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;Welcome&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;IT工程师&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;学习ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;恋爱ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;挣钱ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;努力ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;I thick i can&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;Welcome&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;IT工程师&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;学习ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;恋爱ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;挣钱ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;努力ing&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">style=</span><span style="color:#e6db74">&#34;@style/text_flag_01&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:text=</span><span style="color:#e6db74">&#34;I thick i can&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/stephen.com.bugstest.customwidgets.FlowLayout&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/RelativeLayout&gt;</span>
</span></span></code></pre></div><p>最终效果：
<img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-ba18794a67eec0ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最终效果图.png"  />
</p>
<p>从上面的图中我们可以看到，每一行都是根据宽度自动换行，最终形成了流式布局。</p>
<p>在上面的说明中，我标注了一个注[1]，这里具体来说一下：
在实际的编码和测试过程中，我发现如果我们的childView宽度大于本身整个流式布局的宽度，那么整个流式布局就被破坏了。直接上图看看吧：
<img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-da6b6c9312731b6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情况1.png"  />
</p>
<p>这种情况是只有这个childView的这一行的行距出现了问题。</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-33b1287cfc34db14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情况2.png"  />
</p>
<p>这种情况看起来好像是正常的，但是实际上是从这个childView之后的所有行高都变大了。</p>
<p>上面这两种情况的出现对应着代码中有一些微小的改动，在这里就不放出来了。针对上面的这两种情况，都尝试过解决办法，但是都失败了，可能是因为我们在onLayout中使用了行高来确定上下两行的间隔距离，而这个childView的行高要特殊一些，所以就导致出现这个问题。但是这个小问题也不用太在意，因为我们的流式布局基本上是不会碰到一个childView的宽度比整个布局的宽度还宽的。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>DrawerLayout：Write-Once，Run-EveryWhere</title>
      <link>https://houzixiashanxiedaima.github.io/posts/drawerlayoutwrite-oncerun-everywhere/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/drawerlayoutwrite-oncerun-everywhere/</guid>
      <description>&lt;p&gt;自从Material Design出来之后，各种各样的控件也是让人眼花缭乱，但是用的时候还是需要克制，比如Google在官方的Material Design Guideline中就建议内容相同的列表不要使用Cardview，而是推荐使用普通的布局，中间加上divider即可，避免给人一种分裂感。&lt;/p&gt;
&lt;p&gt;在使用DrawerLayout的时候，可能我们多个Activity中都需要用到，我们是不是每个Activity都需要新建为Navigation Drawer Activity呢，答案是：NO。所以这次我们就来看看，如何“克制地”使用DrawerLayout&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write Once，Run Everywhere&lt;/p&gt;
&lt;/blockquote&gt;</description>
      <content:encoded><![CDATA[<p>自从Material Design出来之后，各种各样的控件也是让人眼花缭乱，但是用的时候还是需要克制，比如Google在官方的Material Design Guideline中就建议内容相同的列表不要使用Cardview，而是推荐使用普通的布局，中间加上divider即可，避免给人一种分裂感。</p>
<p>在使用DrawerLayout的时候，可能我们多个Activity中都需要用到，我们是不是每个Activity都需要新建为Navigation Drawer Activity呢，答案是：NO。所以这次我们就来看看，如何“克制地”使用DrawerLayout</p>
<blockquote>
<p>Write Once，Run Everywhere</p>
</blockquote>
<h2 id="新建navigation-drawer-activity">新建Navigation Drawer Activity</h2>
<p>首先我们新建一个Navigation Drawer Activity作为我们BaseActivity，布局文件如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;android.support.v4.widget.DrawerLayout</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:android=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res/android&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:app=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res-auto&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:tools=</span><span style="color:#e6db74">&#34;http://schemas.android.com/tools&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/drawer_layout&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:fitsSystemWindows=</span><span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">tools:openDrawer=</span><span style="color:#e6db74">&#34;start&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">&lt;!--&lt;include
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">        layout=&#34;@layout/app_bar_base_drawer&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">        android:layout_width=&#34;match_parent&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">        android:layout_height=&#34;match_parent&#34;/&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">--&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;FrameLayout</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/frame_container&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;match_parent&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;android.support.design.widget.NavigationView</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_view&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;wrap_content&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_gravity=</span><span style="color:#e6db74">&#34;start&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:fitsSystemWindows=</span><span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">app:headerLayout=</span><span style="color:#e6db74">&#34;@layout/nav_header_base_drawer&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">app:menu=</span><span style="color:#e6db74">&#34;@menu/activity_base_drawer_drawer&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/android.support.v4.widget.DrawerLayout&gt;</span>
</span></span></code></pre></div><p>我们首先将Android studio自己生成的<code>&lt;include&gt;&lt;/include&gt;</code>注释掉，换成代码中的FrameLayout，接下来修改自动生成的BaseActivity代码：</p>
<p>重写setContentView函数,重写后的函数如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span>   <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">onCreate</span>(savedInstanceState: Bundle?) {
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">super</span>.onCreate(savedInstanceState)
</span></span><span style="display:flex;"><span>   }
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">setContentView</span>(layoutResID: Int) {
</span></span><span style="display:flex;"><span>       <span style="color:#75715e">//首先获取带有DrawerLayout的布局
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>       <span style="color:#66d9ef">val</span> drawer = layoutInflater.inflate(<span style="color:#a6e22e">R</span>.layout.activity_base_drawer, <span style="color:#66d9ef">null</span>) <span style="color:#66d9ef">as</span> DrawerLayout
</span></span><span style="display:flex;"><span>       <span style="color:#75715e">//然后获取这个布局里面的FrameLayout，也就是我们刚才在xml中添加的FrameLayout
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>       <span style="color:#66d9ef">val</span> frameContainer = drawer.findViewById(<span style="color:#a6e22e">R</span>.id.frame_container) <span style="color:#66d9ef">as</span> FrameLayout
</span></span><span style="display:flex;"><span>       <span style="color:#75715e">//然后将子类的布局添加到FrameLayout中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>       layoutInflater.inflate(layoutResID, frameContainer, <span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>       <span style="color:#75715e">//最后设置布局为DrawerLayout的布局
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>       setContentView(drawer)
</span></span><span style="display:flex;"><span>       <span style="color:#75715e">//下面就是一些设置DrawerLayout动作和点击事件的代码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>       <span style="color:#66d9ef">val</span> toggle = ActionBarDrawerToggle(
</span></span><span style="display:flex;"><span>               <span style="color:#66d9ef">this</span>, drawer, <span style="color:#a6e22e">R</span>.string.navigation_drawer_open, <span style="color:#a6e22e">R</span>.string.navigation_drawer_close)
</span></span><span style="display:flex;"><span>       drawer.setDrawerListener(toggle)
</span></span><span style="display:flex;"><span>       toggle.syncState()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">val</span> navigationView = findViewById(<span style="color:#a6e22e">R</span>.id.nav_view) <span style="color:#66d9ef">as</span> NavigationView
</span></span><span style="display:flex;"><span>       navigationView.setNavigationItemSelectedListener(<span style="color:#66d9ef">this</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>       toolbar.setNavigationOnClickListener { view <span style="color:#f92672">-&gt;</span> drawer.openDrawer(<span style="color:#a6e22e">Gravity</span>.START) }
</span></span><span style="display:flex;"><span>   }
</span></span></code></pre></div><p>上面的代码使用Kotlin写的，顺便提一句：</p>
<blockquote>
<p>在今天凌晨的Google I/O 2017上，Android Team已经将Kotlin做为Android开发的&quot;first-class&quot;了。</p>
</blockquote>
<p>上面设置完之后，我们可以随便新建一个Activity，然后继承BaseActivity即可。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DrawerActivity</span> : BaseDrawerActivity() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">onCreate</span>(savedInstanceState: Bundle?) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">super</span>.onCreate(savedInstanceState)
</span></span><span style="display:flex;"><span>        setContentView(<span style="color:#a6e22e">R</span>.layout.app_bar_base_drawer)
</span></span><span style="display:flex;"><span>        fab.setOnClickListener { view <span style="color:#f92672">-&gt;</span> <span style="color:#a6e22e">Snackbar</span>.make(view, <span style="color:#e6db74">&#34;可以&#34;</span>, <span style="color:#a6e22e">Snackbar</span>.LENGTH_SHORT).show() }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>来看看结果：
<img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-d6e24c1d16735925.gif?imageMogr2/auto-orient/strip" alt="drawer-layout.gif"  />

可以看到我们的功能已经实现了，但是有一些小瑕疵：</p>
<blockquote>
<p>Toolbar上面没有菜单键，需要通过从屏幕左边滑才能呼出Drawer</p>
</blockquote>
<p>这个问题从我们上面的代码中也体现出来了，在BaseActivity中并没有将Drawer的操作与Toolbar联系到一起，接下来我们就来添加代码，让Toolbar和Drawer联系到一起，添加到上面重写的setContentView中相应的位置</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span>  <span style="color:#75715e">//获取Toolbar
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">val</span> toolbar = frameContainer.findViewById(<span style="color:#a6e22e">R</span>.id.toolbar) <span style="color:#66d9ef">as</span> Toolbar
</span></span><span style="display:flex;"><span>        setSupportActionBar(toolbar)
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 将Toolbar与Drawer的动作联系起来
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">val</span> toggle = ActionBarDrawerToggle(
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">this</span>, drawer,toolbar, <span style="color:#a6e22e">R</span>.string.navigation_drawer_open, <span style="color:#a6e22e">R</span>.string.navigation_drawer_close)
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">//最后设置toolbar的点击事件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  toolbar.setNavigationOnClickListener { view <span style="color:#f92672">-&gt;</span> drawer.openDrawer(<span style="color:#a6e22e">Gravity</span>.START) }
</span></span></code></pre></div><p>经过上面的设置之后，再来看看运行效果：
<img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-d49733181469cf69.gif?imageMogr2/auto-orient/strip" alt="drawer-layout-new.gif"  />
</p>
<blockquote>
<p>如果点击菜单键没有反应的话，请删除掉继承自BaseActivity的activity中的setSupportActionBar这行代码即可</p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Material-Design-之TabLayout与Toolbar</title>
      <link>https://houzixiashanxiedaima.github.io/posts/material-design-%E4%B9%8Btablayout%E4%B8%8Etoolbar/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/material-design-%E4%B9%8Btablayout%E4%B8%8Etoolbar/</guid>
      <description>&lt;p&gt;今天在学习Material Design的过程中，遇到了一个比较坑的问题，在这里记录一下，以后如果有人遇到的话，可以做个参考吧。首先来看看我们的需求，今天我们需要实现下面这个效果：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://upload-images.jianshu.io/upload_images/2524102-d8903fa389d460a8.gif?imageMogr2/auto-orient/strip&#34; alt=&#34;需求.gif&#34;  /&gt;
&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>今天在学习Material Design的过程中，遇到了一个比较坑的问题，在这里记录一下，以后如果有人遇到的话，可以做个参考吧。首先来看看我们的需求，今天我们需要实现下面这个效果：</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-d8903fa389d460a8.gif?imageMogr2/auto-orient/strip" alt="需求.gif"  />
</p>
<blockquote>
<p>图片来自blog：http://blog.csdn.net/eclipsexys/article/details/46349721</p>
</blockquote>
<p>大家可以看到这个需求其实是非常简单的，就是有个Toolbar和一个TabLayout，然后在TabLayout中有个列表，根据列表的上下滑动，Toolbar也相应的隐藏和显示。我们都知道这个是Material Design中的动画效果，那么我们就直接开始动手编码来实现这个效果。首先贴出布局部分的代码吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;android.support.design.widget.CoordinatorLayout</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:android=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res/android&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:app=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res-auto&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:tools=</span><span style="color:#e6db74">&#34;http://schemas.android.com/tools&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/activity_base&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:fitsSystemWindows=</span><span style="color:#e6db74">&#34;true&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;android.support.design.widget.AppBarLayout</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/appbar&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;wrap_content&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">app:theme=</span><span style="color:#e6db74">&#34;@style/AppTheme.AppBarOverlay&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;android.support.v7.widget.Toolbar</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/toolbar&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;?attr/actionBarSize&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">app:layout_scrollFlags=</span><span style="color:#e6db74">&#34;scroll|enterAlways&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">app:popupTheme=</span><span style="color:#e6db74">&#34;@style/AppTheme.PopupOverlay&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;android.support.design.widget.TabLayout</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/tabs&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;wrap_content&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/android.support.design.widget.AppBarLayout&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;android.support.v4.view.ViewPager</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/viewpager&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;wrap_content&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">app:layout_behavior=</span><span style="color:#e6db74">&#34;@string/appbar_scrolling_view_behavior&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span>
</span></span></code></pre></div><p>上面就是我们主布局的代码，然后我们看看ViewPager对应的布局的代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;android.support.v4.widget.NestedScrollView</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:android=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res/android&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xmlns:app=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res-auto&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">app:layout_behavior=</span><span style="color:#e6db74">&#34;@string/appbar_scrolling_view_behavior&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;RelativeLayout</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;match_parent&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;TextView</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/section_label&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;wrap_content&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;wrap_content&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;ListView</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/listview&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:layout_width=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:layout_height=</span><span style="color:#e6db74">&#34;match_parent&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:layout_below=</span><span style="color:#e6db74">&#34;@id/section_label&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/RelativeLayout&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/android.support.v4.widget.NestedScrollView&gt;</span>
</span></span></code></pre></div><p>这个里面的代码也很简单，就是一个ListView，主要的作用就是上下滑动，然后触发Toolbar的动画。
剩下的就是一些简单的Fragment和一些控件初始化之类的，就不贴代码了，然后我们直接运行。运行之后截图如下：</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-82aeab75e5c07db8.gif?imageMogr2/auto-orient/strip" alt="运行结果.gif"  />
</p>
<p>运行结果如上图，请大家忽视这个画质的问题，视频转GIF真是心累。</p>
<blockquote>
<p>如果大家有什么好的视频转GIF的工具，可以给我推荐一下。</p>
</blockquote>
<p>有细心的朋友可能已经发现问题了，当我们将列表往上滑动时，Toolbar确实隐藏了起来，但是在最后，屏幕的左上角还留有一些没有隐藏起来。这是第一个问题，还有一个比较细节的问题是我们通过对比我们的<code>需求图片</code>和<code>运行结果</code>图片，可以发现：
需求图片中向上滑动时，状态栏是保持不动的，Toolbar和TabLayout向上滑动，给人一种状态栏是在Toolbar和Tablayout上方的感觉。
运行结果向上滑动时，状态栏也会向上滑，给人的感觉就像是被Toolbar和TabLayout挤上去的样子。</p>
<p>基于以上的两个不同之处，我们大致可以推断出Toolbar没有完全隐藏可能是因为状态栏的原因，那么我们就开始着手解决这个问题。</p>
<ul>
<li>从布局开始
首先我们进行了将主布局的<code>android:fitsSystemWindows=&quot;true&quot;</code>放到不同的地方，看看是否是这行代码出了问题，我分别将这行代码放到了CoordinatorLayout、AppBarLayout、Toolbar、TabLayout等多个地方，最后发现并没有解决问题。但是在这个过程中，却有一个小的变化是比较奇怪的，那就是当我<code>android:fitsSystemWindows=&quot;true&quot;</code>这行代码移出CoordinatorLayout中时，我们运行程序之后会出现如下结果：
<img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-cdda1190eb30c4a7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="将上述代码移动到AppBarLayout中的结果"  />
</li>
</ul>
<p>从上图中我们可以看到，上面的状态栏变白了。这个发现就更加印证了我们之前的推测：这件事情肯定和状态栏有关系。既然已经知道这个，那么我们就可以从第二个方面来解决。</p>
<ul>
<li>
<p>从代码入手
我们尝试着在<strong>进行了第一步尝试的基础上</strong>在代码中将状态栏的颜色修改一下<code>getWindow().setStatusBarColor(getResources().getColor(R.color.colorPrimaryDark));</code>修改完之后，发现是可以得到和需求一样的结果。问题得到了完美的解决&hellip;&hellip;吗？我们都知道上面这修改状态栏颜色的代码是在api&gt;=21才可以用的，那如果api&lt;21怎么办？可能有人会说用开源库来修改啊。这个确实是一种非常好的解决办法，但是我并不想“撞大运”式的将这个问题解决。所以我们还得继续的深入查找问题，那么这个时候就想到了，和状态栏有关的属性，除了布局文件中和代码中，还有一个地方，就是<code>style.xml</code>中。</p>
</li>
<li>
<p>从<code>style.xml</code>入手
先贴出代码：</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;resources&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;style</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;AppTheme.NoActionBar&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;item</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;windowActionBar&#34;</span><span style="color:#f92672">&gt;</span>false<span style="color:#f92672">&lt;/item&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;item</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;windowNoTitle&#34;</span><span style="color:#f92672">&gt;</span>true<span style="color:#f92672">&lt;/item&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;item</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;android:windowDrawsSystemBarBackgrounds&#34;</span><span style="color:#f92672">&gt;</span>true<span style="color:#f92672">&lt;/item&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;item</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;android:statusBarColor&#34;</span><span style="color:#f92672">&gt;</span>@android:color/transparent<span style="color:#f92672">&lt;/item&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/style&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/resources&gt;</span>
</span></span></code></pre></div><p>上面这个是<code>style.xml</code>(v21)的代码，从这段代码中我们就可以找到这次这个bug的罪魁祸首了。就是这一行<code>&lt;item name=&quot;android:statusBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;</code>
就是这行代码将我们的状态栏给弄成了透明了，结果就导致我们看到的状态栏和布局文件是在同一个z轴上，也就是会被挤上去，从而导致我们的Toolbar不能完全的隐藏起来。</p>
<p>最后，为什么这个小bug费了这么大劲才找出来，我上面这一整套代码，基本上都是在android studio 中新建一个TabActivity 自动生成的。也就说原本自动生成的代码就有这个Bug，谁能想到android studio 这个浓眉大眼的家伙也&quot;叛变革命&quot;了呢。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>NavigationView-子菜单问题</title>
      <link>https://houzixiashanxiedaima.github.io/posts/navigationview-%E5%AD%90%E8%8F%9C%E5%8D%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/navigationview-%E5%AD%90%E8%8F%9C%E5%8D%95%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;在Android 5.0之后，Google推出了Material Design兼容库，在Material Design的兼容库中，有个用的比较多的控件就是&lt;code&gt;NavigationView&lt;/code&gt;。在我们平时使用过程中，对于&lt;code&gt;NavigationView&lt;/code&gt;的一些小细节可能也并没有过多的关注，所以就导致我们在遇到特殊需求的时候无从下手，那么在这里我就简单记录一下使用&lt;code&gt;NavigationView&lt;/code&gt;的一些小坑，暂时可能也并没有遇到很多的坑，如果以后遇到的话会不定时更新。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>在Android 5.0之后，Google推出了Material Design兼容库，在Material Design的兼容库中，有个用的比较多的控件就是<code>NavigationView</code>。在我们平时使用过程中，对于<code>NavigationView</code>的一些小细节可能也并没有过多的关注，所以就导致我们在遇到特殊需求的时候无从下手，那么在这里我就简单记录一下使用<code>NavigationView</code>的一些小坑，暂时可能也并没有遇到很多的坑，如果以后遇到的话会不定时更新。</p>
<h2 id="navigationview基本使用">NavigationView基本使用</h2>
<p>有很多人对于<code>NavigationView</code>的基本使用还是比较了解的， 那么我这里推荐一种非常偷懒的方法，就是我们在<code>Android Studio</code>中新建<code>Activity</code>时可以直接进行如下操作：</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-ed42f064db473404.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="New Navigation Activity.png"  />
</p>
<p>在选择了<code>Navigation Drawer Activity</code>之后会出现如下界面：</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-ba08509342d568c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Navigation Drawer Activity.png"  />
</p>
<p>然后点击<code>Finish</code>就可以完成一个最基础的带有<code>NavigationView</code>的<code>Activity</code>创建，创建之后就可以在原有的基础上进行修改了，这样也是非常的方便。</p>
<h2 id="navigationview-menu的设置">NavigationView Menu的设置</h2>
<h3 id="menu的第一种布局设置">Menu的第一种布局设置</h3>
<p>最基本的<code>Menu</code>的设置就是每行一个项目。在<code>menu</code>中的代码是这样的：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;menu</span> <span style="color:#a6e22e">xmlns:android=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res/android&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_camera&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_camera&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Import&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_gallery&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_gallery&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Gallery&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_slideshow&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_slideshow&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Slideshow&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_manage&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_manage&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Tools&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_share&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_share&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Share&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_send&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_send&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Send&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/menu&gt;</span>
</span></span></code></pre></div><p>实际效果是这样的：</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-d4299d3d8b622021.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="normal menu.png"  />
</p>
<p>通过上面的图片我们可以看到，这样设置之后，每个<code>item</code>都是独立的，各占一行，每一行代表着一个操作。</p>
<h3 id="menu的第二种布局设置">Menu的第二种布局设置</h3>
<p>子菜单的设置是这样的：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;menu</span> <span style="color:#a6e22e">xmlns:android=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res/android&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;group</span> <span style="color:#a6e22e">android:checkableBehavior=</span><span style="color:#e6db74">&#34;single&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_camera&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_camera&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Import&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_gallery&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_gallery&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Gallery&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_slideshow&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_slideshow&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Slideshow&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_manage&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_manage&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Tools&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/group&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;item</span> <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Communicate&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;menu&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_share&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_share&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Share&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_send&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_send&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Send&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/menu&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/item&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;about&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;menu&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_about&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_history&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;about&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/menu&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/item&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/menu&gt;</span>
</span></span></code></pre></div><p>设置之后的效果是这样的：</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-14bcb6aaaca2a190.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="group menu.png"  />
</p>
<p>通过这种设置分组之后，我们可以发现，每个组是一起的，是通过<code>group</code>将同一个组的<code>item</code>包裹起来，组内的<code>item</code>可能会相互影响，这取决于你设置属性<code>android:checkableBehavior</code>的值。而且在上面的图片中我们也可以发现一个小的细节，就是我们组和组之间有一条小横线隔开了，有点类似于我们在<code>ListView</code>中设置的<code>divider</code>属性。</p>
<h3 id="menu的第三种布局设置">Menu的第三种布局设置</h3>
<p>那么在我们实际的开发过程中，有时候我们需要把第一种和第二种结合起来，也就是说呈现出下图中的效果：</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-e5c2c8f0c2f049d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="group menu special.png"  />
</p>
<p>细心的朋友可能已经看出来第三种和第二种的区别。
第二种的布局结果是每个<code>group</code>下有一个<code>title</code>，然后在<code>title</code>下面才是我们的子<code>item</code>
第三种是直接每个<code>group</code>下就是子<code>item</code>并没有第二种中出现的<code>title</code>
很显然在某些情况下，我们的开发需求需要像第三种这样简约但是不简单的<code>Navigation Menu</code>还是先来看看我们第三种布局的<code>menu</code>文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;menu</span> <span style="color:#a6e22e">xmlns:android=</span><span style="color:#e6db74">&#34;http://schemas.android.com/apk/res/android&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;group</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_group_normal&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:checkableBehavior=</span><span style="color:#e6db74">&#34;single&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_camera&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_camera&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Import&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_gallery&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_gallery&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Gallery&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_slideshow&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_slideshow&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Slideshow&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_manage&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_manage&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Tools&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/group&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;group</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_commnunicate&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Communicate&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_share&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_share&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Share&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_send&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_menu_send&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;Send&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/group&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;group</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_about_group&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;about&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;item</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:id=</span><span style="color:#e6db74">&#34;@+id/nav_about&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:icon=</span><span style="color:#e6db74">&#34;@drawable/ic_history&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">android:title=</span><span style="color:#e6db74">&#34;about&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/item&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/group&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/menu&gt;</span>
</span></span></code></pre></div><p>这个布局文件就是用<code>group</code>包裹起每个组的<code>item</code>，有点类似第二种布局，但是<strong>最关键</strong>的地方就是要为每一个<code>group</code>设置一个<code>id</code>，设置完成之后就可以得到第三种布局的效果。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Virtualbox与Mactype共存</title>
      <link>https://houzixiashanxiedaima.github.io/posts/virtualbox%E4%B8%8Emactype%E5%85%B1%E5%AD%98/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/virtualbox%E4%B8%8Emactype%E5%85%B1%E5%AD%98/</guid>
      <description>&lt;h1 id=&#34;virtualbox与mactype共存&#34;&gt;Virtualbox与Mactype共存&lt;/h1&gt;
&lt;p&gt;最近心血来潮，准备重启吃灰好久的ubuntu虚拟机玩玩，于是开开心心准备打开机器，顺利进入，准备更新下软件，发现网速好慢，虽然主机能够高速访问“外网”，但是虚拟机并没有享受到这种福利，那么能不能让虚拟机也享受呢？这么一说，就是一段折腾史……&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="virtualbox与mactype共存">Virtualbox与Mactype共存</h1>
<p>最近心血来潮，准备重启吃灰好久的ubuntu虚拟机玩玩，于是开开心心准备打开机器，顺利进入，准备更新下软件，发现网速好慢，虽然主机能够高速访问“外网”，但是虚拟机并没有享受到这种福利，那么能不能让虚拟机也享受呢？这么一说，就是一段折腾史……</p>
<p>##　虚拟机“外网”访问
虚拟机访问“外网”，可以通过设置虚拟机的网络为桥接模式，然后在虚拟机中设置主机的ip和端口即可。具体设置我们后面再说，先来打开桥接模式。
首先我们打开virtualbox的设置-&gt;网络-&gt;网卡1-&gt;连接方式-&gt;桥接网卡。到这一步的时候，被无情的提示“未指定”。原因是下图中红色箭头标记的那个东西没有
<img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-7d2b077d6ffba4d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="未指定.png"  />

根据网上的<a href="http://www.dabu.info/the-virtual-box-bridging-error-not-specified-network-interface-to-be-bridged.html">提示</a>安装桥接网卡驱动，但是安装完毕之后，依然没有显示出来。经过多方查证，发现是虚拟机版本太低，于是选择将4.3.12升级到5.1.18（最新版），升级完毕之后选择桥接网卡，一切顺利。</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-c9fc08a01d6f881c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="桥接网卡.png"  />
</p>
<p>准备开机起飞……还没飞起来就被无情打脸，虚拟机不能启动，报错信息如下：</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-4cb56fa29e06e494.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="虚拟机报错.png"  />

这个报错信息就是我们今天的关键信息，这个报错信息一般都是出现在<code>virtualbox 5.0+</code>和<code>windows 8+</code>上面，那么具体是什么原因呢，是因为virtualbox5.0之后对于系统的要求更严格了，说白了就是系统中如果安装了一些杀毒软件、主题修改的东西，那么虚拟机基本上就是会报这个错误。但是由于我的电脑一直是裸奔状态，于是我就将目标转向了mactype，这是我装的唯一一个主题修改类软件，于是经过多方查证找到了<a href="https://www.zhihu.com/question/27159349">解决办法</a>
按照上面的步骤操作之后，然后准备再次起飞……依然没飞起来被打脸，打脸的还是那个报错信息。于是再次排查，找了半天，发现virtualbox5.0之后安装完虚拟机还要安装一个驱动，具体操作<a href="https://jingyan.baidu.com/article/4d58d541186ad89dd4e9c018.html">在这里</a>
这次安装完毕之后，再次信心满满的准备起飞……最后还是被打脸，我在想这飞机是不是有问题，准备换回4.3.12了，但是内心有个声音告诉我，一定要征服这个虚拟机，我就不信了。然后又到处找资料，找来找去还是找回到之前的杀毒软件和主题修改软件方向上，于是我仔细检查了一下我的电脑，搞了一下午，结果发现电脑右下角有一个净网大师，于是怒卸载之。
卸载完毕，再次小心翼翼的准备起飞，这一次飞机平稳的起飞，心中的大石头也落地了，这一下午算是值了。</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-81efa0e0b9c7c6b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="飞机平稳起飞咯"  />

最后说一下关于ubuntu虚拟机桥接主机高速访问“外网”的方法：
在宿主机windows上运行shadowsocks.exe并勾选“允许局域网连接”
使用桥接方式运行虚拟机（这时虚拟机与宿主处于同一个局域网）
进入ubuntu系统，System Settings – Network – Network proxy勾选Manual（手动）,地址全部填宿主机IP（局域网网段），设置好代理端口（可在windows下的shadowsocks查看，一般为默认1080）
ubuntu用浏览器访问www.google.com，成功。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>沉浸式状态栏</title>
      <link>https://houzixiashanxiedaima.github.io/posts/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F%E6%8E%A2%E7%B4%A2/</link>
      <pubDate>Thu, 28 Jul 2016 15:19:45 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F%E6%8E%A2%E7%B4%A2/</guid>
      <description>&lt;h1 id=&#34;概念解析&#34;&gt;概念解析&lt;/h1&gt;
&lt;p&gt;在Adnroid 4.4(API level 19)中引入了“沉浸式”状态栏的概念，现在许多对这个“沉浸式”状态栏的解释。但是感觉大部分的解释好像“差一点”，要么是把“沉浸式”状态栏解释为“透明状态栏”，要么是解释为Toolbar颜色和状态栏颜色不一致（前者为colorprimary，后者为colorprimary_dark）的状态栏。但是其实Android官方对于沉浸式状态栏的解释是非常清楚的。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="概念解析">概念解析</h1>
<p>在Adnroid 4.4(API level 19)中引入了“沉浸式”状态栏的概念，现在许多对这个“沉浸式”状态栏的解释。但是感觉大部分的解释好像“差一点”，要么是把“沉浸式”状态栏解释为“透明状态栏”，要么是解释为Toolbar颜色和状态栏颜色不一致（前者为colorprimary，后者为colorprimary_dark）的状态栏。但是其实Android官方对于沉浸式状态栏的解释是非常清楚的。</p>
<h2 id="沉浸式状态栏">沉浸式状态栏</h2>
<p>这个概念的提出对于手机是虚拟按键的用户来说是非常有意义的，因为“沉浸式”的体验可以增加手机的阅读空间，将上面的状态栏（statusbar）和下面的导航栏（navigationbar）隐藏起来，从而造成“沉浸式”的体验。</p>
<p><img loading="lazy" src="http://upload-images.jianshu.io/upload_images/2524102-0ecbdedddfa6ac6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="沉浸模式状态.png"  />
</p>
<p>图中展示了不同的“沉浸式”状态
在上图中：</p>
<blockquote>
<ol>
<li><strong>非沉浸模式</strong> —— 展示了应用进入沉浸模式之前的状态。也展示了设置IMMERSIVE
标签后用户滑动展示系统栏的状态。用户滑动后，SYSTEM_UI_FLAG_HIDE_NAVIGATION
和SYSTEM_UI_FLAG_FULLSCREEN
就会被清除，系统栏就会重新显示并保持可见。 请注意，最好的实践方式就是让所有的UI控件的变化与系统栏的显示隐藏保持同步，这样可以减少屏幕显示所处的状态，同时提供了更无缝平滑的用户体验。因此所有的UI控件跟随系统栏一同显示。一旦应用进入了沉浸模式，相应的UI控件也跟随着系统栏一同隐藏。为了确保UI的可见性与系统栏保持一致，我们需要一个监听器View.OnSystemUiVisibilityChangeListener
来监听系统栏的变化。这在下一节中将详细讲解。</li>
<li><strong>提示气泡</strong>——第一次进入沉浸模式时，系统将会显示一个提示气泡，提示用户如何再让系统栏显示出来。</li>
</ol>
</blockquote>
<blockquote>
<blockquote>
<p><strong>Note</strong>：如果为了测试你想强制显示提示气泡，你可以先将应用设为沉浸模式，然后按下电源键进入锁屏模式，并在5秒中之后打开屏幕。</p>
</blockquote>
<ol start="3">
<li><strong>沉浸模式</strong>—— 这张图展示了隐藏了系统栏和其他UI控件的状态。你可以设置IMMERSIVE
和IMMERSIVE_STICKY
来进入这个状态。</li>
<li><strong>粘性标签</strong>——这就是你设置了IMMERSIVE_STICKY
标签时的UI状态，用户会向内滑动以展示系统栏。半透明的系统栏会临时的进行显示，一段时间后自动隐藏。滑动的操作并不会清空任何标签，也不会触发系统UI可见性的监听器，因为暂时显示的导航栏并不被认为是一种可见性状态的变化。</li>
</ol>
<blockquote>
<p><strong>Note</strong>：immersive类的标签只有在
与SYSTEM_UI_FLAG_HIDE_NAVIGATION,SYSTEM_UI_FLAG_FULLSCREEN
中一个或两个一起使用的时候才会生效。你可以只使用其中的一个，但是一般情况下你需要同时隐藏状态栏和导航栏以达到沉浸的效果。</p>
</blockquote>
</blockquote>
<p>上面引用了Android官方培训课程中对于“沉浸式”的讲解。</p>
<p>从上面我们可以知道“沉浸式”是像我们前面所说的，将状态栏（statusbar）和导航栏（navigationbar）给隐藏起来（气泡[3]的状态），并不是像大部分的应用那样，将我们的状态栏设置为透明，或者是将状态栏颜色加深。
气泡[4]的状态是我们在“沉浸式”过程中点击屏幕之后产生的效果，即当我们阅读完毕时，点击屏幕，让屏幕获取焦点， 显示出状态栏和导航栏，然后进行其他的操作。
使用colorPrimary和colorPrimaryDark只是为了设置状态栏颜色，而且在Android 5.0之后，Material Design中引入了Toolbar，这也可以将Toolbar颜色和状态颜色区分开。</p>
<p><strong>最后希望各位通过篇文章了解什么是“沉浸式”状态栏，或者了解什么是“沉浸式”，而不是简单的将透明状态栏或是所谓的“变色龙”状态栏成为沉浸式状态栏。</strong></p>]]></content:encoded>
    </item>
    
    <item>
      <title>ADB 命令行无线调试</title>
      <link>https://houzixiashanxiedaima.github.io/posts/adb-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/</link>
      <pubDate>Thu, 28 Jul 2016 15:17:34 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/adb-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/</guid>
      <description>ADB无线调试步骤（不用root） 将手机通过USB连接到PC 在命令行输入：adb tcpip 5555开启无线调试模式 PC端开启WiFi热点 手机连上PC的WiFi热点 在命令行输入：adb connect [你的手机IP] 若要恢复USB有线调试模式，只需要在保持手机与PC连接状态下输入adb usb即可 若要断开连接，在命令行输入adb disconnect即可。 </description>
      <content:encoded><![CDATA[<h1 id="adb无线调试步骤不用root">ADB无线调试步骤（不用root）</h1>
<ol start="0">
<li>将手机通过USB连接到PC</li>
<li>在命令行输入：<code>adb tcpip 5555</code>开启无线调试模式</li>
<li>PC端开启WiFi热点</li>
<li>手机连上PC的WiFi热点</li>
<li>在命令行输入：<code>adb connect [你的手机IP]</code></li>
<li>若要恢复USB有线调试模式，只需要在保持手机与PC连接状态下输入<code>adb usb</code>即可</li>
<li>若要断开连接，在命令行输入<code>adb disconnect</code>即可。</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Git配置彩色Log</title>
      <link>https://houzixiashanxiedaima.github.io/posts/git-%E8%BE%93%E5%87%BA%E5%BD%A9%E8%89%B2log/</link>
      <pubDate>Thu, 28 Jul 2016 15:17:34 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/git-%E8%BE%93%E5%87%BA%E5%BD%A9%E8%89%B2log/</guid>
      <description>Git 彩色Log配置 git 在打印log的时候，默认是黑底白字，这样我们很多的关键信息都不能够非常突出的显示出来，看起来也是比较费劲。我们可以通过如下的语句让git打印出来的log出现彩色的字体，这样的话可以让我们更直接的看到我们的提交信息的关键字。
关键语句如下：
git log --graph --pretty=format:&amp;#39;%Cred%h - %Cgreen[%an]%Creset -%C(yellow)%d%Creset %s %C(yellow)&amp;lt;%cr&amp;gt;%Creset&amp;#39; --abbrev-commit --date=relative 大家可以看到这个关键语句比较长，我们不可能每次想要打印log的时候，都输入这么长的语句。 这样并不符合我们&amp;quot;能懒就懒&amp;quot;的原则。所以我们可以将这条语句配置到config配置文件里面
关键配置语句如下：
# 为了更简单,将log的别名设置为lg,以后就可以直接git lg输出日志了 git config --global alias.lg &amp;#34;log --graph --pretty=format:&amp;#39;%Cred%h - %Cgreen[%an]%Creset -%C(yellow)%d%Creset %s %C(yellow)&amp;lt;%cr&amp;gt;%Creset&amp;#39; --abbrev-commit --date=relative&amp;#34; 执行了上面的配置语句之后，我们以后每次输出log就可以直接输入下面的语句：
git lg 这样我们每次就只需要输入上面的一条语句，就可以看到我们的彩色log信息，关键字都已经变色，而且不同的信息用-分隔开，一目了然，在也不用面对黑底白字的命令行窗口了。 最后再给大家提供另一种log的格式，大家根据自己的喜好自行选择：
git config --global alias.lg &amp;#34;log --color --graph --pretty=format:&amp;#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39; --abbrev-commit&amp;#34; git config --global alias.his &amp;#34;log --graph --decorate --oneline --pretty=format:&amp;#39;%Creset %s %C(magenta)in %Cred%h %C(magenta)commited by %Cgreen%cn %C(magenta)on %C(yellow) %cd %C(magenta)from %Creset %C(yellow)%d&amp;#39; --abbrev-commit --date=format:&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;&amp;#34; git config --global alias.</description>
      <content:encoded><![CDATA[<h1 id="git-彩色log配置">Git 彩色Log配置</h1>
<p>git 在打印log的时候，默认是黑底白字，这样我们很多的关键信息都不能够非常突出的显示出来，看起来也是比较费劲。我们可以通过如下的语句让git打印出来的log出现彩色的字体，这样的话可以让我们更直接的看到我们的提交信息的关键字。</p>
<!-- raw HTML omitted -->
<p><strong>关键语句如下：</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git log --graph --pretty<span style="color:#f92672">=</span>format:<span style="color:#e6db74">&#39;%Cred%h - %Cgreen[%an]%Creset -%C(yellow)%d%Creset %s %C(yellow)&lt;%cr&gt;%Creset&#39;</span> --abbrev-commit --date<span style="color:#f92672">=</span>relative
</span></span></code></pre></div><p>大家可以看到这个关键语句比较长，我们不可能每次想要打印log的时候，都输入这么长的语句。 这样并不符合我们&quot;能懒就懒&quot;的原则。所以我们可以将这条语句配置到config配置文件里面</p>
<p><strong>关键配置语句如下：</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 为了更简单,将log的别名设置为lg,以后就可以直接git lg输出日志了</span>
</span></span><span style="display:flex;"><span>git config --global alias.lg <span style="color:#e6db74">&#34;log --graph --pretty=format:&#39;%Cred%h - %Cgreen[%an]%Creset -%C(yellow)%d%Creset %s %C(yellow)&lt;%cr&gt;%Creset&#39; --abbrev-commit --date=relative&#34;</span>
</span></span></code></pre></div><p>执行了上面的配置语句之后，我们以后每次输出log就可以直接输入下面的语句：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git lg
</span></span></code></pre></div><p>这样我们每次就只需要输入上面的一条语句，就可以看到我们的彩色log信息，关键字都已经变色，而且不同的信息用-分隔开，一目了然，在也不用面对黑底白字的命令行窗口了。
最后再给大家提供另一种log的格式，大家根据自己的喜好自行选择：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git config --global alias.lg <span style="color:#e6db74">&#34;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git config --global alias.his <span style="color:#e6db74">&#34;log --graph --decorate --oneline --pretty=format:&#39;%Creset %s %C(magenta)in %Cred%h %C(magenta)commited by %Cgreen%cn %C(magenta)on %C(yellow) %cd %C(magenta)from %Creset %C(yellow)%d&#39; --abbrev-commit --date=format:&#39;%Y-%m-%d %H:%M:%S&#39;&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git config --global alias.hist <span style="color:#e6db74">&#34;log --graph --decorate --oneline --pretty=format:&#39;%Cred%h - %C(bold white) %s %Creset %C(yellow)%d  %C(cyan) &lt;%cd&gt; %Creset %Cgreen(%cn)&#39; --abbrev-commit --date=format:&#39;%Y-%m-%d %H:%M:%S&#39;&#34;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Hexo &#43; Github Pages搭建博客</title>
      <link>https://houzixiashanxiedaima.github.io/posts/hexo-&#43;-github-pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/hexo-&#43;-github-pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;p&gt;本文以Windows 10操作系统为例，介绍Hexo + Github Pages搭建个人博客的具体步骤。先简单介绍下Hexo和Github Pages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hexo是一个快速、简洁且高效的博客框架&lt;/li&gt;
&lt;li&gt;Github Pages是Github推出的静态页面托管服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将由Hexo生成的静态页面托管到Github Pages上，即可实现简单的个人博客或是项目介绍页面，那么接下来就来看看具体的操作步骤。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://i.loli.net/2020/04/15/DNjXiwZC51ekBy8.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>本文以Windows 10操作系统为例，介绍Hexo + Github Pages搭建个人博客的具体步骤。先简单介绍下Hexo和Github Pages</p>
<ul>
<li>Hexo是一个快速、简洁且高效的博客框架</li>
<li>Github Pages是Github推出的静态页面托管服务</li>
</ul>
<p>将由Hexo生成的静态页面托管到Github Pages上，即可实现简单的个人博客或是项目介绍页面，那么接下来就来看看具体的操作步骤。</p>
<p><img loading="lazy" src="https://i.loli.net/2020/04/15/DNjXiwZC51ekBy8.png" alt=""  />
</p>
<h2 id="环境配置">环境配置</h2>
<h3 id="创建github仓库">创建Github仓库</h3>
<ol>
<li>
<p>创建私有的源文件仓库</p>
<p>创建私有源文件仓库是因为部分源文件中会包含一些敏感的信息，为了更好地保护隐私。具体操作如图所示</p>
<p><img loading="lazy" src="https://i.loli.net/2020/04/15/3OiMJrNfTyUQCIB.png" alt=""  />
</p>
<p>在上图中，我们创建了一个名为<code>HexoSourceRepo</code>仓库，以后我们就会将博客的基本配置和文件存放在这个仓库。因此后续的主要操作，都是在<code>HexoSourceRepo</code>仓库进行的。</p>
</li>
<li>
<p>创建公开的静态页面仓库</p>
<p><img loading="lazy" src="https://i.loli.net/2020/04/15/PEpmUk12brxzRvC.png" alt=""  />
</p>
<p>创建静态页面仓库和源文件仓库步骤是一样的，但是有两个地方需要注意</p>
<ol>
<li>公开仓库的名称必须是你的用户名.github.io，比如你的用户名是<code>zhangsan</code>，那么仓库名称就必须是<code>zhangsan.github.io</code></li>
<li>静态页面仓库，也就是<code>zhangsan.github.io</code>是公开的，而源文件仓库是私有的。</li>
</ol>
</li>
</ol>
<p>创建好两个仓库之后，我们就可以开始安装<code>Hexo</code>了，但是在安装<code>Hexo</code>之前，需要先安装<code>Node</code>环境，因为<code>Hexo</code>是<code>Node.js</code>支持的。</p>
<h3 id="安装node">安装Node</h3>
<p>直接去<a href="https://nodejs.org/zh-cn/">Node官网</a>下载最新的安装包即可，推荐长期支持版，下载完成之后，打开安装包，一路下一步傻瓜式安装。安装完成之后，在命令行输入<code>node --version</code>和<code>npm -v</code>查看是否有输出，输出如下就表示没问题。</p>
<p><img loading="lazy" src="https://i.loli.net/2020/04/15/IcFY6D8ZgyBW2hR.png" alt=""  />
</p>
<p>在安装<code>Node</code>的时候会自动安装<code>npm</code>包管理工具，但是<code>npm</code>默认使用国外的镜像，所以在后面安装包的时候可能会非常慢，所以我们先将<code>npm</code>替换为<code>cnpm</code>，在命令行中输入如下命令</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>npm install -g cnpm --registry<span style="color:#f92672">=</span>https://registry.npm.taobao.org 
</span></span></code></pre></div><p><del>安装<code>cnpm</code>并将镜像替换为国内的<code>taobao</code>镜像，加速包的下载速度。如果不想安装<code>cnpm</code>也可以直接将<code>npm</code>的镜像替换为<code>taobao</code>镜像</del></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> npm config set registry https://registry.npm.taobao.org   
</span></span></code></pre></div><p><del>安装完<code>cnpm</code>之后，就可以将所有的<code>npm</code>命令使用<code>cnpm</code>代替。</del></p>
<blockquote>
<p>2020-5-1 15:47:56更新</p>
</blockquote>
<p>&ndash;可以安装<code>nrm</code>来选择各种源，具体操作为&ndash;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#安装nrm</span>
</span></span><span style="display:flex;"><span>npm install -g nrm
</span></span><span style="display:flex;"><span><span style="color:#75715e">#常用命令</span>
</span></span><span style="display:flex;"><span>nrm help <span style="color:#75715e">#显示帮助</span>
</span></span><span style="display:flex;"><span>nrm ls <span style="color:#75715e">#列出所有的源</span>
</span></span><span style="display:flex;"><span>nrm use cnpm <span style="color:#75715e">#切换源</span>
</span></span></code></pre></div><p>通过<code>nrm</code>我们可以更好的管理各种源，选择国内的源能够显著的提升包的安装速度。</p>
<h3 id="安装git">安装Git</h3>
<p>在<a href="https://git-scm.com/download/win">Git官方页面</a>下载Git，完成之后一路下一步傻瓜式安装。安装完成之后，即可使用<code>Git Bash</code>和<code>Git GUI</code></p>
<p>来进行<code>Git</code>操作，本文全程使用<code>Git Bash</code>操作。为了能在<code>Git Bash</code>中使用<code>Node</code>和<code>npm</code>命令，还需要配置一下<code>Node</code>的环境变量，否则会出现<code>command not found</code>错误。</p>
<p>在环境变量－系统变量中，添加一个<code>NODE_PATH</code>值为<code>C:\Program Files\nodejs</code>(注意替换为自己的<code>Node</code>安装路径)，然后在<code>Path</code>中添加<code>%NODE_PATH%</code>即可。</p>
<h3 id="安装hexo">安装Hexo</h3>
<p>在喜欢的位置，新建一个文件夹，名为<code>HexoSourceRepo</code>，和上面创建的私有文件仓库同名。然后在文件夹中打开<code>Git Bash</code>依次进行如下操作</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git init //初始化Git仓库
</span></span><span style="display:flex;"><span>git remote add origin https://github.com/yourname/HexoSourceRepo.git //添加远程仓库
</span></span><span style="display:flex;"><span>git add . 
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;init hexo blog&#34;</span> //第一次提交
</span></span><span style="display:flex;"><span>git push -u origin master
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cnpm install hexo //安装Hexo
</span></span><span style="display:flex;"><span>hexo init //初始化Hexo
</span></span><span style="display:flex;"><span>cnpm install //安装依赖包
</span></span><span style="display:flex;"><span>cnpm install hexo-deployer-git //安装部署插件
</span></span></code></pre></div><p>安装完<code>Hexo</code>之后，可以在命令行执行<code>hexo -v</code>查看所有的信息，如果提示<code>command not found</code>那么就将<code>Hexo</code>添加到环境变量的<code>Path</code>中<code>C:\HexoSourceRepo\node_modules\.bin</code>(注意替换为自己的目录)。</p>
<p>经过上面的一系列操作，我们搭建好了基本的环境，接下来就是进行<code>Hexo</code>的博客配置，这部分内容主要是在<code>HexoSourceRepo</code>中进行的。后文中的根目录指的也是<code>HexoSourceRepo</code>这个目录。</p>
<p>打开根目录中的<code>_config.yml文件</code>，修改文件最后的<code>deploy</code>参数为如下内容</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">deploy</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">type</span>: <span style="color:#ae81ff">git</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">repository</span>: 
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">github</span>: <span style="color:#ae81ff">git@github.com:yourname/yourname.github.io.git //注意将yourname替换为自己的用户名</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">branch</span>: <span style="color:#ae81ff">master</span>
</span></span></code></pre></div><p>修改完成之后，我们再进行一次提交</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;first deploy&#34;</span>
</span></span><span style="display:flex;"><span>git push origin master 
</span></span><span style="display:flex;"><span>//然后继续执行
</span></span><span style="display:flex;"><span>hexo g -d //将生成的网站部署到Github Pages静态页面上
</span></span></code></pre></div><p>至此，我们就完成了个人博客的搭建和部署。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Hexo使用本地图片</title>
      <link>https://houzixiashanxiedaima.github.io/posts/hexo%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://houzixiashanxiedaima.github.io/posts/hexo%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</guid>
      <description>在日常写博客时，免不了需要插入图片帮助读者更好的理解。
对于Markdown语法，插入图片只需要输入
![图片描述](图片路径/xxx.png) 但是对于图片的存储，有几种方法
云服务，借助七牛云这类云服务进行图片的存储，可能需要收费 图床，sm.ms这类的公开图床，对于图片大小有一定的限制 自建Github仓库，相对有点麻烦 本地图片 在此主要推荐最后一种，就是放在本地，当然这里说的本地并不是指放在本机，而是指放在博客本身的目录中，也就是不通过外链引入图片。
对于Hexo博客使用本地图片，需要在配置文件_config.yml中设置post_asset_folder: true
设置完毕之后，每次写新的文章，只需要在命令行运行hexo new post xxx，就可以在博客的目录中自动生成一个名为xxx的目录和一个名为xxx.md的文件，写作的时候将我们需要的图片放入目录中，就可以在文章中直接引用了。
但是在写博客的时候，可能更多的是通过Typora这个软件来新建文件，这时候就没法自动生成同名目录，可以通过对Typora这个软件进行设置：
文件-偏好设置-图像-插入图片时-复制到指定路径-./${filename}
这样设置之后，我们每次写文章就可以直接将图片复制粘贴到文章中，Typora会自动帮我们生成文件夹并且把图片放入其中，也会将我们的图片引用路径改为相对路径。</description>
      <content:encoded><![CDATA[<p>在日常写博客时，免不了需要插入图片帮助读者更好的理解。</p>
<p><img loading="lazy" src="Hexo%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/1.jpg" alt=""  />
</p>
<p>对于<code>Markdown</code>语法，插入图片只需要输入</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>![<span style="color:#f92672">图片描述</span>](<span style="color:#a6e22e">图片路径/xxx.png</span>)
</span></span></code></pre></div><p>但是对于图片的存储，有几种方法</p>
<ul>
<li>云服务，借助七牛云这类云服务进行图片的存储，可能需要收费</li>
<li>图床，<code>sm.ms</code>这类的公开图床，对于图片大小有一定的限制</li>
<li>自建<code>Github</code>仓库，相对有点麻烦</li>
<li>本地图片</li>
</ul>
<p>在此主要推荐最后一种，就是放在本地，当然这里说的本地并不是指放在本机，而是指放在博客本身的目录中，也就是不通过外链引入图片。</p>
<p>对于<code>Hexo</code>博客使用本地图片，需要在配置文件<code>_config.yml</code>中设置<code>post_asset_folder: true</code></p>
<p>设置完毕之后，每次写新的文章，只需要在命令行运行<code>hexo new post xxx</code>，就可以在博客的目录中自动生成一个名为<code>xxx</code>的目录和一个名为<code>xxx.md</code>的文件，写作的时候将我们需要的图片放入目录中，就可以在文章中直接引用了。</p>
<p>但是在写博客的时候，可能更多的是通过<code>Typora</code>这个软件来新建文件，这时候就没法自动生成同名目录，可以通过对<code>Typora</code>这个软件进行设置：</p>
<blockquote>
<p>文件-偏好设置-图像-插入图片时-复制到指定路径-<code>./${filename}</code></p>
</blockquote>
<p>这样设置之后，我们每次写文章就可以直接将图片复制粘贴到文章中，<code>Typora</code>会自动帮我们生成文件夹并且把图片放入其中，也会将我们的图片引用路径改为相对路径。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
